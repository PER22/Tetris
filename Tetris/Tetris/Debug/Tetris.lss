
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000075c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080010a  0080010a  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135d  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc7  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073d  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a58  00000000  00000000  00003b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000045f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c1       	rjmp	.+756    	; 0x32a <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 01       	movw	r4, r0
  8e:	1d 01       	movw	r2, r26
  90:	1a 01       	movw	r2, r20
  92:	17 01       	movw	r2, r14
  94:	14 01       	movw	r2, r8
  96:	11 01       	movw	r2, r2
  98:	0e 01       	movw	r0, r28
  9a:	0b 01       	movw	r0, r22

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ec e5       	ldi	r30, 0x5C	; 92
  b0:	f7 e0       	ldi	r31, 0x07	; 7
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a8 34       	cpi	r26, 0x48	; 72
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	78 d1       	rcall	.+752    	; 0x3c4 <main>
  d4:	41 c3       	rjmp	.+1666   	; 0x758 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	5c f0       	brlt	.+22     	; 0xf4 <delay_ms+0x1c>
  de:	08 95       	ret
  e0:	00 00       	nop
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <delay_ms+0x8>
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	84 17       	cp	r24, r20
  ee:	95 07       	cpc	r25, r21
  f0:	19 f4       	brne	.+6      	; 0xf8 <delay_ms+0x20>
  f2:	08 95       	ret
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	33 e0       	ldi	r19, 0x03	; 3
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <delay_ms+0x8>

000000fe <LCD_WriteCommand>:
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	88 b9       	out	0x08, r24	; 8
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	00 00       	nop
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <delay_ms>
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	e1 df       	rcall	.-62     	; 0xd8 <delay_ms>
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	f2 df       	rcall	.-28     	; 0xfe <LCD_WriteCommand>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	f0 df       	rcall	.-32     	; 0xfe <LCD_WriteCommand>
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	ee df       	rcall	.-36     	; 0xfe <LCD_WriteCommand>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	ec df       	rcall	.-40     	; 0xfe <LCD_WriteCommand>
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	d6 cf       	rjmp	.-84     	; 0xd8 <delay_ms>
 12c:	08 95       	ret

0000012e <ADC_init>:
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
 13a:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 13c:	af e0       	ldi	r26, 0x0F	; 15
 13e:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
 140:	fc 01       	movw	r30, r24
 142:	0a 2e       	mov	r0, r26
 144:	02 c0       	rjmp	.+4      	; 0x14a <writetoAll16BitShiftRegisters+0x10>
 146:	f6 95       	lsr	r31
 148:	e7 95       	ror	r30
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <writetoAll16BitShiftRegisters+0xc>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
 14e:	fe 2f       	mov	r31, r30
 150:	f1 70       	andi	r31, 0x01	; 1
 152:	e0 ff       	sbrs	r30, 0
 154:	04 c0       	rjmp	.+8      	; 0x15e <writetoAll16BitShiftRegisters+0x24>
 156:	e5 b1       	in	r30, 0x05	; 5
 158:	ef 2b       	or	r30, r31
 15a:	e5 b9       	out	0x05, r30	; 5
 15c:	01 c0       	rjmp	.+2      	; 0x160 <writetoAll16BitShiftRegisters+0x26>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
 15e:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
 160:	fb 01       	movw	r30, r22
 162:	0a 2e       	mov	r0, r26
 164:	02 c0       	rjmp	.+4      	; 0x16a <writetoAll16BitShiftRegisters+0x30>
 166:	f6 95       	lsr	r31
 168:	e7 95       	ror	r30
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <writetoAll16BitShiftRegisters+0x2c>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
 16e:	fe 2f       	mov	r31, r30
 170:	f1 70       	andi	r31, 0x01	; 1
 172:	e0 ff       	sbrs	r30, 0
 174:	05 c0       	rjmp	.+10     	; 0x180 <writetoAll16BitShiftRegisters+0x46>
 176:	e5 b1       	in	r30, 0x05	; 5
 178:	ff 0f       	add	r31, r31
 17a:	fe 2b       	or	r31, r30
 17c:	f5 b9       	out	0x05, r31	; 5
 17e:	01 c0       	rjmp	.+2      	; 0x182 <writetoAll16BitShiftRegisters+0x48>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
 180:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
 182:	fa 01       	movw	r30, r20
 184:	0a 2e       	mov	r0, r26
 186:	02 c0       	rjmp	.+4      	; 0x18c <writetoAll16BitShiftRegisters+0x52>
 188:	f6 95       	lsr	r31
 18a:	e7 95       	ror	r30
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <writetoAll16BitShiftRegisters+0x4e>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
 190:	fe 2f       	mov	r31, r30
 192:	f1 70       	andi	r31, 0x01	; 1
 194:	e0 ff       	sbrs	r30, 0
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <writetoAll16BitShiftRegisters+0x6a>
 198:	e5 b1       	in	r30, 0x05	; 5
 19a:	ff 0f       	add	r31, r31
 19c:	ff 0f       	add	r31, r31
 19e:	fe 2b       	or	r31, r30
 1a0:	f5 b9       	out	0x05, r31	; 5
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <writetoAll16BitShiftRegisters+0x6c>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
 1a4:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
 1a6:	f9 01       	movw	r30, r18
 1a8:	0a 2e       	mov	r0, r26
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <writetoAll16BitShiftRegisters+0x76>
 1ac:	f6 95       	lsr	r31
 1ae:	e7 95       	ror	r30
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <writetoAll16BitShiftRegisters+0x72>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
 1b4:	fe 2f       	mov	r31, r30
 1b6:	f1 70       	andi	r31, 0x01	; 1
 1b8:	e0 ff       	sbrs	r30, 0
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <writetoAll16BitShiftRegisters+0x90>
 1bc:	e5 b1       	in	r30, 0x05	; 5
 1be:	ff 0f       	add	r31, r31
 1c0:	ff 0f       	add	r31, r31
 1c2:	ff 0f       	add	r31, r31
 1c4:	fe 2b       	or	r31, r30
 1c6:	f5 b9       	out	0x05, r31	; 5
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <writetoAll16BitShiftRegisters+0x92>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
 1ca:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 1cc:	ea e0       	ldi	r30, 0x0A	; 10
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
 1d0:	00 00       	nop
 1d2:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
 1d4:	e9 f7       	brne	.-6      	; 0x1d0 <writetoAll16BitShiftRegisters+0x96>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
 1d6:	2f 9a       	sbi	0x05, 7	; 5
 1d8:	ea e0       	ldi	r30, 0x0A	; 10
 1da:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 1dc:	00 00       	nop
 1de:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 1e0:	e9 f7       	brne	.-6      	; 0x1dc <writetoAll16BitShiftRegisters+0xa2>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
 1e2:	2f 98       	cbi	0x05, 7	; 5
 1e4:	ea e0       	ldi	r30, 0x0A	; 10
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 1e8:	00 00       	nop
 1ea:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <writetoAll16BitShiftRegisters+0xae>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 1ee:	11 97       	sbiw	r26, 0x01	; 1
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <writetoAll16BitShiftRegisters+0xba>
 1f2:	a6 cf       	rjmp	.-180    	; 0x140 <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
 1f4:	2d 9a       	sbi	0x05, 5	; 5
 1f6:	08 95       	ret

000001f8 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
 208:	87 70       	andi	r24, 0x07	; 7
	switch(column){
 20a:	48 2f       	mov	r20, r24
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	fa 01       	movw	r30, r20
 210:	ea 5b       	subi	r30, 0xBA	; 186
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	77 c1       	rjmp	.+750    	; 0x504 <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
 216:	4f ef       	ldi	r20, 0xFF	; 255
 218:	50 e8       	ldi	r21, 0x80	; 128
 21a:	14 c0       	rjmp	.+40     	; 0x244 <pulseColumn+0x4c>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
 21c:	4f ef       	ldi	r20, 0xFF	; 255
 21e:	50 e4       	ldi	r21, 0x40	; 64
			break;
 220:	11 c0       	rjmp	.+34     	; 0x244 <pulseColumn+0x4c>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
 222:	4f ef       	ldi	r20, 0xFF	; 255
 224:	50 e2       	ldi	r21, 0x20	; 32
			break;
 226:	0e c0       	rjmp	.+28     	; 0x244 <pulseColumn+0x4c>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
 228:	4f ef       	ldi	r20, 0xFF	; 255
 22a:	50 e1       	ldi	r21, 0x10	; 16
			break;
 22c:	0b c0       	rjmp	.+22     	; 0x244 <pulseColumn+0x4c>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
 22e:	4f ef       	ldi	r20, 0xFF	; 255
 230:	58 e0       	ldi	r21, 0x08	; 8
			break;
 232:	08 c0       	rjmp	.+16     	; 0x244 <pulseColumn+0x4c>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
 234:	4f ef       	ldi	r20, 0xFF	; 255
 236:	54 e0       	ldi	r21, 0x04	; 4
			break;
 238:	05 c0       	rjmp	.+10     	; 0x244 <pulseColumn+0x4c>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
 23a:	4f ef       	ldi	r20, 0xFF	; 255
 23c:	52 e0       	ldi	r21, 0x02	; 2
			break;
 23e:	02 c0       	rjmp	.+4      	; 0x244 <pulseColumn+0x4c>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
 240:	4f ef       	ldi	r20, 0xFF	; 255
 242:	51 e0       	ldi	r21, 0x01	; 1
 244:	e9 e0       	ldi	r30, 0x09	; 9
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	90 e1       	ldi	r25, 0x10	; 16
 24e:	89 9f       	mul	r24, r25
 250:	e0 0d       	add	r30, r0
 252:	f1 1d       	adc	r31, r1
 254:	11 24       	eor	r1, r1
 256:	38 96       	adiw	r30, 0x08	; 8
 258:	04 2f       	mov	r16, r20
 25a:	15 2f       	mov	r17, r21
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
 260:	6f ef       	ldi	r22, 0xFF	; 255
 262:	7f ef       	ldi	r23, 0xFF	; 255
		//check red green blue
		else if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
			//set lower byte of reg2 for red
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i);}
			//set register4 lower byte for green
		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 264:	ee 24       	eor	r14, r14
 266:	e3 94       	inc	r14
 268:	f1 2c       	mov	r15, r1
 26a:	dc 01       	movw	r26, r24
 26c:	18 96       	adiw	r26, 0x08	; 8
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		if(frame.frame[column][i+8] == 0){continue;}
 26e:	31 91       	ld	r19, Z+
 270:	33 23       	and	r19, r19
 272:	41 f1       	breq	.+80     	; 0x2c4 <pulseColumn+0xcc>
		//check red green blue
		else if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
 274:	30 ff       	sbrs	r19, 0
 276:	0c c0       	rjmp	.+24     	; 0x290 <pulseColumn+0x98>
 278:	d7 01       	movw	r26, r14
 27a:	08 2e       	mov	r0, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <pulseColumn+0x8a>
 27e:	aa 0f       	add	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <pulseColumn+0x86>
 286:	a0 95       	com	r26
 288:	b0 95       	com	r27
 28a:	6a 23       	and	r22, r26
 28c:	7b 23       	and	r23, r27
 28e:	1a c0       	rjmp	.+52     	; 0x2c4 <pulseColumn+0xcc>
			//set lower byte of reg2 for red
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i);}
 290:	32 ff       	sbrs	r19, 2
 292:	0c c0       	rjmp	.+24     	; 0x2ac <pulseColumn+0xb4>
 294:	97 01       	movw	r18, r14
 296:	08 2e       	mov	r0, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <pulseColumn+0xa6>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <pulseColumn+0xa2>
 2a2:	20 95       	com	r18
 2a4:	30 95       	com	r19
 2a6:	02 23       	and	r16, r18
 2a8:	13 23       	and	r17, r19
 2aa:	0c c0       	rjmp	.+24     	; 0x2c4 <pulseColumn+0xcc>
			//set register4 lower byte for green
		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 2ac:	31 ff       	sbrs	r19, 1
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <pulseColumn+0xcc>
 2b0:	97 01       	movw	r18, r14
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <pulseColumn+0xc0>
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	aa 95       	dec	r26
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <pulseColumn+0xbc>
 2bc:	20 95       	com	r18
 2be:	30 95       	com	r19
 2c0:	62 23       	and	r22, r18
 2c2:	73 23       	and	r23, r19
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	91 05       	cpc	r25, r1
 2ca:	79 f6       	brne	.-98     	; 0x26a <pulseColumn+0x72>
			//set register2 upper byte for blue.
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
 2cc:	98 01       	movw	r18, r16
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	33 df       	rcall	.-410    	; 0x13a <writetoAll16BitShiftRegisters>
		
	
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <TimerOn>:
	Joystick_Process_Raw(nextJoystickFramePtr);	
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
	nextJoystickFramePtr = temp;
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2e8:	8d e7       	ldi	r24, 0x7D	; 125
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 302:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 306:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 30a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 30e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 312:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 316:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 31a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 31e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 322:	8f b7       	in	r24, 0x3f	; 63
 324:	80 68       	ori	r24, 0x80	; 128
 326:	8f bf       	out	0x3f, r24	; 63
 328:	08 95       	ret

0000032a <__vector_13>:
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 340:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 344:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 348:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	a1 09       	sbc	r26, r1
 350:	b1 09       	sbc	r27, r1
 352:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 356:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 35a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 35e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 362:	89 2b       	or	r24, r25
 364:	8a 2b       	or	r24, r26
 366:	8b 2b       	or	r24, r27
 368:	99 f4       	brne	.+38     	; 0x390 <__vector_13+0x66>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 370:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 374:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 378:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 37c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 380:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 384:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 388:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 38c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <TimerSet>:
 3a2:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 3a6:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 3aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 3ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 3b2:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 3b6:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 3ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 3be:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 3c2:	08 95       	ret

000003c4 <main>:
}

int main(void)
{
	DDRA = 0x00;
 3c4:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 3ca:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 3cc:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 3ce:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 3d0:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 3d2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 3d4:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 3d6:	ab de       	rcall	.-682    	; 0x12e <ADC_init>
	LCD_init();
 3d8:	9b de       	rcall	.-714    	; 0x110 <LCD_init>
 3da:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9b d0       	rcall	.+310    	; 0x516 <malloc>
 3e0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <currentJoystickFramePtr+0x1>
 3e4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <currentJoystickFramePtr>
 3e8:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	94 d0       	rcall	.+296    	; 0x516 <malloc>
 3ee:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 3f2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 3f6:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	8d d0       	rcall	.+282    	; 0x516 <malloc>
 3fc:	d8 2f       	mov	r29, r24
 3fe:	c9 2f       	mov	r28, r25
 400:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_RGB_FramePtr>
 404:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <current_RGB_FramePtr+0x1>
 408:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	84 d0       	rcall	.+264    	; 0x516 <malloc>
 40e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <next_RGB_FramePtr+0x1>
 412:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <next_RGB_FramePtr>
 416:	2d 2f       	mov	r18, r29
 418:	3c 2f       	mov	r19, r28
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
		for(int j = 0; j < 16; j++){
			if((i + j) % 2 == 0){
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);	
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_RED_BIT);	
 422:	11 c0       	rjmp	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i + j) % 2 == 0){
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);	
 424:	40 fd       	sbrc	r20, 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i + j) % 2 == 0){
 428:	60 83       	st	Z, r22
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);	
 42c:	70 83       	st	Z, r23
 42e:	4f 5f       	subi	r20, 0xFF	; 255
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_RED_BIT);	
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	31 96       	adiw	r30, 0x01	; 1
 434:	4a 17       	cp	r20, r26
 436:	5b 07       	cpc	r21, r27
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
 438:	a9 f7       	brne	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	20 5f       	subi	r18, 0xF0	; 240
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	91 05       	cpc	r25, r1
 444:	29 f0       	breq	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 446:	ac 01       	movw	r20, r24
 448:	dc 01       	movw	r26, r24
 44a:	50 96       	adiw	r26, 0x10	; 16
 44c:	f9 01       	movw	r30, r18
 44e:	ea cf       	rjmp	.-44     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	currentJoystickFramePtr = nextJoystickFramePtr;
	nextJoystickFramePtr = temp;
}

int main(void)
{
 450:	61 e0       	ldi	r22, 0x01	; 1
// 			Effects[i]->pitches_ptr[j] = i*150.0; 
// 		}
// 	}
	
	//timing
	TimerSet(1);
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	a4 df       	rcall	.-184    	; 0x3a2 <TimerSet>
 45a:	43 df       	rcall	.-378    	; 0x2e2 <TimerOn>
 45c:	20 e0       	ldi	r18, 0x00	; 0
	unsigned int cnt = 0;
	TimerOn();
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	00 e0       	ldi	r16, 0x00	; 0
// 		}
// 	}
	
	//timing
	TimerSet(1);
	unsigned int cnt = 0;
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	28 30       	cpi	r18, 0x08	; 8
	//	Joystick_Tick();
	//	testDisplayJoystickADC(); //Working and not needed
		//Gamestate_Tick(); //TODO
		
		//SoundEffect_Tick();
		if(cnt == 8){pulseColumn(0, *current_RGB_FramePtr);cnt = 0;}
 466:	31 05       	cpc	r19, r1
 468:	19 f5       	brne	.+70     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 46a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <current_RGB_FramePtr>
 46e:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <current_RGB_FramePtr+0x1>
 472:	8d b7       	in	r24, 0x3d	; 61
 474:	9e b7       	in	r25, 0x3e	; 62
 476:	80 58       	subi	r24, 0x80	; 128
 478:	91 09       	sbc	r25, r1
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	9e bf       	out	0x3e, r25	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	8d bf       	out	0x3d, r24	; 61
 484:	ad b7       	in	r26, 0x3d	; 61
 486:	be b7       	in	r27, 0x3e	; 62
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	01 90       	ld	r0, Z+
 48e:	0d 92       	st	X+, r0
 490:	8a 95       	dec	r24
 492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	b0 de       	rcall	.-672    	; 0x1f8 <pulseColumn>
 498:	8d b7       	in	r24, 0x3d	; 61
 49a:	9e b7       	in	r25, 0x3e	; 62
 49c:	80 58       	subi	r24, 0x80	; 128
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	9e bf       	out	0x3e, r25	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	8d bf       	out	0x3d, r24	; 61
 4aa:	20 2f       	mov	r18, r16
 4ac:	31 2f       	mov	r19, r17
 4ae:	23 c0       	rjmp	.+70     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4b0:	e9 01       	movw	r28, r18
 4b2:	21 96       	adiw	r28, 0x01	; 1
 4b4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <current_RGB_FramePtr>
		else{pulseColumn(cnt++, *current_RGB_FramePtr);}
 4b8:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <current_RGB_FramePtr+0x1>
 4bc:	8d b7       	in	r24, 0x3d	; 61
 4be:	9e b7       	in	r25, 0x3e	; 62
 4c0:	80 58       	subi	r24, 0x80	; 128
 4c2:	91 09       	sbc	r25, r1
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	9e bf       	out	0x3e, r25	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	8d bf       	out	0x3d, r24	; 61
 4ce:	ad b7       	in	r26, 0x3d	; 61
 4d0:	be b7       	in	r27, 0x3e	; 62
 4d2:	11 96       	adiw	r26, 0x01	; 1
 4d4:	80 e8       	ldi	r24, 0x80	; 128
 4d6:	01 90       	ld	r0, Z+
 4d8:	0d 92       	st	X+, r0
 4da:	8a 95       	dec	r24
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4de:	82 2f       	mov	r24, r18
 4e0:	8b de       	rcall	.-746    	; 0x1f8 <pulseColumn>
 4e2:	8d b7       	in	r24, 0x3d	; 61
 4e4:	9e b7       	in	r25, 0x3e	; 62
 4e6:	80 58       	subi	r24, 0x80	; 128
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	9e bf       	out	0x3e, r25	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	8d bf       	out	0x3d, r24	; 61
 4f4:	9e 01       	movw	r18, r28
 4f6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <TimerFlag>
 4fa:	99 23       	and	r25, r25
		
		while(!TimerFlag);
 4fc:	e1 f3       	breq	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 502:	b0 cf       	rjmp	.-160    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

00000504 <__tablejump2__>:
		TimerFlag = 0;
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
    }
 508:	00 24       	eor	r0, r0
 50a:	00 1c       	adc	r0, r0
 50c:	0b be       	out	0x3b, r0	; 59
 50e:	07 90       	elpm	r0, Z+
 510:	f6 91       	elpm	r31, Z
 512:	e0 2d       	mov	r30, r0
 514:	09 94       	ijmp

00000516 <malloc>:
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	10 f4       	brcc	.+4      	; 0x528 <malloc+0x12>
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__flp>
 52c:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <__flp+0x1>
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	a0 e0       	ldi	r26, 0x00	; 0
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	30 97       	sbiw	r30, 0x00	; 0
 53a:	19 f1       	breq	.+70     	; 0x582 <malloc+0x6c>
 53c:	40 81       	ld	r20, Z
 53e:	51 81       	ldd	r21, Z+1	; 0x01
 540:	02 81       	ldd	r16, Z+2	; 0x02
 542:	13 81       	ldd	r17, Z+3	; 0x03
 544:	48 17       	cp	r20, r24
 546:	59 07       	cpc	r21, r25
 548:	c8 f0       	brcs	.+50     	; 0x57c <malloc+0x66>
 54a:	84 17       	cp	r24, r20
 54c:	95 07       	cpc	r25, r21
 54e:	69 f4       	brne	.+26     	; 0x56a <malloc+0x54>
 550:	10 97       	sbiw	r26, 0x00	; 0
 552:	31 f0       	breq	.+12     	; 0x560 <malloc+0x4a>
 554:	12 96       	adiw	r26, 0x02	; 2
 556:	0c 93       	st	X, r16
 558:	12 97       	sbiw	r26, 0x02	; 2
 55a:	13 96       	adiw	r26, 0x03	; 3
 55c:	1c 93       	st	X, r17
 55e:	27 c0       	rjmp	.+78     	; 0x5ae <malloc+0x98>
 560:	00 93 46 01 	sts	0x0146, r16	; 0x800146 <__flp>
 564:	10 93 47 01 	sts	0x0147, r17	; 0x800147 <__flp+0x1>
 568:	22 c0       	rjmp	.+68     	; 0x5ae <malloc+0x98>
 56a:	21 15       	cp	r18, r1
 56c:	31 05       	cpc	r19, r1
 56e:	19 f0       	breq	.+6      	; 0x576 <malloc+0x60>
 570:	42 17       	cp	r20, r18
 572:	53 07       	cpc	r21, r19
 574:	18 f4       	brcc	.+6      	; 0x57c <malloc+0x66>
 576:	9a 01       	movw	r18, r20
 578:	bd 01       	movw	r22, r26
 57a:	ef 01       	movw	r28, r30
 57c:	df 01       	movw	r26, r30
 57e:	f8 01       	movw	r30, r16
 580:	db cf       	rjmp	.-74     	; 0x538 <malloc+0x22>
 582:	21 15       	cp	r18, r1
 584:	31 05       	cpc	r19, r1
 586:	f9 f0       	breq	.+62     	; 0x5c6 <malloc+0xb0>
 588:	28 1b       	sub	r18, r24
 58a:	39 0b       	sbc	r19, r25
 58c:	24 30       	cpi	r18, 0x04	; 4
 58e:	31 05       	cpc	r19, r1
 590:	80 f4       	brcc	.+32     	; 0x5b2 <malloc+0x9c>
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	9b 81       	ldd	r25, Y+3	; 0x03
 596:	61 15       	cp	r22, r1
 598:	71 05       	cpc	r23, r1
 59a:	21 f0       	breq	.+8      	; 0x5a4 <malloc+0x8e>
 59c:	fb 01       	movw	r30, r22
 59e:	93 83       	std	Z+3, r25	; 0x03
 5a0:	82 83       	std	Z+2, r24	; 0x02
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <malloc+0x96>
 5a4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__flp+0x1>
 5a8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__flp>
 5ac:	fe 01       	movw	r30, r28
 5ae:	32 96       	adiw	r30, 0x02	; 2
 5b0:	44 c0       	rjmp	.+136    	; 0x63a <malloc+0x124>
 5b2:	fe 01       	movw	r30, r28
 5b4:	e2 0f       	add	r30, r18
 5b6:	f3 1f       	adc	r31, r19
 5b8:	81 93       	st	Z+, r24
 5ba:	91 93       	st	Z+, r25
 5bc:	22 50       	subi	r18, 0x02	; 2
 5be:	31 09       	sbc	r19, r1
 5c0:	39 83       	std	Y+1, r19	; 0x01
 5c2:	28 83       	st	Y, r18
 5c4:	3a c0       	rjmp	.+116    	; 0x63a <malloc+0x124>
 5c6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 5ca:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 5ce:	23 2b       	or	r18, r19
 5d0:	41 f4       	brne	.+16     	; 0x5e2 <malloc+0xcc>
 5d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5da:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__brkval+0x1>
 5de:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__brkval>
 5e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	41 f4       	brne	.+16     	; 0x600 <malloc+0xea>
 5f0:	2d b7       	in	r18, 0x3d	; 61
 5f2:	3e b7       	in	r19, 0x3e	; 62
 5f4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5f8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5fc:	24 1b       	sub	r18, r20
 5fe:	35 0b       	sbc	r19, r21
 600:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__brkval>
 604:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__brkval+0x1>
 608:	e2 17       	cp	r30, r18
 60a:	f3 07       	cpc	r31, r19
 60c:	a0 f4       	brcc	.+40     	; 0x636 <malloc+0x120>
 60e:	2e 1b       	sub	r18, r30
 610:	3f 0b       	sbc	r19, r31
 612:	28 17       	cp	r18, r24
 614:	39 07       	cpc	r19, r25
 616:	78 f0       	brcs	.+30     	; 0x636 <malloc+0x120>
 618:	ac 01       	movw	r20, r24
 61a:	4e 5f       	subi	r20, 0xFE	; 254
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	24 17       	cp	r18, r20
 620:	35 07       	cpc	r19, r21
 622:	48 f0       	brcs	.+18     	; 0x636 <malloc+0x120>
 624:	4e 0f       	add	r20, r30
 626:	5f 1f       	adc	r21, r31
 628:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__brkval+0x1>
 62c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__brkval>
 630:	81 93       	st	Z+, r24
 632:	91 93       	st	Z+, r25
 634:	02 c0       	rjmp	.+4      	; 0x63a <malloc+0x124>
 636:	e0 e0       	ldi	r30, 0x00	; 0
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	cf 01       	movw	r24, r30
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <free>:
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	09 f4       	brne	.+2      	; 0x650 <free+0xa>
 64e:	81 c0       	rjmp	.+258    	; 0x752 <free+0x10c>
 650:	fc 01       	movw	r30, r24
 652:	32 97       	sbiw	r30, 0x02	; 2
 654:	13 82       	std	Z+3, r1	; 0x03
 656:	12 82       	std	Z+2, r1	; 0x02
 658:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__flp>
 65c:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__flp+0x1>
 660:	10 97       	sbiw	r26, 0x00	; 0
 662:	81 f4       	brne	.+32     	; 0x684 <free+0x3e>
 664:	20 81       	ld	r18, Z
 666:	31 81       	ldd	r19, Z+1	; 0x01
 668:	82 0f       	add	r24, r18
 66a:	93 1f       	adc	r25, r19
 66c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 670:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 674:	28 17       	cp	r18, r24
 676:	39 07       	cpc	r19, r25
 678:	51 f5       	brne	.+84     	; 0x6ce <free+0x88>
 67a:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <__brkval+0x1>
 67e:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <__brkval>
 682:	67 c0       	rjmp	.+206    	; 0x752 <free+0x10c>
 684:	ed 01       	movw	r28, r26
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	ce 17       	cp	r28, r30
 68c:	df 07       	cpc	r29, r31
 68e:	40 f4       	brcc	.+16     	; 0x6a0 <free+0x5a>
 690:	4a 81       	ldd	r20, Y+2	; 0x02
 692:	5b 81       	ldd	r21, Y+3	; 0x03
 694:	9e 01       	movw	r18, r28
 696:	41 15       	cp	r20, r1
 698:	51 05       	cpc	r21, r1
 69a:	f1 f0       	breq	.+60     	; 0x6d8 <free+0x92>
 69c:	ea 01       	movw	r28, r20
 69e:	f5 cf       	rjmp	.-22     	; 0x68a <free+0x44>
 6a0:	d3 83       	std	Z+3, r29	; 0x03
 6a2:	c2 83       	std	Z+2, r28	; 0x02
 6a4:	40 81       	ld	r20, Z
 6a6:	51 81       	ldd	r21, Z+1	; 0x01
 6a8:	84 0f       	add	r24, r20
 6aa:	95 1f       	adc	r25, r21
 6ac:	c8 17       	cp	r28, r24
 6ae:	d9 07       	cpc	r29, r25
 6b0:	59 f4       	brne	.+22     	; 0x6c8 <free+0x82>
 6b2:	88 81       	ld	r24, Y
 6b4:	99 81       	ldd	r25, Y+1	; 0x01
 6b6:	84 0f       	add	r24, r20
 6b8:	95 1f       	adc	r25, r21
 6ba:	02 96       	adiw	r24, 0x02	; 2
 6bc:	91 83       	std	Z+1, r25	; 0x01
 6be:	80 83       	st	Z, r24
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	9b 81       	ldd	r25, Y+3	; 0x03
 6c4:	93 83       	std	Z+3, r25	; 0x03
 6c6:	82 83       	std	Z+2, r24	; 0x02
 6c8:	21 15       	cp	r18, r1
 6ca:	31 05       	cpc	r19, r1
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <free+0x92>
 6ce:	f0 93 47 01 	sts	0x0147, r31	; 0x800147 <__flp+0x1>
 6d2:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <__flp>
 6d6:	3d c0       	rjmp	.+122    	; 0x752 <free+0x10c>
 6d8:	e9 01       	movw	r28, r18
 6da:	fb 83       	std	Y+3, r31	; 0x03
 6dc:	ea 83       	std	Y+2, r30	; 0x02
 6de:	49 91       	ld	r20, Y+
 6e0:	59 91       	ld	r21, Y+
 6e2:	c4 0f       	add	r28, r20
 6e4:	d5 1f       	adc	r29, r21
 6e6:	ec 17       	cp	r30, r28
 6e8:	fd 07       	cpc	r31, r29
 6ea:	61 f4       	brne	.+24     	; 0x704 <free+0xbe>
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	84 0f       	add	r24, r20
 6f2:	95 1f       	adc	r25, r21
 6f4:	02 96       	adiw	r24, 0x02	; 2
 6f6:	e9 01       	movw	r28, r18
 6f8:	99 83       	std	Y+1, r25	; 0x01
 6fa:	88 83       	st	Y, r24
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	9b 83       	std	Y+3, r25	; 0x03
 702:	8a 83       	std	Y+2, r24	; 0x02
 704:	e0 e0       	ldi	r30, 0x00	; 0
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	12 96       	adiw	r26, 0x02	; 2
 70a:	8d 91       	ld	r24, X+
 70c:	9c 91       	ld	r25, X
 70e:	13 97       	sbiw	r26, 0x03	; 3
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	19 f0       	breq	.+6      	; 0x71a <free+0xd4>
 714:	fd 01       	movw	r30, r26
 716:	dc 01       	movw	r26, r24
 718:	f7 cf       	rjmp	.-18     	; 0x708 <free+0xc2>
 71a:	8d 91       	ld	r24, X+
 71c:	9c 91       	ld	r25, X
 71e:	11 97       	sbiw	r26, 0x01	; 1
 720:	9d 01       	movw	r18, r26
 722:	2e 5f       	subi	r18, 0xFE	; 254
 724:	3f 4f       	sbci	r19, 0xFF	; 255
 726:	82 0f       	add	r24, r18
 728:	93 1f       	adc	r25, r19
 72a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 72e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 732:	28 17       	cp	r18, r24
 734:	39 07       	cpc	r19, r25
 736:	69 f4       	brne	.+26     	; 0x752 <free+0x10c>
 738:	30 97       	sbiw	r30, 0x00	; 0
 73a:	29 f4       	brne	.+10     	; 0x746 <free+0x100>
 73c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__flp+0x1>
 740:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__flp>
 744:	02 c0       	rjmp	.+4      	; 0x74a <free+0x104>
 746:	13 82       	std	Z+3, r1	; 0x03
 748:	12 82       	std	Z+2, r1	; 0x02
 74a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__brkval+0x1>
 74e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__brkval>
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <_exit>:
 758:	f8 94       	cli

0000075a <__stop_program>:
 75a:	ff cf       	rjmp	.-2      	; 0x75a <__stop_program>
