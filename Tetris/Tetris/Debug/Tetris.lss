
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007ee  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  0080010a  0080010a  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e4  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8e  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088a  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000547  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f3 c0       	rjmp	.+486    	; 0x21c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	14 d1       	rcall	.+552    	; 0x2ec <main>
  c4:	92 c3       	rjmp	.+1828   	; 0x7ea <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <ADC_init>:
   asm("nop");
  }
}

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <ADC_channel>:
}

void ADC_channel(unsigned char channel){
	if(channel < 8 && channel >= 0){
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	48 f4       	brcc	.+18     	; 0x140 <ADC_channel+0x16>
		//CLEAR ADMUX2:0
		ADMUX &= 0xF8;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	90 83       	st	Z, r25
		//Set ADMUX
		ADMUX |= (channel & 0x07);
 138:	90 81       	ld	r25, Z
 13a:	87 70       	andi	r24, 0x07	; 7
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <ADC_read>:
	}
}

unsigned short ADC_read(unsigned char channel){
		unsigned short myADC = 0x0000;
		ADC_channel(channel);
 142:	f3 df       	rcall	.-26     	; 0x12a <ADC_channel>
		ADCSRA |= (1 << ADSC);
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
		while(ADCSRA & (1 << ADSC));
 14e:	80 81       	ld	r24, Z
 150:	86 fd       	sbrc	r24, 6
 152:	fd cf       	rjmp	.-6      	; 0x14e <ADC_read+0xc>
		myADC = ADC;
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		return myADC;
} 
 15c:	08 95       	ret

0000015e <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
 15e:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
 160:	80 81       	ld	r24, Z
 162:	91 81       	ldd	r25, Z+1	; 0x01
 164:	84 36       	cpi	r24, 0x64	; 100
 166:	91 05       	cpc	r25, r1
 168:	18 f4       	brcc	.+6      	; 0x170 <Joystick_Process_Raw+0x12>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 83       	std	Z+5, r24	; 0x05
 16e:	07 c0       	rjmp	.+14     	; 0x17e <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
 170:	89 3e       	cpi	r24, 0xE9	; 233
 172:	93 40       	sbci	r25, 0x03	; 3
 174:	18 f0       	brcs	.+6      	; 0x17c <Joystick_Process_Raw+0x1e>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	85 83       	std	Z+5, r24	; 0x05
 17a:	01 c0       	rjmp	.+2      	; 0x17e <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
 17c:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	93 81       	ldd	r25, Z+3	; 0x03
 182:	84 36       	cpi	r24, 0x64	; 100
 184:	91 05       	cpc	r25, r1
 186:	18 f4       	brcc	.+6      	; 0x18e <Joystick_Process_Raw+0x30>
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	86 83       	std	Z+6, r24	; 0x06
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
 18e:	89 3e       	cpi	r24, 0xE9	; 233
 190:	93 40       	sbci	r25, 0x03	; 3
 192:	18 f0       	brcs	.+6      	; 0x19a <Joystick_Process_Raw+0x3c>
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	86 83       	std	Z+6, r24	; 0x06
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
 19a:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
 19c:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
 1a2:	85 81       	ldd	r24, Z+5	; 0x05
 1a4:	81 11       	cpse	r24, r1
 1a6:	fb cf       	rjmp	.-10     	; 0x19e <Joystick_Process_Raw+0x40>
 1a8:	08 95       	ret

000001aa <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	c7 df       	rcall	.-114    	; 0x142 <ADC_read>
 1b4:	99 83       	std	Y+1, r25	; 0x01
 1b6:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	c3 df       	rcall	.-122    	; 0x142 <ADC_read>
 1bc:	9b 83       	std	Y+3, r25	; 0x03
 1be:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
 1c0:	80 b1       	in	r24, 0x00	; 0
 1c2:	83 fb       	bst	r24, 3
 1c4:	99 27       	eor	r25, r25
 1c6:	90 f9       	bld	r25, 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	89 27       	eor	r24, r25
 1cc:	8c 83       	std	Y+4, r24	; 0x04
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1da:	8d e7       	ldi	r24, 0x7D	; 125
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1f8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1fc:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 200:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 204:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 208:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 20c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 210:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 214:	8f b7       	in	r24, 0x3f	; 63
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8f bf       	out	0x3f, r24	; 63
 21a:	08 95       	ret

0000021c <__vector_13>:
}


//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 232:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 236:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 23a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	a1 09       	sbc	r26, r1
 242:	b1 09       	sbc	r27, r1
 244:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 248:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 24c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 250:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	if(_avr_timer_cntcurr == 0){
 254:	89 2b       	or	r24, r25
 256:	8a 2b       	or	r24, r26
 258:	8b 2b       	or	r24, r27
 25a:	99 f4       	brne	.+38     	; 0x282 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 262:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 266:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 26a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 26e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 272:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 276:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 27a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 27e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}
}
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 294:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 298:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 29c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 2a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 2a4:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 2a8:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 2ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 2b0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 2b4:	08 95       	ret

000002b6 <Joystick_Tick>:
}

void Joystick_Tick(){
	//READ + POPULATE always into the next frame before swapping buffer
	Joystick_Read(nextJoystickFramePtr);	
 2b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2ba:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2be:	75 df       	rcall	.-278    	; 0x1aa <Joystick_Read>
	Joystick_Process_Raw(nextJoystickFramePtr);	
 2c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2c4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2c8:	4a df       	rcall	.-364    	; 0x15e <Joystick_Process_Raw>
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
 2ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <currentJoystickFramePtr>
 2ce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
 2d2:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2d6:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2da:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <currentJoystickFramePtr+0x1>
 2de:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <currentJoystickFramePtr>
	nextJoystickFramePtr = temp;
 2e2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 2e6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 2ea:	08 95       	ret

000002ec <main>:
}

int main(void)
{
	DDRA = 0x00;
 2ec:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 2f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 2f4:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 2f6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 2f8:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 2fa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 2fc:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 2fe:	0f df       	rcall	.-482    	; 0x11e <ADC_init>
	LCD_init();
 300:	ff de       	rcall	.-514    	; 0x100 <LCD_init>
 302:	87 e0       	ldi	r24, 0x07	; 7
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	50 d1       	rcall	.+672    	; 0x5a8 <malloc>
 308:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <currentJoystickFramePtr+0x1>
 30c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <currentJoystickFramePtr>
 310:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	49 d1       	rcall	.+658    	; 0x5a8 <malloc>
 316:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 31a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 31e:	0f 2e       	mov	r0, r31
 320:	f4 e3       	ldi	r31, 0x34	; 52
 322:	ef 2e       	mov	r14, r31
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	ff 2e       	mov	r15, r31
 328:	f0 2d       	mov	r31, r0
 32a:	00 e0       	ldi	r16, 0x00	; 0
 32c:	10 e0       	ldi	r17, 0x00	; 0
	
	//sound effects
	for(int i = 0; i < 6; i++){
 32e:	0f 2e       	mov	r0, r31
 330:	fa e0       	ldi	r31, 0x0A	; 10
		//initialize array of SoundEffects
		Effects[i] = (SoundEffect*) malloc(sizeof(SoundEffect));	
		Effects[i]->length = 10;
 332:	cf 2e       	mov	r12, r31
 334:	d1 2c       	mov	r13, r1
 336:	f0 2d       	mov	r31, r0
 338:	84 e0       	ldi	r24, 0x04	; 4
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
	
	//sound effects
	for(int i = 0; i < 6; i++){
		//initialize array of SoundEffects
		Effects[i] = (SoundEffect*) malloc(sizeof(SoundEffect));	
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	35 d1       	rcall	.+618    	; 0x5a8 <malloc>
 33e:	ec 01       	movw	r28, r24
 340:	57 01       	movw	r10, r14
 342:	f7 01       	movw	r30, r14
 344:	91 83       	std	Z+1, r25	; 0x01
 346:	80 83       	st	Z, r24
 348:	d9 82       	std	Y+1, r13	; 0x01
		Effects[i]->length = 10;
 34a:	c8 82       	st	Y, r12
 34c:	88 e2       	ldi	r24, 0x28	; 40
		//Initialize each of their pitch arrays
		Effects[i]->pitches_ptr = (double*) malloc(Effects[i]->length * sizeof(double));
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2b d1       	rcall	.+598    	; 0x5a8 <malloc>
 352:	9b 83       	std	Y+3, r25	; 0x03
 354:	8a 83       	std	Y+2, r24	; 0x02
 356:	b8 01       	movw	r22, r16
		for(int j = 0; j < Effects[i]->length; j++){
			Effects[i]->pitches_ptr[j] = i*150.0; 
 358:	01 2e       	mov	r0, r17
 35a:	00 0c       	add	r0, r0
 35c:	88 0b       	sbc	r24, r24
 35e:	99 0b       	sbc	r25, r25
 360:	34 d0       	rcall	.+104    	; 0x3ca <__floatsisf>
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	46 e1       	ldi	r20, 0x16	; 22
 368:	53 e4       	ldi	r21, 0x43	; 67
 36a:	bb d0       	rcall	.+374    	; 0x4e2 <__mulsf3>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	a0 e0       	ldi	r26, 0x00	; 0
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	ea 81       	ldd	r30, Y+2	; 0x02
 376:	fb 81       	ldd	r31, Y+3	; 0x03
 378:	e2 0f       	add	r30, r18
 37a:	f3 1f       	adc	r31, r19
 37c:	60 83       	st	Z, r22
 37e:	71 83       	std	Z+1, r23	; 0x01
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	93 83       	std	Z+3, r25	; 0x03
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	f5 01       	movw	r30, r10
		//initialize array of SoundEffects
		Effects[i] = (SoundEffect*) malloc(sizeof(SoundEffect));	
		Effects[i]->length = 10;
		//Initialize each of their pitch arrays
		Effects[i]->pitches_ptr = (double*) malloc(Effects[i]->length * sizeof(double));
		for(int j = 0; j < Effects[i]->length; j++){
 388:	c0 81       	ld	r28, Z
 38a:	d1 81       	ldd	r29, Z+1	; 0x01
 38c:	2c 5f       	subi	r18, 0xFC	; 252
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	48 81       	ld	r20, Y
 392:	59 81       	ldd	r21, Y+1	; 0x01
 394:	a4 17       	cp	r26, r20
 396:	b5 07       	cpc	r27, r21
 398:	6c f3       	brlt	.-38     	; 0x374 <main+0x88>
 39a:	0f 5f       	subi	r16, 0xFF	; 255
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
	LCD_init();
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
	
	//sound effects
	for(int i = 0; i < 6; i++){
 39e:	f2 e0       	ldi	r31, 0x02	; 2
 3a0:	ef 0e       	add	r14, r31
 3a2:	f1 1c       	adc	r15, r1
 3a4:	06 30       	cpi	r16, 0x06	; 6
 3a6:	11 05       	cpc	r17, r1
 3a8:	39 f6       	brne	.-114    	; 0x338 <main+0x4c>
			Effects[i]->pitches_ptr[j] = i*150.0; 
		}
	}
	
	//timing
	TimerSet(100);
 3aa:	64 e6       	ldi	r22, 0x64	; 100
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	70 df       	rcall	.-288    	; 0x294 <TimerSet>
 3b4:	0f df       	rcall	.-482    	; 0x1d4 <TimerOn>
	TimerOn();
 3b6:	7f df       	rcall	.-258    	; 0x2b6 <Joystick_Tick>
 3b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
    while (1){
		Joystick_Tick();
 3bc:	88 23       	and	r24, r24
		//testDisplayJoystickADC(); //Working and not needed
		//Gamestate_Tick(); //TODO
		//
		//SoundEffect_Tick();
		while(!TimerFlag);
 3be:	e1 f3       	breq	.-8      	; 0x3b8 <main+0xcc>
 3c0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 3c4:	f8 cf       	rjmp	.-16     	; 0x3b6 <main+0xca>

000003c6 <__floatunsisf>:
		TimerFlag = 0;
 3c6:	e8 94       	clt
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <__floatsisf+0x12>

000003ca <__floatsisf>:
    }
 3ca:	97 fb       	bst	r25, 7
 3cc:	3e f4       	brtc	.+14     	; 0x3dc <__floatsisf+0x12>
 3ce:	90 95       	com	r25
 3d0:	80 95       	com	r24
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	99 23       	and	r25, r25
 3de:	a9 f0       	breq	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e0:	f9 2f       	mov	r31, r25
 3e2:	96 e9       	ldi	r25, 0x96	; 150
 3e4:	bb 27       	eor	r27, r27
 3e6:	93 95       	inc	r25
 3e8:	f6 95       	lsr	r31
 3ea:	87 95       	ror	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f1 11       	cpse	r31, r1
 3f4:	f8 cf       	rjmp	.-16     	; 0x3e6 <__floatsisf+0x1c>
 3f6:	fa f4       	brpl	.+62     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3f8:	bb 0f       	add	r27, r27
 3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	60 ff       	sbrs	r22, 0
 3fe:	1b c0       	rjmp	.+54     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 400:	6f 5f       	subi	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	16 c0       	rjmp	.+44     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 40a:	88 23       	and	r24, r24
 40c:	11 f0       	breq	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	96 e9       	ldi	r25, 0x96	; 150
 410:	11 c0       	rjmp	.+34     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 412:	77 23       	and	r23, r23
 414:	21 f0       	breq	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	9e e8       	ldi	r25, 0x8E	; 142
 418:	87 2f       	mov	r24, r23
 41a:	76 2f       	mov	r23, r22
 41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	66 23       	and	r22, r22
 420:	71 f0       	breq	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 422:	96 e8       	ldi	r25, 0x86	; 134
 424:	86 2f       	mov	r24, r22
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	2a f0       	brmi	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	9a 95       	dec	r25
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	da f7       	brpl	.-10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 436:	88 0f       	add	r24, r24
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret

00000440 <__fp_inf>:
 440:	97 f9       	bld	r25, 7
 442:	9f 67       	ori	r25, 0x7F	; 127
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	08 95       	ret

0000044c <__fp_nan>:
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	80 ec       	ldi	r24, 0xC0	; 192
 450:	08 95       	ret

00000452 <__fp_pscA>:
 452:	00 24       	eor	r0, r0
 454:	0a 94       	dec	r0
 456:	16 16       	cp	r1, r22
 458:	17 06       	cpc	r1, r23
 45a:	18 06       	cpc	r1, r24
 45c:	09 06       	cpc	r0, r25
 45e:	08 95       	ret

00000460 <__fp_pscB>:
 460:	00 24       	eor	r0, r0
 462:	0a 94       	dec	r0
 464:	12 16       	cp	r1, r18
 466:	13 06       	cpc	r1, r19
 468:	14 06       	cpc	r1, r20
 46a:	05 06       	cpc	r0, r21
 46c:	08 95       	ret

0000046e <__fp_round>:
 46e:	09 2e       	mov	r0, r25
 470:	03 94       	inc	r0
 472:	00 0c       	add	r0, r0
 474:	11 f4       	brne	.+4      	; 0x47a <__fp_round+0xc>
 476:	88 23       	and	r24, r24
 478:	52 f0       	brmi	.+20     	; 0x48e <__fp_round+0x20>
 47a:	bb 0f       	add	r27, r27
 47c:	40 f4       	brcc	.+16     	; 0x48e <__fp_round+0x20>
 47e:	bf 2b       	or	r27, r31
 480:	11 f4       	brne	.+4      	; 0x486 <__fp_round+0x18>
 482:	60 ff       	sbrs	r22, 0
 484:	04 c0       	rjmp	.+8      	; 0x48e <__fp_round+0x20>
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <__fp_split3>:
 490:	57 fd       	sbrc	r21, 7
 492:	90 58       	subi	r25, 0x80	; 128
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	59 f0       	breq	.+22     	; 0x4b0 <__fp_splitA+0x10>
 49a:	5f 3f       	cpi	r21, 0xFF	; 255
 49c:	71 f0       	breq	.+28     	; 0x4ba <__fp_splitA+0x1a>
 49e:	47 95       	ror	r20

000004a0 <__fp_splitA>:
 4a0:	88 0f       	add	r24, r24
 4a2:	97 fb       	bst	r25, 7
 4a4:	99 1f       	adc	r25, r25
 4a6:	61 f0       	breq	.+24     	; 0x4c0 <__fp_splitA+0x20>
 4a8:	9f 3f       	cpi	r25, 0xFF	; 255
 4aa:	79 f0       	breq	.+30     	; 0x4ca <__fp_splitA+0x2a>
 4ac:	87 95       	ror	r24
 4ae:	08 95       	ret
 4b0:	12 16       	cp	r1, r18
 4b2:	13 06       	cpc	r1, r19
 4b4:	14 06       	cpc	r1, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	f2 cf       	rjmp	.-28     	; 0x49e <__fp_split3+0xe>
 4ba:	46 95       	lsr	r20
 4bc:	f1 df       	rcall	.-30     	; 0x4a0 <__fp_splitA>
 4be:	08 c0       	rjmp	.+16     	; 0x4d0 <__fp_splitA+0x30>
 4c0:	16 16       	cp	r1, r22
 4c2:	17 06       	cpc	r1, r23
 4c4:	18 06       	cpc	r1, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	f1 cf       	rjmp	.-30     	; 0x4ac <__fp_splitA+0xc>
 4ca:	86 95       	lsr	r24
 4cc:	71 05       	cpc	r23, r1
 4ce:	61 05       	cpc	r22, r1
 4d0:	08 94       	sec
 4d2:	08 95       	ret

000004d4 <__fp_zero>:
 4d4:	e8 94       	clt

000004d6 <__fp_szero>:
 4d6:	bb 27       	eor	r27, r27
 4d8:	66 27       	eor	r22, r22
 4da:	77 27       	eor	r23, r23
 4dc:	cb 01       	movw	r24, r22
 4de:	97 f9       	bld	r25, 7
 4e0:	08 95       	ret

000004e2 <__mulsf3>:
 4e2:	0b d0       	rcall	.+22     	; 0x4fa <__mulsf3x>
 4e4:	c4 cf       	rjmp	.-120    	; 0x46e <__fp_round>
 4e6:	b5 df       	rcall	.-150    	; 0x452 <__fp_pscA>
 4e8:	28 f0       	brcs	.+10     	; 0x4f4 <__mulsf3+0x12>
 4ea:	ba df       	rcall	.-140    	; 0x460 <__fp_pscB>
 4ec:	18 f0       	brcs	.+6      	; 0x4f4 <__mulsf3+0x12>
 4ee:	95 23       	and	r25, r21
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__mulsf3+0x12>
 4f2:	a6 cf       	rjmp	.-180    	; 0x440 <__fp_inf>
 4f4:	ab cf       	rjmp	.-170    	; 0x44c <__fp_nan>
 4f6:	11 24       	eor	r1, r1
 4f8:	ee cf       	rjmp	.-36     	; 0x4d6 <__fp_szero>

000004fa <__mulsf3x>:
 4fa:	ca df       	rcall	.-108    	; 0x490 <__fp_split3>
 4fc:	a0 f3       	brcs	.-24     	; 0x4e6 <__mulsf3+0x4>

000004fe <__mulsf3_pse>:
 4fe:	95 9f       	mul	r25, r21
 500:	d1 f3       	breq	.-12     	; 0x4f6 <__mulsf3+0x14>
 502:	95 0f       	add	r25, r21
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	55 1f       	adc	r21, r21
 508:	62 9f       	mul	r22, r18
 50a:	f0 01       	movw	r30, r0
 50c:	72 9f       	mul	r23, r18
 50e:	bb 27       	eor	r27, r27
 510:	f0 0d       	add	r31, r0
 512:	b1 1d       	adc	r27, r1
 514:	63 9f       	mul	r22, r19
 516:	aa 27       	eor	r26, r26
 518:	f0 0d       	add	r31, r0
 51a:	b1 1d       	adc	r27, r1
 51c:	aa 1f       	adc	r26, r26
 51e:	64 9f       	mul	r22, r20
 520:	66 27       	eor	r22, r22
 522:	b0 0d       	add	r27, r0
 524:	a1 1d       	adc	r26, r1
 526:	66 1f       	adc	r22, r22
 528:	82 9f       	mul	r24, r18
 52a:	22 27       	eor	r18, r18
 52c:	b0 0d       	add	r27, r0
 52e:	a1 1d       	adc	r26, r1
 530:	62 1f       	adc	r22, r18
 532:	73 9f       	mul	r23, r19
 534:	b0 0d       	add	r27, r0
 536:	a1 1d       	adc	r26, r1
 538:	62 1f       	adc	r22, r18
 53a:	83 9f       	mul	r24, r19
 53c:	a0 0d       	add	r26, r0
 53e:	61 1d       	adc	r22, r1
 540:	22 1f       	adc	r18, r18
 542:	74 9f       	mul	r23, r20
 544:	33 27       	eor	r19, r19
 546:	a0 0d       	add	r26, r0
 548:	61 1d       	adc	r22, r1
 54a:	23 1f       	adc	r18, r19
 54c:	84 9f       	mul	r24, r20
 54e:	60 0d       	add	r22, r0
 550:	21 1d       	adc	r18, r1
 552:	82 2f       	mov	r24, r18
 554:	76 2f       	mov	r23, r22
 556:	6a 2f       	mov	r22, r26
 558:	11 24       	eor	r1, r1
 55a:	9f 57       	subi	r25, 0x7F	; 127
 55c:	50 40       	sbci	r21, 0x00	; 0
 55e:	8a f0       	brmi	.+34     	; 0x582 <__mulsf3_pse+0x84>
 560:	e1 f0       	breq	.+56     	; 0x59a <__mulsf3_pse+0x9c>
 562:	88 23       	and	r24, r24
 564:	4a f0       	brmi	.+18     	; 0x578 <__mulsf3_pse+0x7a>
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	bb 1f       	adc	r27, r27
 56c:	66 1f       	adc	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	91 50       	subi	r25, 0x01	; 1
 574:	50 40       	sbci	r21, 0x00	; 0
 576:	a9 f7       	brne	.-22     	; 0x562 <__mulsf3_pse+0x64>
 578:	9e 3f       	cpi	r25, 0xFE	; 254
 57a:	51 05       	cpc	r21, r1
 57c:	70 f0       	brcs	.+28     	; 0x59a <__mulsf3_pse+0x9c>
 57e:	60 cf       	rjmp	.-320    	; 0x440 <__fp_inf>
 580:	aa cf       	rjmp	.-172    	; 0x4d6 <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	ec f3       	brlt	.-6      	; 0x580 <__mulsf3_pse+0x82>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	dc f3       	brlt	.-10     	; 0x580 <__mulsf3_pse+0x82>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	e7 95       	ror	r30
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	c1 f7       	brne	.-16     	; 0x58a <__mulsf3_pse+0x8c>
 59a:	fe 2b       	or	r31, r30
 59c:	88 0f       	add	r24, r24
 59e:	91 1d       	adc	r25, r1
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <malloc>:
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	91 05       	cpc	r25, r1
 5b4:	10 f4       	brcc	.+4      	; 0x5ba <malloc+0x12>
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__flp>
 5be:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__flp+0x1>
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	30 97       	sbiw	r30, 0x00	; 0
 5cc:	19 f1       	breq	.+70     	; 0x614 <malloc+0x6c>
 5ce:	40 81       	ld	r20, Z
 5d0:	51 81       	ldd	r21, Z+1	; 0x01
 5d2:	02 81       	ldd	r16, Z+2	; 0x02
 5d4:	13 81       	ldd	r17, Z+3	; 0x03
 5d6:	48 17       	cp	r20, r24
 5d8:	59 07       	cpc	r21, r25
 5da:	c8 f0       	brcs	.+50     	; 0x60e <malloc+0x66>
 5dc:	84 17       	cp	r24, r20
 5de:	95 07       	cpc	r25, r21
 5e0:	69 f4       	brne	.+26     	; 0x5fc <malloc+0x54>
 5e2:	10 97       	sbiw	r26, 0x00	; 0
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <malloc+0x4a>
 5e6:	12 96       	adiw	r26, 0x02	; 2
 5e8:	0c 93       	st	X, r16
 5ea:	12 97       	sbiw	r26, 0x02	; 2
 5ec:	13 96       	adiw	r26, 0x03	; 3
 5ee:	1c 93       	st	X, r17
 5f0:	27 c0       	rjmp	.+78     	; 0x640 <malloc+0x98>
 5f2:	00 93 42 01 	sts	0x0142, r16	; 0x800142 <__flp>
 5f6:	10 93 43 01 	sts	0x0143, r17	; 0x800143 <__flp+0x1>
 5fa:	22 c0       	rjmp	.+68     	; 0x640 <malloc+0x98>
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	19 f0       	breq	.+6      	; 0x608 <malloc+0x60>
 602:	42 17       	cp	r20, r18
 604:	53 07       	cpc	r21, r19
 606:	18 f4       	brcc	.+6      	; 0x60e <malloc+0x66>
 608:	9a 01       	movw	r18, r20
 60a:	bd 01       	movw	r22, r26
 60c:	ef 01       	movw	r28, r30
 60e:	df 01       	movw	r26, r30
 610:	f8 01       	movw	r30, r16
 612:	db cf       	rjmp	.-74     	; 0x5ca <malloc+0x22>
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	f9 f0       	breq	.+62     	; 0x658 <malloc+0xb0>
 61a:	28 1b       	sub	r18, r24
 61c:	39 0b       	sbc	r19, r25
 61e:	24 30       	cpi	r18, 0x04	; 4
 620:	31 05       	cpc	r19, r1
 622:	80 f4       	brcc	.+32     	; 0x644 <malloc+0x9c>
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	9b 81       	ldd	r25, Y+3	; 0x03
 628:	61 15       	cp	r22, r1
 62a:	71 05       	cpc	r23, r1
 62c:	21 f0       	breq	.+8      	; 0x636 <malloc+0x8e>
 62e:	fb 01       	movw	r30, r22
 630:	93 83       	std	Z+3, r25	; 0x03
 632:	82 83       	std	Z+2, r24	; 0x02
 634:	04 c0       	rjmp	.+8      	; 0x63e <malloc+0x96>
 636:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__flp+0x1>
 63a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__flp>
 63e:	fe 01       	movw	r30, r28
 640:	32 96       	adiw	r30, 0x02	; 2
 642:	44 c0       	rjmp	.+136    	; 0x6cc <malloc+0x124>
 644:	fe 01       	movw	r30, r28
 646:	e2 0f       	add	r30, r18
 648:	f3 1f       	adc	r31, r19
 64a:	81 93       	st	Z+, r24
 64c:	91 93       	st	Z+, r25
 64e:	22 50       	subi	r18, 0x02	; 2
 650:	31 09       	sbc	r19, r1
 652:	39 83       	std	Y+1, r19	; 0x01
 654:	28 83       	st	Y, r18
 656:	3a c0       	rjmp	.+116    	; 0x6cc <malloc+0x124>
 658:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 65c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 660:	23 2b       	or	r18, r19
 662:	41 f4       	brne	.+16     	; 0x674 <malloc+0xcc>
 664:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 668:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 66c:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <__brkval+0x1>
 670:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <__brkval>
 674:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 678:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 67c:	21 15       	cp	r18, r1
 67e:	31 05       	cpc	r19, r1
 680:	41 f4       	brne	.+16     	; 0x692 <malloc+0xea>
 682:	2d b7       	in	r18, 0x3d	; 61
 684:	3e b7       	in	r19, 0x3e	; 62
 686:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 68a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 68e:	24 1b       	sub	r18, r20
 690:	35 0b       	sbc	r19, r21
 692:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__brkval>
 696:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__brkval+0x1>
 69a:	e2 17       	cp	r30, r18
 69c:	f3 07       	cpc	r31, r19
 69e:	a0 f4       	brcc	.+40     	; 0x6c8 <malloc+0x120>
 6a0:	2e 1b       	sub	r18, r30
 6a2:	3f 0b       	sbc	r19, r31
 6a4:	28 17       	cp	r18, r24
 6a6:	39 07       	cpc	r19, r25
 6a8:	78 f0       	brcs	.+30     	; 0x6c8 <malloc+0x120>
 6aa:	ac 01       	movw	r20, r24
 6ac:	4e 5f       	subi	r20, 0xFE	; 254
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
 6b0:	24 17       	cp	r18, r20
 6b2:	35 07       	cpc	r19, r21
 6b4:	48 f0       	brcs	.+18     	; 0x6c8 <malloc+0x120>
 6b6:	4e 0f       	add	r20, r30
 6b8:	5f 1f       	adc	r21, r31
 6ba:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <__brkval+0x1>
 6be:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <__brkval>
 6c2:	81 93       	st	Z+, r24
 6c4:	91 93       	st	Z+, r25
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <malloc+0x124>
 6c8:	e0 e0       	ldi	r30, 0x00	; 0
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	cf 01       	movw	r24, r30
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <free>:
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	09 f4       	brne	.+2      	; 0x6e2 <free+0xa>
 6e0:	81 c0       	rjmp	.+258    	; 0x7e4 <free+0x10c>
 6e2:	fc 01       	movw	r30, r24
 6e4:	32 97       	sbiw	r30, 0x02	; 2
 6e6:	13 82       	std	Z+3, r1	; 0x03
 6e8:	12 82       	std	Z+2, r1	; 0x02
 6ea:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__flp>
 6ee:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__flp+0x1>
 6f2:	10 97       	sbiw	r26, 0x00	; 0
 6f4:	81 f4       	brne	.+32     	; 0x716 <free+0x3e>
 6f6:	20 81       	ld	r18, Z
 6f8:	31 81       	ldd	r19, Z+1	; 0x01
 6fa:	82 0f       	add	r24, r18
 6fc:	93 1f       	adc	r25, r19
 6fe:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 702:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 706:	28 17       	cp	r18, r24
 708:	39 07       	cpc	r19, r25
 70a:	51 f5       	brne	.+84     	; 0x760 <free+0x88>
 70c:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <__brkval+0x1>
 710:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__brkval>
 714:	67 c0       	rjmp	.+206    	; 0x7e4 <free+0x10c>
 716:	ed 01       	movw	r28, r26
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	ce 17       	cp	r28, r30
 71e:	df 07       	cpc	r29, r31
 720:	40 f4       	brcc	.+16     	; 0x732 <free+0x5a>
 722:	4a 81       	ldd	r20, Y+2	; 0x02
 724:	5b 81       	ldd	r21, Y+3	; 0x03
 726:	9e 01       	movw	r18, r28
 728:	41 15       	cp	r20, r1
 72a:	51 05       	cpc	r21, r1
 72c:	f1 f0       	breq	.+60     	; 0x76a <free+0x92>
 72e:	ea 01       	movw	r28, r20
 730:	f5 cf       	rjmp	.-22     	; 0x71c <free+0x44>
 732:	d3 83       	std	Z+3, r29	; 0x03
 734:	c2 83       	std	Z+2, r28	; 0x02
 736:	40 81       	ld	r20, Z
 738:	51 81       	ldd	r21, Z+1	; 0x01
 73a:	84 0f       	add	r24, r20
 73c:	95 1f       	adc	r25, r21
 73e:	c8 17       	cp	r28, r24
 740:	d9 07       	cpc	r29, r25
 742:	59 f4       	brne	.+22     	; 0x75a <free+0x82>
 744:	88 81       	ld	r24, Y
 746:	99 81       	ldd	r25, Y+1	; 0x01
 748:	84 0f       	add	r24, r20
 74a:	95 1f       	adc	r25, r21
 74c:	02 96       	adiw	r24, 0x02	; 2
 74e:	91 83       	std	Z+1, r25	; 0x01
 750:	80 83       	st	Z, r24
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	9b 81       	ldd	r25, Y+3	; 0x03
 756:	93 83       	std	Z+3, r25	; 0x03
 758:	82 83       	std	Z+2, r24	; 0x02
 75a:	21 15       	cp	r18, r1
 75c:	31 05       	cpc	r19, r1
 75e:	29 f4       	brne	.+10     	; 0x76a <free+0x92>
 760:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <__flp+0x1>
 764:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <__flp>
 768:	3d c0       	rjmp	.+122    	; 0x7e4 <free+0x10c>
 76a:	e9 01       	movw	r28, r18
 76c:	fb 83       	std	Y+3, r31	; 0x03
 76e:	ea 83       	std	Y+2, r30	; 0x02
 770:	49 91       	ld	r20, Y+
 772:	59 91       	ld	r21, Y+
 774:	c4 0f       	add	r28, r20
 776:	d5 1f       	adc	r29, r21
 778:	ec 17       	cp	r30, r28
 77a:	fd 07       	cpc	r31, r29
 77c:	61 f4       	brne	.+24     	; 0x796 <free+0xbe>
 77e:	80 81       	ld	r24, Z
 780:	91 81       	ldd	r25, Z+1	; 0x01
 782:	84 0f       	add	r24, r20
 784:	95 1f       	adc	r25, r21
 786:	02 96       	adiw	r24, 0x02	; 2
 788:	e9 01       	movw	r28, r18
 78a:	99 83       	std	Y+1, r25	; 0x01
 78c:	88 83       	st	Y, r24
 78e:	82 81       	ldd	r24, Z+2	; 0x02
 790:	93 81       	ldd	r25, Z+3	; 0x03
 792:	9b 83       	std	Y+3, r25	; 0x03
 794:	8a 83       	std	Y+2, r24	; 0x02
 796:	e0 e0       	ldi	r30, 0x00	; 0
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	12 96       	adiw	r26, 0x02	; 2
 79c:	8d 91       	ld	r24, X+
 79e:	9c 91       	ld	r25, X
 7a0:	13 97       	sbiw	r26, 0x03	; 3
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	19 f0       	breq	.+6      	; 0x7ac <free+0xd4>
 7a6:	fd 01       	movw	r30, r26
 7a8:	dc 01       	movw	r26, r24
 7aa:	f7 cf       	rjmp	.-18     	; 0x79a <free+0xc2>
 7ac:	8d 91       	ld	r24, X+
 7ae:	9c 91       	ld	r25, X
 7b0:	11 97       	sbiw	r26, 0x01	; 1
 7b2:	9d 01       	movw	r18, r26
 7b4:	2e 5f       	subi	r18, 0xFE	; 254
 7b6:	3f 4f       	sbci	r19, 0xFF	; 255
 7b8:	82 0f       	add	r24, r18
 7ba:	93 1f       	adc	r25, r19
 7bc:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 7c0:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 7c4:	28 17       	cp	r18, r24
 7c6:	39 07       	cpc	r19, r25
 7c8:	69 f4       	brne	.+26     	; 0x7e4 <free+0x10c>
 7ca:	30 97       	sbiw	r30, 0x00	; 0
 7cc:	29 f4       	brne	.+10     	; 0x7d8 <free+0x100>
 7ce:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__flp+0x1>
 7d2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__flp>
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <free+0x104>
 7d8:	13 82       	std	Z+3, r1	; 0x03
 7da:	12 82       	std	Z+2, r1	; 0x02
 7dc:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <__brkval+0x1>
 7e0:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <__brkval>
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <_exit>:
 7ea:	f8 94       	cli

000007ec <__stop_program>:
 7ec:	ff cf       	rjmp	.-2      	; 0x7ec <__stop_program>
