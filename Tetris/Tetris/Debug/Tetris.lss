
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001450  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800136  00800136  0000151a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5f  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e85  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001190  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  000055c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ce  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ca  00000000  00000000  00006392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000795c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c5       	rjmp	.+2764   	; 0xb02 <__vector_13>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 04       	cpc	r13, r4
      8e:	d1 04       	cpc	r13, r1
      90:	ce 04       	cpc	r12, r14
      92:	cb 04       	cpc	r12, r11
      94:	c8 04       	cpc	r12, r8
      96:	c5 04       	cpc	r12, r5
      98:	c2 04       	cpc	r12, r2
      9a:	bf 04       	cpc	r11, r15

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e0 e5       	ldi	r30, 0x50	; 80
      b0:	f4 e1       	ldi	r31, 0x14	; 20
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a6 e3       	ldi	r26, 0x36	; 54
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a3 37       	cpi	r26, 0x73	; 115
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	72 d7       	rcall	.+3812   	; 0xfb8 <main>
      d4:	0c 94 26 0a 	jmp	0x144c	; 0x144c <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <checkDownAndDo>:
	{{0,0},{0,-1},{0,-2},{1,0}}, //L-shape
	{{0,0},{0,-1},{0,1},{1,0}}, //triangle
	{{0,0},{0,-1},{1,0},{1,1}}//bent
};

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	dc 01       	movw	r26, r24
	for(int i = 0; i < 4; i++){
		if(
		   (active->coordinates[i][0] + active->x_coordinate )     > 7
      ee:	18 96       	adiw	r26, 0x08	; 8
      f0:	8c 91       	ld	r24, X
      f2:	18 97       	sbiw	r26, 0x08	; 8
      f4:	08 2e       	mov	r0, r24
      f6:	00 0c       	add	r0, r0
      f8:	99 0b       	sbc	r25, r25
      fa:	2c 91       	ld	r18, X
      fc:	6c 01       	movw	r12, r24
      fe:	c2 0e       	add	r12, r18
     100:	d1 1c       	adc	r13, r1
     102:	27 fd       	sbrc	r18, 7
     104:	da 94       	dec	r13
     106:	96 01       	movw	r18, r12
	{{0,0},{0,-1},{1,0},{1,1}}//bent
};

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i++){
		if(
     108:	28 30       	cpi	r18, 0x08	; 8
     10a:	31 05       	cpc	r19, r1
     10c:	08 f0       	brcs	.+2      	; 0x110 <checkDownAndDo+0x36>
     10e:	51 c0       	rjmp	.+162    	; 0x1b2 <checkDownAndDo+0xd8>
		   (active->coordinates[i][0] + active->x_coordinate )     > 7
		|| (active->coordinates[i][0] + active->x_coordinate )     < 0
		|| (active->coordinates[i][1] + active->y_coordinate + 1)  > 15
     110:	19 96       	adiw	r26, 0x09	; 9
     112:	fc 90       	ld	r15, X
     114:	19 97       	sbiw	r26, 0x09	; 9
     116:	af 2c       	mov	r10, r15
     118:	0f 2c       	mov	r0, r15
     11a:	00 0c       	add	r0, r0
     11c:	bb 08       	sbc	r11, r11
     11e:	11 96       	adiw	r26, 0x01	; 1
     120:	4c 91       	ld	r20, X
     122:	11 97       	sbiw	r26, 0x01	; 1
     124:	e5 01       	movw	r28, r10
     126:	c4 0f       	add	r28, r20
     128:	d1 1d       	adc	r29, r1
     12a:	47 fd       	sbrc	r20, 7
     12c:	da 95       	dec	r29
     12e:	ae 01       	movw	r20, r28
     130:	4f 5f       	subi	r20, 0xFF	; 255
     132:	5f 4f       	sbci	r21, 0xFF	; 255
     134:	40 31       	cpi	r20, 0x10	; 16
     136:	51 05       	cpc	r21, r1
     138:	e0 f5       	brcc	.+120    	; 0x1b2 <checkDownAndDo+0xd8>
		|| (active->coordinates[i][1] + active->y_coordinate + 1)  < 0 ){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[active->coordinates[i][0] + active->x_coordinate][active->coordinates[i][1] + active->y_coordinate + 1]){
     13a:	22 95       	swap	r18
     13c:	32 95       	swap	r19
     13e:	30 7f       	andi	r19, 0xF0	; 240
     140:	32 27       	eor	r19, r18
     142:	20 7f       	andi	r18, 0xF0	; 240
     144:	32 27       	eor	r19, r18
     146:	26 0f       	add	r18, r22
     148:	37 1f       	adc	r19, r23
     14a:	f9 01       	movw	r30, r18
     14c:	e4 0f       	add	r30, r20
     14e:	f5 1f       	adc	r31, r21
     150:	20 81       	ld	r18, Z
     152:	21 11       	cpse	r18, r1
     154:	2e c0       	rjmp	.+92     	; 0x1b2 <checkDownAndDo+0xd8>
     156:	fd 01       	movw	r30, r26
     158:	8d 01       	movw	r16, r26
     15a:	0a 5f       	subi	r16, 0xFA	; 250
     15c:	1f 4f       	sbci	r17, 0xFF	; 255
};

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i++){
		if(
		   (active->coordinates[i][0] + active->x_coordinate )     > 7
     15e:	22 81       	ldd	r18, Z+2	; 0x02
     160:	ac 01       	movw	r20, r24
     162:	42 0f       	add	r20, r18
     164:	51 1d       	adc	r21, r1
     166:	27 fd       	sbrc	r18, 7
     168:	5a 95       	dec	r21
	{{0,0},{0,-1},{1,0},{1,1}}//bent
};

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i++){
		if(
     16a:	48 30       	cpi	r20, 0x08	; 8
     16c:	51 05       	cpc	r21, r1
     16e:	08 f5       	brcc	.+66     	; 0x1b2 <checkDownAndDo+0xd8>
		   (active->coordinates[i][0] + active->x_coordinate )     > 7
		|| (active->coordinates[i][0] + active->x_coordinate )     < 0
		|| (active->coordinates[i][1] + active->y_coordinate + 1)  > 15
     170:	23 81       	ldd	r18, Z+3	; 0x03
     172:	65 01       	movw	r12, r10
     174:	c2 0e       	add	r12, r18
     176:	d1 1c       	adc	r13, r1
     178:	27 fd       	sbrc	r18, 7
     17a:	da 94       	dec	r13
     17c:	96 01       	movw	r18, r12
     17e:	2f 5f       	subi	r18, 0xFF	; 255
     180:	3f 4f       	sbci	r19, 0xFF	; 255
     182:	20 31       	cpi	r18, 0x10	; 16
     184:	31 05       	cpc	r19, r1
     186:	a8 f4       	brcc	.+42     	; 0x1b2 <checkDownAndDo+0xd8>
		|| (active->coordinates[i][1] + active->y_coordinate + 1)  < 0 ){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[active->coordinates[i][0] + active->x_coordinate][active->coordinates[i][1] + active->y_coordinate + 1]){
     188:	42 95       	swap	r20
     18a:	52 95       	swap	r21
     18c:	50 7f       	andi	r21, 0xF0	; 240
     18e:	54 27       	eor	r21, r20
     190:	40 7f       	andi	r20, 0xF0	; 240
     192:	54 27       	eor	r21, r20
     194:	46 0f       	add	r20, r22
     196:	57 1f       	adc	r21, r23
     198:	42 0f       	add	r20, r18
     19a:	53 1f       	adc	r21, r19
     19c:	ea 01       	movw	r28, r20
     19e:	28 81       	ld	r18, Y
     1a0:	21 11       	cpse	r18, r1
     1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <checkDownAndDo+0xd8>
     1a4:	32 96       	adiw	r30, 0x02	; 2
	{{0,0},{0,-1},{0,1},{1,0}}, //triangle
	{{0,0},{0,-1},{1,0},{1,1}}//bent
};

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i++){
     1a6:	e0 17       	cp	r30, r16
     1a8:	f1 07       	cpc	r31, r17
     1aa:	c9 f6       	brne	.-78     	; 0x15e <checkDownAndDo+0x84>
		else if(inactive->board[active->coordinates[i][0] + active->x_coordinate][active->coordinates[i][1] + active->y_coordinate + 1]){
			return;//fail
		}
	}
	//copy
	active->y_coordinate++;
     1ac:	f3 94       	inc	r15
     1ae:	19 96       	adiw	r26, 0x09	; 9
     1b0:	fc 92       	st	X, r15
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	ff 90       	pop	r15
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	bf 90       	pop	r11
     1c2:	af 90       	pop	r10
     1c4:	08 95       	ret

000001c6 <checkRotateAndDo>:
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
     1c6:	8f 92       	push	r8
     1c8:	9f 92       	push	r9
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	28 97       	sbiw	r28, 0x08	; 8
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	dc 01       	movw	r26, r24
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] =  active->coordinates[i][1];
     1f0:	11 96       	adiw	r26, 0x01	; 1
     1f2:	9c 91       	ld	r25, X
     1f4:	11 97       	sbiw	r26, 0x01	; 1
     1f6:	99 83       	std	Y+1, r25	; 0x01
		tempActive[i][1] = -1 * active->coordinates[i][0];
     1f8:	8c 91       	ld	r24, X
     1fa:	81 95       	neg	r24
     1fc:	8a 83       	std	Y+2, r24	; 0x02
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7//fix 
     1fe:	18 96       	adiw	r26, 0x08	; 8
     200:	cc 90       	ld	r12, X
     202:	18 97       	sbiw	r26, 0x08	; 8
     204:	0c 2c       	mov	r0, r12
     206:	00 0c       	add	r0, r0
     208:	dd 08       	sbc	r13, r13
     20a:	96 01       	movw	r18, r12
     20c:	29 0f       	add	r18, r25
     20e:	31 1d       	adc	r19, r1
     210:	97 fd       	sbrc	r25, 7
     212:	3a 95       	dec	r19
     214:	28 30       	cpi	r18, 0x08	; 8
     216:	31 05       	cpc	r19, r1
     218:	08 f0       	brcs	.+2      	; 0x21c <checkRotateAndDo+0x56>
     21a:	5c c0       	rjmp	.+184    	; 0x2d4 <checkRotateAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     21c:	19 96       	adiw	r26, 0x09	; 9
     21e:	ac 90       	ld	r10, X
     220:	19 97       	sbiw	r26, 0x09	; 9
     222:	0a 2c       	mov	r0, r10
     224:	00 0c       	add	r0, r0
     226:	bb 08       	sbc	r11, r11
     228:	75 01       	movw	r14, r10
     22a:	e8 0e       	add	r14, r24
     22c:	f1 1c       	adc	r15, r1
     22e:	87 fd       	sbrc	r24, 7
     230:	fa 94       	dec	r15
     232:	80 e1       	ldi	r24, 0x10	; 16
     234:	e8 16       	cp	r14, r24
     236:	f1 04       	cpc	r15, r1
     238:	08 f0       	brcs	.+2      	; 0x23c <checkRotateAndDo+0x76>
     23a:	4c c0       	rjmp	.+152    	; 0x2d4 <checkRotateAndDo+0x10e>
     23c:	ad 01       	movw	r20, r26
     23e:	fe 01       	movw	r30, r28
     240:	31 96       	adiw	r30, 0x01	; 1
     242:	ce 01       	movw	r24, r28
     244:	07 96       	adiw	r24, 0x07	; 7
     246:	8f 01       	movw	r16, r30
     248:	4d 01       	movw	r8, r26
     24a:	24 c0       	rjmp	.+72     	; 0x294 <checkRotateAndDo+0xce>
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] =  active->coordinates[i][1];
     24c:	d4 01       	movw	r26, r8
     24e:	13 96       	adiw	r26, 0x03	; 3
     250:	2c 91       	ld	r18, X
     252:	d8 01       	movw	r26, r16
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	2c 93       	st	X, r18
		tempActive[i][1] = -1 * active->coordinates[i][0];
     258:	d4 01       	movw	r26, r8
     25a:	12 96       	adiw	r26, 0x02	; 2
     25c:	fc 90       	ld	r15, X
     25e:	f1 94       	neg	r15
     260:	d8 01       	movw	r26, r16
     262:	13 96       	adiw	r26, 0x03	; 3
     264:	fc 92       	st	X, r15
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7//fix 
     266:	d6 01       	movw	r26, r12
     268:	a2 0f       	add	r26, r18
     26a:	b1 1d       	adc	r27, r1
     26c:	27 fd       	sbrc	r18, 7
     26e:	ba 95       	dec	r27
     270:	9d 01       	movw	r18, r26
     272:	18 97       	sbiw	r26, 0x08	; 8
     274:	78 f5       	brcc	.+94     	; 0x2d4 <checkRotateAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     276:	d5 01       	movw	r26, r10
     278:	af 0d       	add	r26, r15
     27a:	b1 1d       	adc	r27, r1
     27c:	f7 fc       	sbrc	r15, 7
     27e:	ba 95       	dec	r27
     280:	7d 01       	movw	r14, r26
     282:	b2 e0       	ldi	r27, 0x02	; 2
     284:	8b 0e       	add	r8, r27
     286:	91 1c       	adc	r9, r1
     288:	0e 5f       	subi	r16, 0xFE	; 254
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	a0 e1       	ldi	r26, 0x10	; 16
     28e:	ea 16       	cp	r14, r26
     290:	f1 04       	cpc	r15, r1
     292:	00 f5       	brcc	.+64     	; 0x2d4 <checkRotateAndDo+0x10e>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		} 
		//check gameboard
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     294:	22 95       	swap	r18
     296:	32 95       	swap	r19
     298:	30 7f       	andi	r19, 0xF0	; 240
     29a:	32 27       	eor	r19, r18
     29c:	20 7f       	andi	r18, 0xF0	; 240
     29e:	32 27       	eor	r19, r18
     2a0:	26 0f       	add	r18, r22
     2a2:	37 1f       	adc	r19, r23
     2a4:	2e 0d       	add	r18, r14
     2a6:	3f 1d       	adc	r19, r15
     2a8:	d9 01       	movw	r26, r18
     2aa:	2c 91       	ld	r18, X
     2ac:	21 11       	cpse	r18, r1
     2ae:	12 c0       	rjmp	.+36     	; 0x2d4 <checkRotateAndDo+0x10e>
}
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     2b0:	08 17       	cp	r16, r24
     2b2:	19 07       	cpc	r17, r25
     2b4:	59 f6       	brne	.-106    	; 0x24c <checkRotateAndDo+0x86>
     2b6:	9e 01       	movw	r18, r28
     2b8:	27 5f       	subi	r18, 0xF7	; 247
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     2bc:	80 81       	ld	r24, Z
     2be:	da 01       	movw	r26, r20
     2c0:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     2c2:	81 81       	ldd	r24, Z+1	; 0x01
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	8c 93       	st	X, r24
     2c8:	32 96       	adiw	r30, 0x02	; 2
     2ca:	4e 5f       	subi	r20, 0xFE	; 254
     2cc:	5f 4f       	sbci	r21, 0xFF	; 255
			return;//fail
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
     2ce:	e2 17       	cp	r30, r18
     2d0:	f3 07       	cpc	r31, r19
     2d2:	a1 f7       	brne	.-24     	; 0x2bc <checkRotateAndDo+0xf6>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
     2d4:	28 96       	adiw	r28, 0x08	; 8
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	08 95       	ret

000002fa <checkLeftAndDo>:

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
     2fa:	af 92       	push	r10
     2fc:	bf 92       	push	r11
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	dc 01       	movw	r26, r24
		for(int i = 0; i < 4; i++){
			if(
			   (active->coordinates[i][0] + active->x_coordinate -1)> 7
     30e:	18 96       	adiw	r26, 0x08	; 8
     310:	fc 90       	ld	r15, X
     312:	18 97       	sbiw	r26, 0x08	; 8
     314:	4f 2d       	mov	r20, r15
     316:	0f 2c       	mov	r0, r15
     318:	00 0c       	add	r0, r0
     31a:	55 0b       	sbc	r21, r21
     31c:	8c 91       	ld	r24, X
     31e:	9a 01       	movw	r18, r20
     320:	28 0f       	add	r18, r24
     322:	31 1d       	adc	r19, r1
     324:	87 fd       	sbrc	r24, 7
     326:	3a 95       	dec	r19
     328:	21 50       	subi	r18, 0x01	; 1
     32a:	31 09       	sbc	r19, r1
	
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
     32c:	28 30       	cpi	r18, 0x08	; 8
     32e:	31 05       	cpc	r19, r1
     330:	08 f0       	brcs	.+2      	; 0x334 <checkLeftAndDo+0x3a>
     332:	50 c0       	rjmp	.+160    	; 0x3d4 <checkLeftAndDo+0xda>
			   (active->coordinates[i][0] + active->x_coordinate -1)> 7
			|| (active->coordinates[i][0] + active->x_coordinate -1)< 0
			|| (active->coordinates[i][1] + active->y_coordinate )  > 15
     334:	19 96       	adiw	r26, 0x09	; 9
     336:	8c 91       	ld	r24, X
     338:	19 97       	sbiw	r26, 0x09	; 9
     33a:	08 2e       	mov	r0, r24
     33c:	00 0c       	add	r0, r0
     33e:	99 0b       	sbc	r25, r25
     340:	11 96       	adiw	r26, 0x01	; 1
     342:	ec 91       	ld	r30, X
     344:	11 97       	sbiw	r26, 0x01	; 1
     346:	6c 01       	movw	r12, r24
     348:	ce 0e       	add	r12, r30
     34a:	d1 1c       	adc	r13, r1
     34c:	e7 fd       	sbrc	r30, 7
     34e:	da 94       	dec	r13
     350:	f6 01       	movw	r30, r12
     352:	e0 31       	cpi	r30, 0x10	; 16
     354:	f1 05       	cpc	r31, r1
     356:	08 f0       	brcs	.+2      	; 0x35a <checkLeftAndDo+0x60>
     358:	3d c0       	rjmp	.+122    	; 0x3d4 <checkLeftAndDo+0xda>
			|| (active->coordinates[i][1] + active->y_coordinate )  < 0 ){
				return; //fail
			}
			//check gameboard
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate - 1][active->coordinates[i][1] + active->y_coordinate]){
     35a:	22 95       	swap	r18
     35c:	32 95       	swap	r19
     35e:	30 7f       	andi	r19, 0xF0	; 240
     360:	32 27       	eor	r19, r18
     362:	20 7f       	andi	r18, 0xF0	; 240
     364:	32 27       	eor	r19, r18
     366:	26 0f       	add	r18, r22
     368:	37 1f       	adc	r19, r23
     36a:	e2 0f       	add	r30, r18
     36c:	f3 1f       	adc	r31, r19
     36e:	20 81       	ld	r18, Z
     370:	21 11       	cpse	r18, r1
     372:	30 c0       	rjmp	.+96     	; 0x3d4 <checkLeftAndDo+0xda>
     374:	fd 01       	movw	r30, r26
     376:	5d 01       	movw	r10, r26
     378:	06 e0       	ldi	r16, 0x06	; 6
     37a:	a0 0e       	add	r10, r16
     37c:	b1 1c       	adc	r11, r1
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
			   (active->coordinates[i][0] + active->x_coordinate -1)> 7
     37e:	22 81       	ldd	r18, Z+2	; 0x02
     380:	ea 01       	movw	r28, r20
     382:	c2 0f       	add	r28, r18
     384:	d1 1d       	adc	r29, r1
     386:	27 fd       	sbrc	r18, 7
     388:	da 95       	dec	r29
     38a:	9e 01       	movw	r18, r28
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	31 09       	sbc	r19, r1
	
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
     390:	28 30       	cpi	r18, 0x08	; 8
     392:	31 05       	cpc	r19, r1
     394:	f8 f4       	brcc	.+62     	; 0x3d4 <checkLeftAndDo+0xda>
			   (active->coordinates[i][0] + active->x_coordinate -1)> 7
			|| (active->coordinates[i][0] + active->x_coordinate -1)< 0
			|| (active->coordinates[i][1] + active->y_coordinate )  > 15
     396:	13 81       	ldd	r17, Z+3	; 0x03
     398:	6c 01       	movw	r12, r24
     39a:	c1 0e       	add	r12, r17
     39c:	d1 1c       	adc	r13, r1
     39e:	17 fd       	sbrc	r17, 7
     3a0:	da 94       	dec	r13
     3a2:	86 01       	movw	r16, r12
     3a4:	00 31       	cpi	r16, 0x10	; 16
     3a6:	11 05       	cpc	r17, r1
     3a8:	a8 f4       	brcc	.+42     	; 0x3d4 <checkLeftAndDo+0xda>
			|| (active->coordinates[i][1] + active->y_coordinate )  < 0 ){
				return; //fail
			}
			//check gameboard
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate - 1][active->coordinates[i][1] + active->y_coordinate]){
     3aa:	22 95       	swap	r18
     3ac:	32 95       	swap	r19
     3ae:	30 7f       	andi	r19, 0xF0	; 240
     3b0:	32 27       	eor	r19, r18
     3b2:	20 7f       	andi	r18, 0xF0	; 240
     3b4:	32 27       	eor	r19, r18
     3b6:	26 0f       	add	r18, r22
     3b8:	37 1f       	adc	r19, r23
     3ba:	2c 0d       	add	r18, r12
     3bc:	3d 1d       	adc	r19, r13
     3be:	e9 01       	movw	r28, r18
     3c0:	28 81       	ld	r18, Y
     3c2:	21 11       	cpse	r18, r1
     3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <checkLeftAndDo+0xda>
     3c6:	32 96       	adiw	r30, 0x02	; 2
	}
	
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
     3c8:	ea 15       	cp	r30, r10
     3ca:	fb 05       	cpc	r31, r11
     3cc:	c1 f6       	brne	.-80     	; 0x37e <checkLeftAndDo+0x84>
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate - 1][active->coordinates[i][1] + active->y_coordinate]){
				return;//fail
			}
		}
		//copy
		active->x_coordinate--;
     3ce:	fa 94       	dec	r15
     3d0:	18 96       	adiw	r26, 0x08	; 8
     3d2:	fc 92       	st	X, r15
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	bf 90       	pop	r11
     3e4:	af 90       	pop	r10
     3e6:	08 95       	ret

000003e8 <checkRightAndDo>:
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
     3e8:	af 92       	push	r10
     3ea:	bf 92       	push	r11
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	dc 01       	movw	r26, r24
		for(int i = 0; i < 4; i++){
			if(
			(active->coordinates[i][0] + active->x_coordinate + 1)    > 7
     3fc:	18 96       	adiw	r26, 0x08	; 8
     3fe:	fc 90       	ld	r15, X
     400:	18 97       	sbiw	r26, 0x08	; 8
     402:	4f 2d       	mov	r20, r15
     404:	0f 2c       	mov	r0, r15
     406:	00 0c       	add	r0, r0
     408:	55 0b       	sbc	r21, r21
     40a:	8c 91       	ld	r24, X
     40c:	9a 01       	movw	r18, r20
     40e:	28 0f       	add	r18, r24
     410:	31 1d       	adc	r19, r1
     412:	87 fd       	sbrc	r24, 7
     414:	3a 95       	dec	r19
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
		active->x_coordinate--;
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
     41a:	28 30       	cpi	r18, 0x08	; 8
     41c:	31 05       	cpc	r19, r1
     41e:	08 f0       	brcs	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	50 c0       	rjmp	.+160    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			(active->coordinates[i][0] + active->x_coordinate + 1)    > 7
			|| (active->coordinates[i][0] + active->x_coordinate + 1) < 0
			|| (active->coordinates[i][1] + active->y_coordinate)  > 15
     422:	19 96       	adiw	r26, 0x09	; 9
     424:	8c 91       	ld	r24, X
     426:	19 97       	sbiw	r26, 0x09	; 9
     428:	08 2e       	mov	r0, r24
     42a:	00 0c       	add	r0, r0
     42c:	99 0b       	sbc	r25, r25
     42e:	11 96       	adiw	r26, 0x01	; 1
     430:	ec 91       	ld	r30, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	6c 01       	movw	r12, r24
     436:	ce 0e       	add	r12, r30
     438:	d1 1c       	adc	r13, r1
     43a:	e7 fd       	sbrc	r30, 7
     43c:	da 94       	dec	r13
     43e:	f6 01       	movw	r30, r12
     440:	e0 31       	cpi	r30, 0x10	; 16
     442:	f1 05       	cpc	r31, r1
     444:	08 f0       	brcs	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	3d c0       	rjmp	.+122    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			|| (active->coordinates[i][1] + active->y_coordinate)  < 0 ){
				return; //fail
			}
			//check gameboard
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate + 1][active->coordinates[i][1] + active->y_coordinate]){
     448:	22 95       	swap	r18
     44a:	32 95       	swap	r19
     44c:	30 7f       	andi	r19, 0xF0	; 240
     44e:	32 27       	eor	r19, r18
     450:	20 7f       	andi	r18, 0xF0	; 240
     452:	32 27       	eor	r19, r18
     454:	26 0f       	add	r18, r22
     456:	37 1f       	adc	r19, r23
     458:	e2 0f       	add	r30, r18
     45a:	f3 1f       	adc	r31, r19
     45c:	20 81       	ld	r18, Z
     45e:	21 11       	cpse	r18, r1
     460:	30 c0       	rjmp	.+96     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     462:	fd 01       	movw	r30, r26
     464:	5d 01       	movw	r10, r26
     466:	06 e0       	ldi	r16, 0x06	; 6
     468:	a0 0e       	add	r10, r16
     46a:	b1 1c       	adc	r11, r1
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
			(active->coordinates[i][0] + active->x_coordinate + 1)    > 7
     46c:	22 81       	ldd	r18, Z+2	; 0x02
     46e:	ea 01       	movw	r28, r20
     470:	c2 0f       	add	r28, r18
     472:	d1 1d       	adc	r29, r1
     474:	27 fd       	sbrc	r18, 7
     476:	da 95       	dec	r29
     478:	9e 01       	movw	r18, r28
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
		active->x_coordinate--;
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
			if(
     47e:	28 30       	cpi	r18, 0x08	; 8
     480:	31 05       	cpc	r19, r1
     482:	f8 f4       	brcc	.+62     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			(active->coordinates[i][0] + active->x_coordinate + 1)    > 7
			|| (active->coordinates[i][0] + active->x_coordinate + 1) < 0
			|| (active->coordinates[i][1] + active->y_coordinate)  > 15
     484:	13 81       	ldd	r17, Z+3	; 0x03
     486:	6c 01       	movw	r12, r24
     488:	c1 0e       	add	r12, r17
     48a:	d1 1c       	adc	r13, r1
     48c:	17 fd       	sbrc	r17, 7
     48e:	da 94       	dec	r13
     490:	86 01       	movw	r16, r12
     492:	00 31       	cpi	r16, 0x10	; 16
     494:	11 05       	cpc	r17, r1
     496:	a8 f4       	brcc	.+42     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			|| (active->coordinates[i][1] + active->y_coordinate)  < 0 ){
				return; //fail
			}
			//check gameboard
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate + 1][active->coordinates[i][1] + active->y_coordinate]){
     498:	22 95       	swap	r18
     49a:	32 95       	swap	r19
     49c:	30 7f       	andi	r19, 0xF0	; 240
     49e:	32 27       	eor	r19, r18
     4a0:	20 7f       	andi	r18, 0xF0	; 240
     4a2:	32 27       	eor	r19, r18
     4a4:	26 0f       	add	r18, r22
     4a6:	37 1f       	adc	r19, r23
     4a8:	2c 0d       	add	r18, r12
     4aa:	3d 1d       	adc	r19, r13
     4ac:	e9 01       	movw	r28, r18
     4ae:	28 81       	ld	r18, Y
     4b0:	21 11       	cpse	r18, r1
     4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4b4:	32 96       	adiw	r30, 0x02	; 2
		//copy
		active->x_coordinate--;
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
		for(int i = 0; i < 4; i++){
     4b6:	ea 15       	cp	r30, r10
     4b8:	fb 05       	cpc	r31, r11
     4ba:	c1 f6       	brne	.-80     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			else if(inactive->board[active->coordinates[i][0] + active->x_coordinate + 1][active->coordinates[i][1] + active->y_coordinate]){
				return;//fail
			}
		}
		//copy
		active->x_coordinate++;
     4bc:	f3 94       	inc	r15
     4be:	18 96       	adiw	r26, 0x08	; 8
     4c0:	fc 92       	st	X, r15
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	08 95       	ret

000004d6 <checkLoss>:

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 81       	ld	r18, Z
     4da:	21 11       	cpse	r18, r1
     4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <checkLoss+0x22>
     4de:	9c 01       	movw	r18, r24
     4e0:	20 59       	subi	r18, 0x90	; 144
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	90 89       	ldd	r25, Z+16	; 0x10
     4e6:	91 11       	cpse	r25, r1
     4e8:	0a c0       	rjmp	.+20     	; 0x4fe <checkLoss+0x28>
     4ea:	70 96       	adiw	r30, 0x10	; 16
		//copy
		active->x_coordinate++;
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
     4ec:	e2 17       	cp	r30, r18
     4ee:	f3 07       	cpc	r31, r19
     4f0:	c9 f7       	brne	.-14     	; 0x4e4 <checkLoss+0xe>
		if(inactive->board[i][0]){return 1;}
	}
	return 0;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret
		active->x_coordinate++;
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	08 95       	ret
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
	
}
     502:	08 95       	ret

00000504 <convertPieceToInactive>:

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	dc 01       	movw	r26, r24
     50c:	08 96       	adiw	r24, 0x08	; 8
	for(int i = 0; i < 4; i ++){
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	2c 91       	ld	r18, X
     512:	e8 85       	ldd	r30, Y+8	; 0x08
     514:	0e 2e       	mov	r0, r30
     516:	00 0c       	add	r0, r0
     518:	ff 0b       	sbc	r31, r31
     51a:	e2 0f       	add	r30, r18
     51c:	f1 1d       	adc	r31, r1
     51e:	27 fd       	sbrc	r18, 7
     520:	fa 95       	dec	r31
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	3c 91       	ld	r19, X
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	29 85       	ldd	r18, Y+9	; 0x09
     52a:	e2 95       	swap	r30
     52c:	f2 95       	swap	r31
     52e:	f0 7f       	andi	r31, 0xF0	; 240
     530:	fe 27       	eor	r31, r30
     532:	e0 7f       	andi	r30, 0xF0	; 240
     534:	fe 27       	eor	r31, r30
     536:	e6 0f       	add	r30, r22
     538:	f7 1f       	adc	r31, r23
     53a:	e3 0f       	add	r30, r19
     53c:	f1 1d       	adc	r31, r1
     53e:	37 fd       	sbrc	r19, 7
     540:	fa 95       	dec	r31
     542:	e2 0f       	add	r30, r18
     544:	f1 1d       	adc	r31, r1
     546:	27 fd       	sbrc	r18, 7
     548:	fa 95       	dec	r31
     54a:	40 83       	st	Z, r20
     54c:	12 96       	adiw	r26, 0x02	; 2
	
}

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i ++){
     54e:	a8 17       	cp	r26, r24
     550:	b9 07       	cpc	r27, r25
     552:	f1 f6       	brne	.-68     	; 0x510 <convertPieceToInactive+0xc>
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
	}
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <deletedAFilledRowAndSlidDown>:

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	dc 01       	movw	r26, r24
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     560:	6f e0       	ldi	r22, 0x0F	; 15
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	81 e0       	ldi	r24, 0x01	; 1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	eb 01       	movw	r28, r22
     56a:	fd 01       	movw	r30, r26
     56c:	e6 0f       	add	r30, r22
     56e:	f7 1f       	adc	r31, r23
     570:	9b 01       	movw	r18, r22
     572:	20 58       	subi	r18, 0x80	; 128
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	2a 0f       	add	r18, r26
     578:	3b 1f       	adc	r19, r27
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     57a:	48 2f       	mov	r20, r24
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     57c:	90 81       	ld	r25, Z
     57e:	91 11       	cpse	r25, r1
     580:	01 c0       	rjmp	.+2      	; 0x584 <deletedAFilledRowAndSlidDown+0x2a>
     582:	45 2f       	mov	r20, r21
     584:	70 96       	adiw	r30, 0x10	; 16

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
     586:	e2 17       	cp	r30, r18
     588:	f3 07       	cpc	r31, r19
     58a:	c1 f7       	brne	.-16     	; 0x57c <deletedAFilledRowAndSlidDown+0x22>
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
     58c:	44 23       	and	r20, r20
     58e:	21 f1       	breq	.+72     	; 0x5d8 <deletedAFilledRowAndSlidDown+0x7e>
				for(int k = i; k > 0; k--){
     590:	16 16       	cp	r1, r22
     592:	17 06       	cpc	r1, r23
     594:	3c f5       	brge	.+78     	; 0x5e4 <deletedAFilledRowAndSlidDown+0x8a>
     596:	ae 01       	movw	r20, r28
     598:	41 50       	subi	r20, 0x01	; 1
     59a:	51 09       	sbc	r21, r1
     59c:	4a 0f       	add	r20, r26
     59e:	5b 1f       	adc	r21, r27
     5a0:	bd 01       	movw	r22, r26
     5a2:	61 50       	subi	r22, 0x01	; 1
     5a4:	71 09       	sbc	r23, r1
     5a6:	0b c0       	rjmp	.+22     	; 0x5be <deletedAFilledRowAndSlidDown+0x64>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
     5a8:	90 81       	ld	r25, Z
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	70 96       	adiw	r30, 0x10	; 16
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
     5ae:	e2 17       	cp	r30, r18
     5b0:	f3 07       	cpc	r31, r19
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <deletedAFilledRowAndSlidDown+0x4e>
     5b4:	41 50       	subi	r20, 0x01	; 1
     5b6:	51 09       	sbc	r21, r1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
     5b8:	46 17       	cp	r20, r22
     5ba:	57 07       	cpc	r21, r23
     5bc:	99 f0       	breq	.+38     	; 0x5e4 <deletedAFilledRowAndSlidDown+0x8a>
     5be:	9a 01       	movw	r18, r20
     5c0:	20 58       	subi	r18, 0x80	; 128
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     5c4:	fa 01       	movw	r30, r20
     5c6:	f0 cf       	rjmp	.-32     	; 0x5a8 <deletedAFilledRowAndSlidDown+0x4e>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
					inactive->board[k][0] = 0;	
     5c8:	10 82       	st	Z, r1
     5ca:	70 96       	adiw	r30, 0x10	; 16
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
     5cc:	ae 17       	cp	r26, r30
     5ce:	bf 07       	cpc	r27, r31
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <deletedAFilledRowAndSlidDown+0x6e>
					inactive->board[k][0] = 0;	
				}
				return 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <deletedAFilledRowAndSlidDown+0x92>
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     5d8:	61 50       	subi	r22, 0x01	; 1
     5da:	71 09       	sbc	r23, r1
     5dc:	28 f6       	brcc	.-118    	; 0x568 <deletedAFilledRowAndSlidDown+0xe>
					inactive->board[k][0] = 0;	
				}
				return 1;
			}
	}
	return 0;
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <deletedAFilledRowAndSlidDown+0x92>
     5e4:	fd 01       	movw	r30, r26
     5e6:	a0 58       	subi	r26, 0x80	; 128
     5e8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ea:	ee cf       	rjmp	.-36     	; 0x5c8 <deletedAFilledRowAndSlidDown+0x6e>
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <combinePieceAndBoardIntoImage>:

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	fc 01       	movw	r30, r24
     604:	ec 01       	movw	r28, r24
     606:	c0 58       	subi	r28, 0x80	; 128
     608:	df 4f       	sbci	r29, 0xFF	; 255
     60a:	dc 01       	movw	r26, r24
     60c:	08 c0       	rjmp	.+16     	; 0x61e <combinePieceAndBoardIntoImage+0x2c>
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
     60e:	1d 92       	st	X+, r1
//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     610:	a2 17       	cp	r26, r18
     612:	b3 07       	cpc	r27, r19
     614:	e1 f7       	brne	.-8      	; 0x60e <combinePieceAndBoardIntoImage+0x1c>
     616:	d9 01       	movw	r26, r18

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
     618:	c2 17       	cp	r28, r18
     61a:	d3 07       	cpc	r29, r19
     61c:	21 f0       	breq	.+8      	; 0x626 <combinePieceAndBoardIntoImage+0x34>
     61e:	9d 01       	movw	r18, r26
     620:	20 5f       	subi	r18, 0xF0	; 240
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	f4 cf       	rjmp	.-24     	; 0x60e <combinePieceAndBoardIntoImage+0x1c>
     626:	8b 01       	movw	r16, r22
     628:	7b 01       	movw	r14, r22
     62a:	28 e0       	ldi	r18, 0x08	; 8
     62c:	e2 0e       	add	r14, r18
     62e:	f1 1c       	adc	r15, r1
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
     630:	d8 01       	movw	r26, r16
     632:	dc 90       	ld	r13, X
     634:	db 01       	movw	r26, r22
     636:	18 96       	adiw	r26, 0x08	; 8
     638:	2c 91       	ld	r18, X
     63a:	02 2e       	mov	r0, r18
     63c:	00 0c       	add	r0, r0
     63e:	33 0b       	sbc	r19, r19
     640:	2d 0d       	add	r18, r13
     642:	31 1d       	adc	r19, r1
     644:	d7 fc       	sbrc	r13, 7
     646:	3a 95       	dec	r19
     648:	d8 01       	movw	r26, r16
     64a:	11 96       	adiw	r26, 0x01	; 1
     64c:	dc 90       	ld	r13, X
     64e:	db 01       	movw	r26, r22
     650:	19 96       	adiw	r26, 0x09	; 9
     652:	cc 90       	ld	r12, X
     654:	ac 2d       	mov	r26, r12
     656:	cc 0c       	add	r12, r12
     658:	bb 0b       	sbc	r27, r27
     65a:	ad 0d       	add	r26, r13
     65c:	b1 1d       	adc	r27, r1
     65e:	d7 fc       	sbrc	r13, 7
     660:	ba 95       	dec	r27
     662:	22 95       	swap	r18
     664:	32 95       	swap	r19
     666:	30 7f       	andi	r19, 0xF0	; 240
     668:	32 27       	eor	r19, r18
     66a:	20 7f       	andi	r18, 0xF0	; 240
     66c:	32 27       	eor	r19, r18
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	a2 0f       	add	r26, r18
     674:	b3 1f       	adc	r27, r19
     676:	2c 91       	ld	r18, X
     678:	24 60       	ori	r18, 0x04	; 4
     67a:	2c 93       	st	X, r18
     67c:	0e 5f       	subi	r16, 0xFE	; 254
     67e:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
     680:	0e 15       	cp	r16, r14
     682:	1f 05       	cpc	r17, r15
     684:	a9 f6       	brne	.-86     	; 0x630 <combinePieceAndBoardIntoImage+0x3e>
     686:	64 2f       	mov	r22, r20
     688:	75 2f       	mov	r23, r21
     68a:	10 c0       	rjmp	.+32     	; 0x6ac <combinePieceAndBoardIntoImage+0xba>
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
     68c:	8d 91       	ld	r24, X+
     68e:	88 23       	and	r24, r24
     690:	19 f0       	breq	.+6      	; 0x698 <combinePieceAndBoardIntoImage+0xa6>
     692:	80 81       	ld	r24, Z
     694:	82 60       	ori	r24, 0x02	; 2
     696:	80 83       	st	Z, r24
     698:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     69a:	e2 17       	cp	r30, r18
     69c:	f3 07       	cpc	r31, r19
     69e:	b1 f7       	brne	.-20     	; 0x68c <combinePieceAndBoardIntoImage+0x9a>
     6a0:	60 5f       	subi	r22, 0xF0	; 240
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	f9 01       	movw	r30, r18
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
     6a6:	2c 17       	cp	r18, r28
     6a8:	3d 07       	cpc	r19, r29
     6aa:	29 f0       	breq	.+10     	; 0x6b6 <combinePieceAndBoardIntoImage+0xc4>
     6ac:	9f 01       	movw	r18, r30
     6ae:	20 5f       	subi	r18, 0xF0	; 240
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
	return 0;
}

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     6b2:	db 01       	movw	r26, r22
     6b4:	eb cf       	rjmp	.-42     	; 0x68c <combinePieceAndBoardIntoImage+0x9a>
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
		}
	}
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <createTetromino>:


Tetromino* createTetromino(unsigned char type){
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	18 2f       	mov	r17, r24
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
     6d0:	8a e0       	ldi	r24, 0x0A	; 10
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	f7 d4       	rcall	.+2542   	; 0x10c4 <malloc>
     6d6:	ec 01       	movw	r28, r24
     6d8:	a1 2f       	mov	r26, r17
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	aa 0f       	add	r26, r26
     6de:	bb 1f       	adc	r27, r27
     6e0:	aa 0f       	add	r26, r26
     6e2:	bb 1f       	adc	r27, r27
     6e4:	aa 0f       	add	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	a2 5f       	subi	r26, 0xF2	; 242
     6ea:	be 4f       	sbci	r27, 0xFE	; 254
     6ec:	fc 01       	movw	r30, r24
     6ee:	9c 01       	movw	r18, r24
     6f0:	28 5f       	subi	r18, 0xF8	; 248
     6f2:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i =0; i< 4;i++ ){
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
     6f4:	9c 91       	ld	r25, X
     6f6:	90 83       	st	Z, r25
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	9c 91       	ld	r25, X
     6fc:	11 97       	sbiw	r26, 0x01	; 1
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	12 96       	adiw	r26, 0x02	; 2
     702:	32 96       	adiw	r30, 0x02	; 2
}


Tetromino* createTetromino(unsigned char type){
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
	for(int i =0; i< 4;i++ ){
     704:	e2 17       	cp	r30, r18
     706:	f3 07       	cpc	r31, r19
     708:	a9 f7       	brne	.-22     	; 0x6f4 <createTetromino+0x2c>
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
		}
	}
	switch(type){
     70a:	12 30       	cpi	r17, 0x02	; 2
     70c:	a1 f0       	breq	.+40     	; 0x736 <createTetromino+0x6e>
     70e:	28 f4       	brcc	.+10     	; 0x71a <createTetromino+0x52>
     710:	11 23       	and	r17, r17
     712:	41 f0       	breq	.+16     	; 0x724 <createTetromino+0x5c>
     714:	11 30       	cpi	r17, 0x01	; 1
     716:	51 f0       	breq	.+20     	; 0x72c <createTetromino+0x64>
     718:	1d c0       	rjmp	.+58     	; 0x754 <createTetromino+0x8c>
     71a:	13 30       	cpi	r17, 0x03	; 3
     71c:	89 f0       	breq	.+34     	; 0x740 <createTetromino+0x78>
     71e:	14 30       	cpi	r17, 0x04	; 4
     720:	a1 f0       	breq	.+40     	; 0x74a <createTetromino+0x82>
     722:	18 c0       	rjmp	.+48     	; 0x754 <createTetromino+0x8c>
		case 0:
			tet->x_coordinate = 3;
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 0;
     728:	19 86       	std	Y+9, r1	; 0x09
			break;
     72a:	18 c0       	rjmp	.+48     	; 0x75c <createTetromino+0x94>
		
		case 1:
			tet->x_coordinate = 3;
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 2;
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	89 87       	std	Y+9, r24	; 0x09
		break;
     734:	13 c0       	rjmp	.+38     	; 0x75c <createTetromino+0x94>
		
		case 2:
		tet->x_coordinate = 3;
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 2;
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	89 87       	std	Y+9, r24	; 0x09
		break;
     73e:	0e c0       	rjmp	.+28     	; 0x75c <createTetromino+0x94>
		
		case 3:
		tet->x_coordinate = 3;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	89 87       	std	Y+9, r24	; 0x09
		break;
     748:	09 c0       	rjmp	.+18     	; 0x75c <createTetromino+0x94>
		
		case 4:
		tet->x_coordinate = 3;
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	89 87       	std	Y+9, r24	; 0x09
		break;
     752:	04 c0       	rjmp	.+8      	; 0x75c <createTetromino+0x94>
		
		default:
		tet->x_coordinate = 2;
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 3;
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	89 87       	std	Y+9, r24	; 0x09
		break;
		
		
	}
	return tet;
}
     75c:	ce 01       	movw	r24, r28
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	08 95       	ret

00000766 <losingDisplay>:

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
     766:	fc 01       	movw	r30, r24
     768:	ac 01       	movw	r20, r24
     76a:	40 58       	subi	r20, 0x80	; 128
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = (1 << RGB_RED_BIT);
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	08 c0       	rjmp	.+16     	; 0x782 <losingDisplay+0x1c>
     772:	21 93       	st	Z+, r18
	return tet;
}

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     774:	e8 17       	cp	r30, r24
     776:	f9 07       	cpc	r31, r25
     778:	e1 f7       	brne	.-8      	; 0x772 <losingDisplay+0xc>
     77a:	fc 01       	movw	r30, r24
	}
	return tet;
}

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
	for(int i = 0; i < 8; i++){
     77c:	48 17       	cp	r20, r24
     77e:	59 07       	cpc	r21, r25
     780:	19 f0       	breq	.+6      	; 0x788 <losingDisplay+0x22>
     782:	cf 01       	movw	r24, r30
     784:	40 96       	adiw	r24, 0x10	; 16
     786:	f5 cf       	rjmp	.-22     	; 0x772 <losingDisplay+0xc>
     788:	08 95       	ret

0000078a <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
     78a:	18 16       	cp	r1, r24
     78c:	19 06       	cpc	r1, r25
     78e:	5c f0       	brlt	.+22     	; 0x7a6 <delay_ms+0x1c>
     790:	08 95       	ret
     792:	00 00       	nop
     794:	21 50       	subi	r18, 0x01	; 1
     796:	31 09       	sbc	r19, r1
     798:	e1 f7       	brne	.-8      	; 0x792 <delay_ms+0x8>
     79a:	4f 5f       	subi	r20, 0xFF	; 255
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
     79e:	84 17       	cp	r24, r20
     7a0:	95 07       	cpc	r25, r21
     7a2:	19 f4       	brne	.+6      	; 0x7aa <delay_ms+0x20>
     7a4:	08 95       	ret
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	27 e0       	ldi	r18, 0x07	; 7
     7ac:	33 e0       	ldi	r19, 0x03	; 3
     7ae:	f1 cf       	rjmp	.-30     	; 0x792 <delay_ms+0x8>

000007b0 <LCD_WriteCommand>:
     7b0:	5e 98       	cbi	0x0b, 6	; 11
     7b2:	88 b9       	out	0x08, r24	; 8
     7b4:	5f 9a       	sbi	0x0b, 7	; 11
     7b6:	00 00       	nop
     7b8:	5f 98       	cbi	0x0b, 7	; 11
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	e5 cf       	rjmp	.-54     	; 0x78a <delay_ms>
     7c0:	08 95       	ret

000007c2 <LCD_init>:
     7c2:	84 e6       	ldi	r24, 0x64	; 100
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	e1 df       	rcall	.-62     	; 0x78a <delay_ms>
     7c8:	88 e3       	ldi	r24, 0x38	; 56
     7ca:	f2 df       	rcall	.-28     	; 0x7b0 <LCD_WriteCommand>
     7cc:	86 e0       	ldi	r24, 0x06	; 6
     7ce:	f0 df       	rcall	.-32     	; 0x7b0 <LCD_WriteCommand>
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	ee df       	rcall	.-36     	; 0x7b0 <LCD_WriteCommand>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	ec df       	rcall	.-40     	; 0x7b0 <LCD_WriteCommand>
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	d6 cf       	rjmp	.-84     	; 0x78a <delay_ms>
     7de:	08 95       	ret

000007e0 <ADC_init>:
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 6c       	ori	r24, 0xC0	; 192
     7e8:	80 83       	st	Z, r24
     7ea:	08 95       	ret

000007ec <ADC_channel>:
     7ec:	88 30       	cpi	r24, 0x08	; 8
     7ee:	48 f4       	brcc	.+18     	; 0x802 <ADC_channel+0x16>
     7f0:	ec e7       	ldi	r30, 0x7C	; 124
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	90 81       	ld	r25, Z
     7f6:	98 7f       	andi	r25, 0xF8	; 248
     7f8:	90 83       	st	Z, r25
     7fa:	90 81       	ld	r25, Z
     7fc:	87 70       	andi	r24, 0x07	; 7
     7fe:	89 2b       	or	r24, r25
     800:	80 83       	st	Z, r24
     802:	08 95       	ret

00000804 <ADC_read>:
     804:	f3 df       	rcall	.-26     	; 0x7ec <ADC_channel>
     806:	ea e7       	ldi	r30, 0x7A	; 122
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 83       	st	Z, r24
     810:	80 81       	ld	r24, Z
     812:	86 fd       	sbrc	r24, 6
     814:	fd cf       	rjmp	.-6      	; 0x810 <ADC_read+0xc>
     816:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     81e:	08 95       	ret

00000820 <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
     820:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     822:	af e0       	ldi	r26, 0x0F	; 15
     824:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
     826:	fc 01       	movw	r30, r24
     828:	0a 2e       	mov	r0, r26
     82a:	02 c0       	rjmp	.+4      	; 0x830 <writetoAll16BitShiftRegisters+0x10>
     82c:	f6 95       	lsr	r31
     82e:	e7 95       	ror	r30
     830:	0a 94       	dec	r0
     832:	e2 f7       	brpl	.-8      	; 0x82c <writetoAll16BitShiftRegisters+0xc>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
     834:	fe 2f       	mov	r31, r30
     836:	f1 70       	andi	r31, 0x01	; 1
     838:	e0 ff       	sbrs	r30, 0
     83a:	04 c0       	rjmp	.+8      	; 0x844 <writetoAll16BitShiftRegisters+0x24>
     83c:	e5 b1       	in	r30, 0x05	; 5
     83e:	ef 2b       	or	r30, r31
     840:	e5 b9       	out	0x05, r30	; 5
     842:	01 c0       	rjmp	.+2      	; 0x846 <writetoAll16BitShiftRegisters+0x26>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
     844:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
     846:	fb 01       	movw	r30, r22
     848:	0a 2e       	mov	r0, r26
     84a:	02 c0       	rjmp	.+4      	; 0x850 <writetoAll16BitShiftRegisters+0x30>
     84c:	f6 95       	lsr	r31
     84e:	e7 95       	ror	r30
     850:	0a 94       	dec	r0
     852:	e2 f7       	brpl	.-8      	; 0x84c <writetoAll16BitShiftRegisters+0x2c>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
     854:	fe 2f       	mov	r31, r30
     856:	f1 70       	andi	r31, 0x01	; 1
     858:	e0 ff       	sbrs	r30, 0
     85a:	05 c0       	rjmp	.+10     	; 0x866 <writetoAll16BitShiftRegisters+0x46>
     85c:	e5 b1       	in	r30, 0x05	; 5
     85e:	ff 0f       	add	r31, r31
     860:	fe 2b       	or	r31, r30
     862:	f5 b9       	out	0x05, r31	; 5
     864:	01 c0       	rjmp	.+2      	; 0x868 <writetoAll16BitShiftRegisters+0x48>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
     866:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
     868:	fa 01       	movw	r30, r20
     86a:	0a 2e       	mov	r0, r26
     86c:	02 c0       	rjmp	.+4      	; 0x872 <writetoAll16BitShiftRegisters+0x52>
     86e:	f6 95       	lsr	r31
     870:	e7 95       	ror	r30
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <writetoAll16BitShiftRegisters+0x4e>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
     876:	fe 2f       	mov	r31, r30
     878:	f1 70       	andi	r31, 0x01	; 1
     87a:	e0 ff       	sbrs	r30, 0
     87c:	06 c0       	rjmp	.+12     	; 0x88a <writetoAll16BitShiftRegisters+0x6a>
     87e:	e5 b1       	in	r30, 0x05	; 5
     880:	ff 0f       	add	r31, r31
     882:	ff 0f       	add	r31, r31
     884:	fe 2b       	or	r31, r30
     886:	f5 b9       	out	0x05, r31	; 5
     888:	01 c0       	rjmp	.+2      	; 0x88c <writetoAll16BitShiftRegisters+0x6c>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
     88a:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
     88c:	f9 01       	movw	r30, r18
     88e:	0a 2e       	mov	r0, r26
     890:	02 c0       	rjmp	.+4      	; 0x896 <writetoAll16BitShiftRegisters+0x76>
     892:	f6 95       	lsr	r31
     894:	e7 95       	ror	r30
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <writetoAll16BitShiftRegisters+0x72>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
     89a:	fe 2f       	mov	r31, r30
     89c:	f1 70       	andi	r31, 0x01	; 1
     89e:	e0 ff       	sbrs	r30, 0
     8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <writetoAll16BitShiftRegisters+0x90>
     8a2:	e5 b1       	in	r30, 0x05	; 5
     8a4:	ff 0f       	add	r31, r31
     8a6:	ff 0f       	add	r31, r31
     8a8:	ff 0f       	add	r31, r31
     8aa:	fe 2b       	or	r31, r30
     8ac:	f5 b9       	out	0x05, r31	; 5
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <writetoAll16BitShiftRegisters+0x92>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
     8b0:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     8b2:	ea e0       	ldi	r30, 0x0A	; 10
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
     8b6:	00 00       	nop
     8b8:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
     8ba:	e9 f7       	brne	.-6      	; 0x8b6 <writetoAll16BitShiftRegisters+0x96>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
     8bc:	2f 9a       	sbi	0x05, 7	; 5
     8be:	ea e0       	ldi	r30, 0x0A	; 10
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     8c2:	00 00       	nop
     8c4:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     8c6:	e9 f7       	brne	.-6      	; 0x8c2 <writetoAll16BitShiftRegisters+0xa2>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
     8c8:	2f 98       	cbi	0x05, 7	; 5
     8ca:	ea e0       	ldi	r30, 0x0A	; 10
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     8ce:	00 00       	nop
     8d0:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <writetoAll16BitShiftRegisters+0xae>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     8d4:	11 97       	sbiw	r26, 0x01	; 1
     8d6:	08 f0       	brcs	.+2      	; 0x8da <writetoAll16BitShiftRegisters+0xba>
     8d8:	a6 cf       	rjmp	.-180    	; 0x826 <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
     8da:	2d 9a       	sbi	0x05, 5	; 5
     8dc:	08 95       	ret

000008de <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
     8de:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	84 36       	cpi	r24, 0x64	; 100
     8e6:	91 05       	cpc	r25, r1
     8e8:	18 f4       	brcc	.+6      	; 0x8f0 <Joystick_Process_Raw+0x12>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	85 83       	std	Z+5, r24	; 0x05
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
     8f0:	89 3e       	cpi	r24, 0xE9	; 233
     8f2:	93 40       	sbci	r25, 0x03	; 3
     8f4:	18 f0       	brcs	.+6      	; 0x8fc <Joystick_Process_Raw+0x1e>
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	85 83       	std	Z+5, r24	; 0x05
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
     8fc:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	93 81       	ldd	r25, Z+3	; 0x03
     902:	84 36       	cpi	r24, 0x64	; 100
     904:	91 05       	cpc	r25, r1
     906:	18 f4       	brcc	.+6      	; 0x90e <Joystick_Process_Raw+0x30>
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	86 83       	std	Z+6, r24	; 0x06
     90c:	0a c0       	rjmp	.+20     	; 0x922 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
     90e:	89 3e       	cpi	r24, 0xE9	; 233
     910:	93 40       	sbci	r25, 0x03	; 3
     912:	18 f0       	brcs	.+6      	; 0x91a <Joystick_Process_Raw+0x3c>
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	86 83       	std	Z+6, r24	; 0x06
     918:	04 c0       	rjmp	.+8      	; 0x922 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
     91a:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
     91c:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
     91e:	16 82       	std	Z+6, r1	; 0x06
     920:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	81 11       	cpse	r24, r1
     926:	fb cf       	rjmp	.-10     	; 0x91e <Joystick_Process_Raw+0x40>
     928:	08 95       	ret

0000092a <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	68 df       	rcall	.-304    	; 0x804 <ADC_read>
     934:	99 83       	std	Y+1, r25	; 0x01
     936:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	64 df       	rcall	.-312    	; 0x804 <ADC_read>
     93c:	9b 83       	std	Y+3, r25	; 0x03
     93e:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
     940:	80 b1       	in	r24, 0x00	; 0
     942:	83 fb       	bst	r24, 3
     944:	99 27       	eor	r25, r25
     946:	90 f9       	bld	r25, 0
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	89 27       	eor	r24, r25
     94c:	8c 83       	std	Y+4, r24	; 0x04
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
     970:	87 70       	andi	r24, 0x07	; 7
	switch(column){
     972:	48 2f       	mov	r20, r24
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	fa 01       	movw	r30, r20
     978:	ea 5b       	subi	r30, 0xBA	; 186
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	77 c3       	rjmp	.+1774   	; 0x106c <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
     97e:	4f ef       	ldi	r20, 0xFF	; 255
     980:	50 e8       	ldi	r21, 0x80	; 128
     982:	14 c0       	rjmp	.+40     	; 0x9ac <pulseColumn+0x58>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
     984:	4f ef       	ldi	r20, 0xFF	; 255
     986:	50 e4       	ldi	r21, 0x40	; 64
			break;
     988:	11 c0       	rjmp	.+34     	; 0x9ac <pulseColumn+0x58>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
     98a:	4f ef       	ldi	r20, 0xFF	; 255
     98c:	50 e2       	ldi	r21, 0x20	; 32
			break;
     98e:	0e c0       	rjmp	.+28     	; 0x9ac <pulseColumn+0x58>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
     990:	4f ef       	ldi	r20, 0xFF	; 255
     992:	50 e1       	ldi	r21, 0x10	; 16
			break;
     994:	0b c0       	rjmp	.+22     	; 0x9ac <pulseColumn+0x58>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
     996:	4f ef       	ldi	r20, 0xFF	; 255
     998:	58 e0       	ldi	r21, 0x08	; 8
			break;
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <pulseColumn+0x58>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
     99c:	4f ef       	ldi	r20, 0xFF	; 255
     99e:	54 e0       	ldi	r21, 0x04	; 4
			break;
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <pulseColumn+0x58>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
     9a2:	4f ef       	ldi	r20, 0xFF	; 255
     9a4:	52 e0       	ldi	r21, 0x02	; 2
			break;
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <pulseColumn+0x58>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
     9a8:	4f ef       	ldi	r20, 0xFF	; 255
     9aa:	51 e0       	ldi	r21, 0x01	; 1
     9ac:	0f 2e       	mov	r0, r31
     9ae:	ff e0       	ldi	r31, 0x0F	; 15
     9b0:	8f 2e       	mov	r8, r31
     9b2:	91 2c       	mov	r9, r1
     9b4:	f0 2d       	mov	r31, r0
     9b6:	8c 0e       	add	r8, r28
     9b8:	9d 1e       	adc	r9, r29
     9ba:	10 e1       	ldi	r17, 0x10	; 16
     9bc:	81 9f       	mul	r24, r17
     9be:	80 0c       	add	r8, r0
     9c0:	91 1c       	adc	r9, r1
     9c2:	11 24       	eor	r1, r1
     9c4:	9a 01       	movw	r18, r20
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     9c6:	e0 e0       	ldi	r30, 0x00	; 0
     9c8:	f0 e0       	ldi	r31, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
     9ca:	6f ef       	ldi	r22, 0xFF	; 255
     9cc:	7f ef       	ldi	r23, 0xFF	; 255
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	9f ef       	ldi	r25, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     9d2:	cc 24       	eor	r12, r12
     9d4:	c3 94       	inc	r12
     9d6:	d1 2c       	mov	r13, r1
     9d8:	5f 01       	movw	r10, r30
     9da:	a8 e0       	ldi	r26, 0x08	; 8
     9dc:	aa 0e       	add	r10, r26
     9de:	b1 1c       	adc	r11, r1
     9e0:	84 01       	movw	r16, r8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
     9e2:	d4 01       	movw	r26, r8
     9e4:	18 96       	adiw	r26, 0x08	; 8
     9e6:	fc 90       	ld	r15, X
     9e8:	f0 fe       	sbrs	r15, 0
     9ea:	0c c0       	rjmp	.+24     	; 0xa04 <pulseColumn+0xb0>
     9ec:	76 01       	movw	r14, r12
     9ee:	0e 2e       	mov	r0, r30
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <pulseColumn+0xa2>
     9f2:	ee 0c       	add	r14, r14
     9f4:	ff 1c       	adc	r15, r15
     9f6:	0a 94       	dec	r0
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <pulseColumn+0x9e>
     9fa:	e0 94       	com	r14
     9fc:	f0 94       	com	r15
     9fe:	6e 21       	and	r22, r14
     a00:	7f 21       	and	r23, r15
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <pulseColumn+0xe6>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
     a04:	f2 fe       	sbrs	r15, 2
     a06:	0c c0       	rjmp	.+24     	; 0xa20 <pulseColumn+0xcc>
     a08:	76 01       	movw	r14, r12
     a0a:	0e 2e       	mov	r0, r30
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <pulseColumn+0xbe>
     a0e:	ee 0c       	add	r14, r14
     a10:	ff 1c       	adc	r15, r15
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <pulseColumn+0xba>
     a16:	e0 94       	com	r14
     a18:	f0 94       	com	r15
     a1a:	2e 21       	and	r18, r14
     a1c:	3f 21       	and	r19, r15
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <pulseColumn+0xe6>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     a20:	f1 fe       	sbrs	r15, 1
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <pulseColumn+0xe6>
     a24:	76 01       	movw	r14, r12
     a26:	0a 2c       	mov	r0, r10
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <pulseColumn+0xda>
     a2a:	ee 0c       	add	r14, r14
     a2c:	ff 1c       	adc	r15, r15
     a2e:	0a 94       	dec	r0
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <pulseColumn+0xd6>
     a32:	e0 94       	com	r14
     a34:	f0 94       	com	r15
     a36:	6e 21       	and	r22, r14
     a38:	7f 21       	and	r23, r15
		
		//matrix 1			
		if(frame.frame[column][i] & (1 << RGB_RED_BIT)){register1 &= ~(1 << i);}
     a3a:	d8 01       	movw	r26, r16
     a3c:	1c 91       	ld	r17, X
     a3e:	bf ef       	ldi	r27, 0xFF	; 255
     a40:	8b 1a       	sub	r8, r27
     a42:	9b 0a       	sbc	r9, r27
     a44:	10 ff       	sbrs	r17, 0
     a46:	0c c0       	rjmp	.+24     	; 0xa60 <pulseColumn+0x10c>
     a48:	86 01       	movw	r16, r12
     a4a:	0e 2e       	mov	r0, r30
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <pulseColumn+0xfe>
     a4e:	00 0f       	add	r16, r16
     a50:	11 1f       	adc	r17, r17
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <pulseColumn+0xfa>
     a56:	00 95       	com	r16
     a58:	10 95       	com	r17
     a5a:	80 23       	and	r24, r16
     a5c:	91 23       	and	r25, r17
     a5e:	1a c0       	rjmp	.+52     	; 0xa94 <pulseColumn+0x140>
		
		else if(frame.frame[column][i] & (1 << RGB_GREEN_BIT)){register3 &= ~(1 << i); }
     a60:	12 ff       	sbrs	r17, 2
     a62:	0c c0       	rjmp	.+24     	; 0xa7c <pulseColumn+0x128>
     a64:	86 01       	movw	r16, r12
     a66:	0e 2e       	mov	r0, r30
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <pulseColumn+0x11a>
     a6a:	00 0f       	add	r16, r16
     a6c:	11 1f       	adc	r17, r17
     a6e:	0a 94       	dec	r0
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <pulseColumn+0x116>
     a72:	00 95       	com	r16
     a74:	10 95       	com	r17
     a76:	40 23       	and	r20, r16
     a78:	51 23       	and	r21, r17
     a7a:	0c c0       	rjmp	.+24     	; 0xa94 <pulseColumn+0x140>

		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
     a7c:	11 ff       	sbrs	r17, 1
     a7e:	0a c0       	rjmp	.+20     	; 0xa94 <pulseColumn+0x140>
     a80:	86 01       	movw	r16, r12
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <pulseColumn+0x134>
     a84:	00 0f       	add	r16, r16
     a86:	11 1f       	adc	r17, r17
     a88:	aa 94       	dec	r10
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <pulseColumn+0x130>
     a8c:	00 95       	com	r16
     a8e:	10 95       	com	r17
     a90:	80 23       	and	r24, r16
     a92:	91 23       	and	r25, r17
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     a94:	31 96       	adiw	r30, 0x01	; 1
     a96:	e8 30       	cpi	r30, 0x08	; 8
     a98:	f1 05       	cpc	r31, r1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <pulseColumn+0x14a>
		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
     a9c:	9d cf       	rjmp	.-198    	; 0x9d8 <pulseColumn+0x84>
     a9e:	c0 de       	rcall	.-640    	; 0x820 <writetoAll16BitShiftRegisters>
		
	
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	9f 90       	pop	r9
     ab6:	8f 90       	pop	r8
     ab8:	08 95       	ret

00000aba <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     aba:	8b e0       	ldi	r24, 0x0B	; 11
     abc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ac0:	8d e7       	ldi	r24, 0x7D	; 125
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ac8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     ad2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ad6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ada:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     ade:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     ae2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     ae6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     aea:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     aee:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     af2:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     af6:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
     afa:	8f b7       	in	r24, 0x3f	; 63
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	8f bf       	out	0x3f, r24	; 63
     b00:	08 95       	ret

00000b02 <__vector_13>:
}

//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
	_avr_timer_cntcurr--;
     b14:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
     b18:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
     b1c:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
     b20:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	a1 09       	sbc	r26, r1
     b28:	b1 09       	sbc	r27, r1
     b2a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     b2e:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     b32:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     b36:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
     b3a:	89 2b       	or	r24, r25
     b3c:	8a 2b       	or	r24, r26
     b3e:	8b 2b       	or	r24, r27
     b40:	99 f4       	brne	.+38     	; 0xb68 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
     b48:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     b4c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     b50:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     b54:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     b58:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     b5c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     b60:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     b64:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	}
}
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
     b7a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_M>
     b7e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_M+0x1>
     b82:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_M+0x2>
     b86:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     b8a:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <_avr_timer_cntcurr>
     b8e:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <_avr_timer_cntcurr+0x1>
     b92:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_avr_timer_cntcurr+0x2>
     b96:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_avr_timer_cntcurr+0x3>
     b9a:	08 95       	ret

00000b9c <Joystick_Tick>:
}

              
void Joystick_Tick(){
	static int count = 0;
	if (count == 100){
     b9c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <count.1911>
     ba0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <count.1911+0x1>
     ba4:	84 36       	cpi	r24, 0x64	; 100
     ba6:	91 05       	cpc	r25, r1
     ba8:	f9 f4       	brne	.+62     	; 0xbe8 <Joystick_Tick+0x4c>
		Joystick_Read(nextJoystickFramePtr);
     baa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     bae:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     bb2:	bb de       	rcall	.-650    	; 0x92a <Joystick_Read>
		Joystick_Process_Raw(nextJoystickFramePtr);
     bb4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     bb8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     bbc:	90 de       	rcall	.-736    	; 0x8de <Joystick_Process_Raw>
		//COPY POINTER BEFORE SWAPPING
		Joystick_Frame* temp = currentJoystickFramePtr;
     bbe:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <currentJoystickFramePtr>
     bc2:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
		//SWAP BUFFER
		currentJoystickFramePtr = nextJoystickFramePtr;
     bc6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <nextJoystickFramePtr>
     bca:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     bce:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <currentJoystickFramePtr+0x1>
     bd2:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <currentJoystickFramePtr>
		nextJoystickFramePtr = temp;
     bd6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
     bda:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
		count = 0;
     bde:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <count.1911+0x1>
     be2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <count.1911>
     be6:	08 95       	ret
	}
	else{count++; return;}
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <count.1911+0x1>
     bee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <count.1911>
     bf2:	08 95       	ret

00000bf4 <LED_Tick>:
	//READ + POPULATE always into the next frame before swapping buffer
}
			                                                                                        
void LED_Tick(){
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	c0 58       	subi	r28, 0x80	; 128
     bfe:	d1 09       	sbc	r29, r1
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
	static int count = 0;
	//update frame every 8 ms
	if(count == 20){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
     c0a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1915>
     c0e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1915+0x1>
     c12:	44 97       	sbiw	r24, 0x14	; 20
     c14:	29 f5       	brne	.+74     	; 0xc60 <LED_Tick+0x6c>
     c16:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <current_RGB_FramePtr>
     c1a:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     c1e:	80 e8       	ldi	r24, 0x80	; 128
     c20:	f9 01       	movw	r30, r18
     c22:	de 01       	movw	r26, r28
     c24:	11 96       	adiw	r26, 0x01	; 1
     c26:	01 90       	ld	r0, Z+
     c28:	0d 92       	st	X+, r0
     c2a:	8a 95       	dec	r24
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <LED_Tick+0x32>
		*current_RGB_FramePtr = *next_RGB_FramePtr;
     c2e:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <next_RGB_FramePtr>
     c32:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     c36:	80 e8       	ldi	r24, 0x80	; 128
     c38:	d9 01       	movw	r26, r18
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
     c40:	e1 f7       	brne	.-8      	; 0xc3a <LED_Tick+0x46>
		*next_RGB_FramePtr = tmpFrame;
     c42:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <next_RGB_FramePtr>
     c46:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     c4a:	80 e8       	ldi	r24, 0x80	; 128
     c4c:	fe 01       	movw	r30, r28
     c4e:	31 96       	adiw	r30, 0x01	; 1
     c50:	01 90       	ld	r0, Z+
     c52:	0d 92       	st	X+, r0
     c54:	8a 95       	dec	r24
     c56:	e1 f7       	brne	.-8      	; 0xc50 <LED_Tick+0x5c>
		count = 0;
     c58:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <count.1915+0x1>
     c5c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count.1915>
	}
	pulseColumn(count++, *current_RGB_FramePtr);
     c60:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <current_RGB_FramePtr>
     c64:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     c68:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1915>
     c6c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1915+0x1>
     c70:	9c 01       	movw	r18, r24
     c72:	2f 5f       	subi	r18, 0xFF	; 255
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <count.1915+0x1>
     c7a:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <count.1915>
     c7e:	2d b7       	in	r18, 0x3d	; 61
     c80:	3e b7       	in	r19, 0x3e	; 62
     c82:	20 58       	subi	r18, 0x80	; 128
     c84:	31 09       	sbc	r19, r1
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	3e bf       	out	0x3e, r19	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	2d bf       	out	0x3d, r18	; 61
     c90:	ad b7       	in	r26, 0x3d	; 61
     c92:	be b7       	in	r27, 0x3e	; 62
     c94:	11 96       	adiw	r26, 0x01	; 1
     c96:	90 e8       	ldi	r25, 0x80	; 128
     c98:	01 90       	ld	r0, Z+
     c9a:	0d 92       	st	X+, r0
     c9c:	9a 95       	dec	r25
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <LED_Tick+0xa4>
     ca0:	59 de       	rcall	.-846    	; 0x954 <pulseColumn>
	
}
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	c0 58       	subi	r28, 0x80	; 128
     cae:	df 4f       	sbci	r29, 0xFF	; 255
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <Gamestate_Tick>:

	
void Gamestate_Tick(){
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
	static int count = 0;
	count++;
     cd0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     cd4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
     cde:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	if(count == 1000){
     ce2:	88 3e       	cpi	r24, 0xE8	; 232
     ce4:	23 e0       	ldi	r18, 0x03	; 3
     ce6:	92 07       	cpc	r25, r18
     ce8:	91 f4       	brne	.+36     	; 0xd0e <Gamestate_Tick+0x4e>
		checkDownAndDo(activeTile,board);//move down 1 square every second;
     cea:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     cee:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     cf2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     cf6:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     cfa:	ef d9       	rcall	.-3106   	; 0xda <checkDownAndDo>
		count = 0;//reset count
     cfc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
     d00:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	}
	if(!lostYet){
     d04:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <lostYet>
     d08:	88 23       	and	r24, r24
     d0a:	b9 f0       	breq	.+46     	; 0xd3a <Gamestate_Tick+0x7a>
     d0c:	e7 c0       	rjmp	.+462    	; 0xedc <Gamestate_Tick+0x21c>
     d0e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <lostYet>
     d12:	21 11       	cpse	r18, r1
     d14:	e3 c0       	rjmp	.+454    	; 0xedc <Gamestate_Tick+0x21c>
		if(count == 200 
     d16:	88 3c       	cpi	r24, 0xC8	; 200
     d18:	91 05       	cpc	r25, r1
     d1a:	79 f0       	breq	.+30     	; 0xd3a <Gamestate_Tick+0x7a>
		|| count == 400 
     d1c:	80 39       	cpi	r24, 0x90	; 144
     d1e:	a1 e0       	ldi	r26, 0x01	; 1
     d20:	9a 07       	cpc	r25, r26
     d22:	59 f0       	breq	.+22     	; 0xd3a <Gamestate_Tick+0x7a>
		|| count == 600 
     d24:	88 35       	cpi	r24, 0x58	; 88
     d26:	b2 e0       	ldi	r27, 0x02	; 2
     d28:	9b 07       	cpc	r25, r27
     d2a:	39 f0       	breq	.+14     	; 0xd3a <Gamestate_Tick+0x7a>
		|| count == 800 
     d2c:	80 32       	cpi	r24, 0x20	; 32
     d2e:	e3 e0       	ldi	r30, 0x03	; 3
     d30:	9e 07       	cpc	r25, r30
     d32:	19 f0       	breq	.+6      	; 0xd3a <Gamestate_Tick+0x7a>
		|| count == 0){
     d34:	89 2b       	or	r24, r25
     d36:	09 f0       	breq	.+2      	; 0xd3a <Gamestate_Tick+0x7a>
     d38:	36 c1       	rjmp	.+620    	; 0xfa6 <Gamestate_Tick+0x2e6>
			 //switch based on joystick 
			 //up
				if(currentJoystickFramePtr->Y_direction == UP){
     d3a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
     d3e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
     d42:	86 81       	ldd	r24, Z+6	; 0x06
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	21 f1       	breq	.+72     	; 0xd90 <Gamestate_Tick+0xd0>
// 					checkRotateAndDo(activeTile,board);
// 					checkRotateAndDo(activeTile,board);
// 					checkRotateAndDo(activeTile,board);
				}
			//down
				else if(currentJoystickFramePtr->Y_direction == DOWN){
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	51 f4       	brne	.+20     	; 0xd60 <Gamestate_Tick+0xa0>
					checkDownAndDo(activeTile,board);
     d4c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     d50:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     d54:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     d58:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     d5c:	be d9       	rcall	.-3204   	; 0xda <checkDownAndDo>
     d5e:	18 c0       	rjmp	.+48     	; 0xd90 <Gamestate_Tick+0xd0>
				}
	// 		//right
 				else if(currentJoystickFramePtr->X_direction== RIGHT){checkRightAndDo(activeTile,board);}	
     d60:	85 81       	ldd	r24, Z+5	; 0x05
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	51 f4       	brne	.+20     	; 0xd7a <Gamestate_Tick+0xba>
     d66:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     d6a:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     d6e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     d72:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     d76:	38 db       	rcall	.-2448   	; 0x3e8 <checkRightAndDo>
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <Gamestate_Tick+0xd0>
	// 		//left
 				else if(currentJoystickFramePtr->X_direction== LEFT){checkLeftAndDo(activeTile,board);} 
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	49 f4       	brne	.+18     	; 0xd90 <Gamestate_Tick+0xd0>
     d7e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     d82:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     d86:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     d8a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     d8e:	b5 da       	rcall	.-2710   	; 0x2fa <checkLeftAndDo>
				if(currentJoystickFramePtr->click){checkRotateAndDo(activeTile,board);}
     d90:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
     d94:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
     d98:	84 81       	ldd	r24, Z+4	; 0x04
     d9a:	88 23       	and	r24, r24
     d9c:	49 f0       	breq	.+18     	; 0xdb0 <Gamestate_Tick+0xf0>
     d9e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     da2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     da6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     daa:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     dae:	0b da       	rcall	.-3050   	; 0x1c6 <checkRotateAndDo>
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
     db0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
     db4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     db8:	8e db       	rcall	.-2276   	; 0x4d6 <checkLoss>
     dba:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <lostYet>
     dbe:	c0 91 69 01 	lds	r28, 0x0169	; 0x800169 <activeTile>
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     dc2:	d0 91 6a 01 	lds	r29, 0x016A	; 0x80016a <activeTile+0x1>
     dc6:	a9 85       	ldd	r26, Y+9	; 0x09
     dc8:	ca 2e       	mov	r12, r26
     dca:	aa 0f       	add	r26, r26
     dcc:	dd 08       	sbc	r13, r13
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	a6 01       	movw	r20, r12
     dd2:	48 0f       	add	r20, r24
     dd4:	51 1d       	adc	r21, r1
     dd6:	87 fd       	sbrc	r24, 7
     dd8:	5a 95       	dec	r21
     dda:	4f 30       	cpi	r20, 0x0F	; 15
					if(y_coord == 15){
     ddc:	51 05       	cpc	r21, r1
     dde:	51 f1       	breq	.+84     	; 0xe34 <Gamestate_Tick+0x174>
     de0:	88 85       	ldd	r24, Y+8	; 0x08
						convertPieceToInactive(activeTile, board);
						free(activeTile);
						activeTile = createTetromino(rand()%5); 
						break;
					}
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
     de2:	08 2e       	mov	r0, r24
     de4:	00 0c       	add	r0, r0
     de6:	99 0b       	sbc	r25, r25
     de8:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
					if(board->board[x_coord][y_coord + 1]){
     dec:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     df0:	28 81       	ld	r18, Y
     df2:	7c 01       	movw	r14, r24
     df4:	e2 0e       	add	r14, r18
     df6:	f1 1c       	adc	r15, r1
     df8:	27 fd       	sbrc	r18, 7
     dfa:	fa 94       	dec	r15
     dfc:	97 01       	movw	r18, r14
     dfe:	22 95       	swap	r18
     e00:	32 95       	swap	r19
     e02:	30 7f       	andi	r19, 0xF0	; 240
     e04:	32 27       	eor	r19, r18
     e06:	20 7f       	andi	r18, 0xF0	; 240
     e08:	32 27       	eor	r19, r18
     e0a:	26 0f       	add	r18, r22
     e0c:	37 1f       	adc	r19, r23
     e0e:	f9 01       	movw	r30, r18
     e10:	e4 0f       	add	r30, r20
     e12:	f5 1f       	adc	r31, r21
     e14:	21 81       	ldd	r18, Z+1	; 0x01
     e16:	21 11       	cpse	r18, r1
     e18:	38 c0       	rjmp	.+112    	; 0xe8a <Gamestate_Tick+0x1ca>
     e1a:	fe 01       	movw	r30, r28
     e1c:	8e 01       	movw	r16, r28
     e1e:	0a 5f       	subi	r16, 0xFA	; 250
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	23 81       	ldd	r18, Z+3	; 0x03
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     e24:	a6 01       	movw	r20, r12
     e26:	42 0f       	add	r20, r18
     e28:	51 1d       	adc	r21, r1
     e2a:	27 fd       	sbrc	r18, 7
     e2c:	5a 95       	dec	r21
     e2e:	4f 30       	cpi	r20, 0x0F	; 15
					if(y_coord == 15){
     e30:	51 05       	cpc	r21, r1
     e32:	a9 f4       	brne	.+42     	; 0xe5e <Gamestate_Tick+0x19e>
						convertPieceToInactive(activeTile, board);
     e34:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e38:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e3c:	ce 01       	movw	r24, r28
						free(activeTile);
     e3e:	62 db       	rcall	.-2364   	; 0x504 <convertPieceToInactive>
     e40:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e44:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
						activeTile = createTetromino(rand()%5); 
     e48:	d5 d1       	rcall	.+938    	; 0x11f4 <free>
     e4a:	a4 d2       	rcall	.+1352   	; 0x1394 <rand>
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	fa d0       	rcall	.+500    	; 0x1046 <__divmodhi4>
     e52:	3a dc       	rcall	.-1932   	; 0x6c8 <createTetromino>
     e54:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     e58:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     e5c:	2c c0       	rjmp	.+88     	; 0xeb6 <Gamestate_Tick+0x1f6>
						break;
     e5e:	22 81       	ldd	r18, Z+2	; 0x02
					}
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
					if(board->board[x_coord][y_coord + 1]){
     e60:	dc 01       	movw	r26, r24
     e62:	a2 0f       	add	r26, r18
     e64:	b1 1d       	adc	r27, r1
     e66:	27 fd       	sbrc	r18, 7
     e68:	ba 95       	dec	r27
     e6a:	9d 01       	movw	r18, r26
     e6c:	22 95       	swap	r18
     e6e:	32 95       	swap	r19
     e70:	30 7f       	andi	r19, 0xF0	; 240
     e72:	32 27       	eor	r19, r18
     e74:	20 7f       	andi	r18, 0xF0	; 240
     e76:	32 27       	eor	r19, r18
     e78:	26 0f       	add	r18, r22
     e7a:	37 1f       	adc	r19, r23
     e7c:	24 0f       	add	r18, r20
     e7e:	35 1f       	adc	r19, r21
     e80:	d9 01       	movw	r26, r18
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	2c 91       	ld	r18, X
						convertPieceToInactive(activeTile, board); 
     e86:	22 23       	and	r18, r18
     e88:	89 f0       	breq	.+34     	; 0xeac <Gamestate_Tick+0x1ec>
						free(activeTile);
     e8a:	ce 01       	movw	r24, r28
     e8c:	3b db       	rcall	.-2442   	; 0x504 <convertPieceToInactive>
     e8e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e92:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
						activeTile = createTetromino(rand()%5); 
     e96:	ae d1       	rcall	.+860    	; 0x11f4 <free>
     e98:	7d d2       	rcall	.+1274   	; 0x1394 <rand>
     e9a:	65 e0       	ldi	r22, 0x05	; 5
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	d3 d0       	rcall	.+422    	; 0x1046 <__divmodhi4>
     ea0:	13 dc       	rcall	.-2010   	; 0x6c8 <createTetromino>
     ea2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     ea6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <Gamestate_Tick+0x1f6>
						break;
     eac:	32 96       	adiw	r30, 0x02	; 2
     eae:	0e 17       	cp	r16, r30
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
     eb0:	1f 07       	cpc	r17, r31
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <Gamestate_Tick+0x1f6>
     eb4:	b6 cf       	rjmp	.-148    	; 0xe22 <Gamestate_Tick+0x162>
     eb6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
						activeTile = createTetromino(rand()%5); 
						break;
					}
				}
				//check for a row to be deleted	
				deletedAFilledRowAndSlidDown(board);
     eba:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     ebe:	4d db       	rcall	.-2406   	; 0x55a <deletedAFilledRowAndSlidDown>
     ec0:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <board>
				combinePieceAndBoardIntoImage(next_RGB_FramePtr, activeTile, board);
     ec4:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <board+0x1>
     ec8:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <activeTile>
     ecc:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <activeTile+0x1>
     ed0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <next_RGB_FramePtr>
     ed4:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     ed8:	8c db       	rcall	.-2280   	; 0x5f2 <combinePieceAndBoardIntoImage>
     eda:	65 c0       	rjmp	.+202    	; 0xfa6 <Gamestate_Tick+0x2e6>
     edc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <next_RGB_FramePtr>
				
				
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
     ee0:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     ee4:	40 dc       	rcall	.-1920   	; 0x766 <losingDisplay>
     ee6:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
		if(currentJoystickFramePtr->click){
     eea:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <Gamestate_Tick+0x236>
     ef4:	58 c0       	rjmp	.+176    	; 0xfa6 <Gamestate_Tick+0x2e6>
     ef6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <lostYet>
			lostYet = 0;
			for(int i = 0; i < 8; i++){
     efa:	e1 2c       	mov	r14, r1
     efc:	f1 2c       	mov	r15, r1
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
     efe:	05 e0       	ldi	r16, 0x05	; 5
     f00:	10 e0       	ldi	r17, 0x00	; 0
     f02:	1f c0       	rjmp	.+62     	; 0xf42 <Gamestate_Tick+0x282>
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
     f04:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <board>
     f08:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <board+0x1>
     f0c:	ec 0f       	add	r30, r28
     f0e:	fd 1f       	adc	r31, r29
     f10:	ec 0d       	add	r30, r12
     f12:	fd 1d       	adc	r31, r13
     f14:	10 82       	st	Z, r1
					activeTile = createTetromino(rand()%5);
     f16:	3e d2       	rcall	.+1148   	; 0x1394 <rand>
     f18:	b8 01       	movw	r22, r16
     f1a:	95 d0       	rcall	.+298    	; 0x1046 <__divmodhi4>
     f1c:	d5 db       	rcall	.-2134   	; 0x6c8 <createTetromino>
     f1e:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     f22:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     f26:	bf ef       	ldi	r27, 0xFF	; 255
     f28:	cb 1a       	sub	r12, r27
     f2a:	db 0a       	sbc	r13, r27
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
     f2c:	e0 e1       	ldi	r30, 0x10	; 16
     f2e:	ce 16       	cp	r12, r30
     f30:	d1 04       	cpc	r13, r1
     f32:	41 f7       	brne	.-48     	; 0xf04 <Gamestate_Tick+0x244>
     f34:	ff ef       	ldi	r31, 0xFF	; 255
     f36:	ef 1a       	sub	r14, r31
     f38:	ff 0a       	sbc	r15, r31
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	e2 16       	cp	r14, r18
     f3e:	f1 04       	cpc	r15, r1
     f40:	31 f1       	breq	.+76     	; 0xf8e <Gamestate_Tick+0x2ce>
     f42:	c1 2c       	mov	r12, r1
     f44:	d1 2c       	mov	r13, r1
     f46:	e7 01       	movw	r28, r14
	pulseColumn(count++, *current_RGB_FramePtr);
	
}

	
void Gamestate_Tick(){
     f48:	c2 95       	swap	r28
     f4a:	d2 95       	swap	r29
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
     f4c:	d0 7f       	andi	r29, 0xF0	; 240
     f4e:	dc 27       	eor	r29, r28
     f50:	c0 7f       	andi	r28, 0xF0	; 240
     f52:	dc 27       	eor	r29, r28
     f54:	d7 cf       	rjmp	.-82     	; 0xf04 <Gamestate_Tick+0x244>
     f56:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <next_RGB_FramePtr>
     f5a:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					next_RGB_FramePtr->frame[i][j] = 0;
     f5e:	e2 0f       	add	r30, r18
     f60:	f3 1f       	adc	r31, r19
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	10 82       	st	Z, r1
     f68:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <current_RGB_FramePtr>
     f6c:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
					current_RGB_FramePtr->frame[i][j] = 0;
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	e8 0f       	add	r30, r24
     f76:	f9 1f       	adc	r31, r25
     f78:	10 82       	st	Z, r1
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	80 31       	cpi	r24, 0x10	; 16
     f7e:	91 05       	cpc	r25, r1
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
     f80:	51 f7       	brne	.-44     	; 0xf56 <Gamestate_Tick+0x296>
     f82:	4f 5f       	subi	r20, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	48 30       	cpi	r20, 0x08	; 8
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
     f88:	51 05       	cpc	r21, r1
     f8a:	19 f4       	brne	.+6      	; 0xf92 <Gamestate_Tick+0x2d2>
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <Gamestate_Tick+0x2e6>
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9a 01       	movw	r18, r20
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
     f98:	22 95       	swap	r18
     f9a:	32 95       	swap	r19
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					next_RGB_FramePtr->frame[i][j] = 0;
     f9c:	30 7f       	andi	r19, 0xF0	; 240
     f9e:	32 27       	eor	r19, r18
     fa0:	20 7f       	andi	r18, 0xF0	; 240
     fa2:	32 27       	eor	r19, r18
     fa4:	d8 cf       	rjmp	.-80     	; 0xf56 <Gamestate_Tick+0x296>
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
			
		}
		
	
	}
}
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	08 95       	ret

00000fb8 <main>:
     fb8:	11 b8       	out	0x01, r1	; 1
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	82 b9       	out	0x02, r24	; 2
int main(void)
{
	DDRA = 0x00;
	PORTA = 0xFF;
	
	DDRB = 0xFF;
     fbe:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     fc0:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
     fc2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     fc4:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
     fc6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
     fc8:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
     fca:	0a dc       	rcall	.-2028   	; 0x7e0 <ADC_init>
	LCD_init();
     fcc:	fa db       	rcall	.-2060   	; 0x7c2 <LCD_init>
     fce:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	78 d0       	rcall	.+240    	; 0x10c4 <malloc>
     fd4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <currentJoystickFramePtr+0x1>
     fd8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <currentJoystickFramePtr>
     fdc:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	71 d0       	rcall	.+226    	; 0x10c4 <malloc>
     fe2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
     fe6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
     fea:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	6a d0       	rcall	.+212    	; 0x10c4 <malloc>
     ff0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <current_RGB_FramePtr+0x1>
     ff4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <current_RGB_FramePtr>
     ff8:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	63 d0       	rcall	.+198    	; 0x10c4 <malloc>
     ffe:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <next_RGB_FramePtr+0x1>
    1002:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <next_RGB_FramePtr>
    1006:	80 e8       	ldi	r24, 0x80	; 128
	
	board = (Gameboard*) malloc(sizeof(Gameboard));
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	5c d0       	rcall	.+184    	; 0x10c4 <malloc>
    100c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <board+0x1>
    1010:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <board>
	activeTile = createTetromino(rand()%5);
    1014:	bf d1       	rcall	.+894    	; 0x1394 <rand>
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	15 d0       	rcall	.+42     	; 0x1046 <__divmodhi4>
    101c:	55 db       	rcall	.-2390   	; 0x6c8 <createTetromino>
    101e:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
    1022:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
	
	//timing
	TimerSet(1);
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a5 dd       	rcall	.-1206   	; 0xb7a <TimerSet>
	TimerOn();
    1030:	44 dd       	rcall	.-1400   	; 0xaba <TimerOn>
    1032:	b4 dd       	rcall	.-1176   	; 0xb9c <Joystick_Tick>
    while (1){
		Joystick_Tick();
    1034:	45 de       	rcall	.-886    	; 0xcc0 <Gamestate_Tick>
    1036:	de dd       	rcall	.-1092   	; 0xbf4 <LED_Tick>
		Gamestate_Tick(); 
    1038:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TimerFlag>
		LED_Tick();
    103c:	88 23       	and	r24, r24
    103e:	e1 f3       	breq	.-8      	; 0x1038 <main+0x80>
		while(!TimerFlag);
    1040:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <TimerFlag>
    1044:	f6 cf       	rjmp	.-20     	; 0x1032 <main+0x7a>

00001046 <__divmodhi4>:
    1046:	97 fb       	bst	r25, 7
		TimerFlag = 0;
    1048:	07 2e       	mov	r0, r23
    104a:	16 f4       	brtc	.+4      	; 0x1050 <__divmodhi4+0xa>
    }
    104c:	00 94       	com	r0
    104e:	06 d0       	rcall	.+12     	; 0x105c <__divmodhi4_neg1>
    1050:	77 fd       	sbrc	r23, 7
    1052:	08 d0       	rcall	.+16     	; 0x1064 <__divmodhi4_neg2>
    1054:	23 d0       	rcall	.+70     	; 0x109c <__udivmodhi4>
    1056:	07 fc       	sbrc	r0, 7
    1058:	05 d0       	rcall	.+10     	; 0x1064 <__divmodhi4_neg2>
    105a:	3e f4       	brtc	.+14     	; 0x106a <__divmodhi4_exit>

0000105c <__divmodhi4_neg1>:
    105c:	90 95       	com	r25
    105e:	81 95       	neg	r24
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	08 95       	ret

00001064 <__divmodhi4_neg2>:
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255

0000106a <__divmodhi4_exit>:
    106a:	08 95       	ret

0000106c <__tablejump2__>:
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	00 24       	eor	r0, r0
    1072:	00 1c       	adc	r0, r0
    1074:	0b be       	out	0x3b, r0	; 59
    1076:	07 90       	elpm	r0, Z+
    1078:	f6 91       	elpm	r31, Z
    107a:	e0 2d       	mov	r30, r0
    107c:	09 94       	ijmp

0000107e <__umulhisi3>:
    107e:	a2 9f       	mul	r26, r18
    1080:	b0 01       	movw	r22, r0
    1082:	b3 9f       	mul	r27, r19
    1084:	c0 01       	movw	r24, r0
    1086:	a3 9f       	mul	r26, r19
    1088:	70 0d       	add	r23, r0
    108a:	81 1d       	adc	r24, r1
    108c:	11 24       	eor	r1, r1
    108e:	91 1d       	adc	r25, r1
    1090:	b2 9f       	mul	r27, r18
    1092:	70 0d       	add	r23, r0
    1094:	81 1d       	adc	r24, r1
    1096:	11 24       	eor	r1, r1
    1098:	91 1d       	adc	r25, r1
    109a:	08 95       	ret

0000109c <__udivmodhi4>:
    109c:	aa 1b       	sub	r26, r26
    109e:	bb 1b       	sub	r27, r27
    10a0:	51 e1       	ldi	r21, 0x11	; 17
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <__udivmodhi4_ep>

000010a4 <__udivmodhi4_loop>:
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	a6 17       	cp	r26, r22
    10aa:	b7 07       	cpc	r27, r23
    10ac:	10 f0       	brcs	.+4      	; 0x10b2 <__udivmodhi4_ep>
    10ae:	a6 1b       	sub	r26, r22
    10b0:	b7 0b       	sbc	r27, r23

000010b2 <__udivmodhi4_ep>:
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	5a 95       	dec	r21
    10b8:	a9 f7       	brne	.-22     	; 0x10a4 <__udivmodhi4_loop>
    10ba:	80 95       	com	r24
    10bc:	90 95       	com	r25
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	08 95       	ret

000010c4 <malloc>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	91 05       	cpc	r25, r1
    10d0:	10 f4       	brcc	.+4      	; 0x10d6 <malloc+0x12>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__flp>
    10da:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__flp+0x1>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	19 f1       	breq	.+70     	; 0x1130 <malloc+0x6c>
    10ea:	40 81       	ld	r20, Z
    10ec:	51 81       	ldd	r21, Z+1	; 0x01
    10ee:	02 81       	ldd	r16, Z+2	; 0x02
    10f0:	13 81       	ldd	r17, Z+3	; 0x03
    10f2:	48 17       	cp	r20, r24
    10f4:	59 07       	cpc	r21, r25
    10f6:	c8 f0       	brcs	.+50     	; 0x112a <malloc+0x66>
    10f8:	84 17       	cp	r24, r20
    10fa:	95 07       	cpc	r25, r21
    10fc:	69 f4       	brne	.+26     	; 0x1118 <malloc+0x54>
    10fe:	10 97       	sbiw	r26, 0x00	; 0
    1100:	31 f0       	breq	.+12     	; 0x110e <malloc+0x4a>
    1102:	12 96       	adiw	r26, 0x02	; 2
    1104:	0c 93       	st	X, r16
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	13 96       	adiw	r26, 0x03	; 3
    110a:	1c 93       	st	X, r17
    110c:	27 c0       	rjmp	.+78     	; 0x115c <malloc+0x98>
    110e:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <__flp>
    1112:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <__flp+0x1>
    1116:	22 c0       	rjmp	.+68     	; 0x115c <malloc+0x98>
    1118:	21 15       	cp	r18, r1
    111a:	31 05       	cpc	r19, r1
    111c:	19 f0       	breq	.+6      	; 0x1124 <malloc+0x60>
    111e:	42 17       	cp	r20, r18
    1120:	53 07       	cpc	r21, r19
    1122:	18 f4       	brcc	.+6      	; 0x112a <malloc+0x66>
    1124:	9a 01       	movw	r18, r20
    1126:	bd 01       	movw	r22, r26
    1128:	ef 01       	movw	r28, r30
    112a:	df 01       	movw	r26, r30
    112c:	f8 01       	movw	r30, r16
    112e:	db cf       	rjmp	.-74     	; 0x10e6 <malloc+0x22>
    1130:	21 15       	cp	r18, r1
    1132:	31 05       	cpc	r19, r1
    1134:	f9 f0       	breq	.+62     	; 0x1174 <malloc+0xb0>
    1136:	28 1b       	sub	r18, r24
    1138:	39 0b       	sbc	r19, r25
    113a:	24 30       	cpi	r18, 0x04	; 4
    113c:	31 05       	cpc	r19, r1
    113e:	80 f4       	brcc	.+32     	; 0x1160 <malloc+0x9c>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	61 15       	cp	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	21 f0       	breq	.+8      	; 0x1152 <malloc+0x8e>
    114a:	fb 01       	movw	r30, r22
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	82 83       	std	Z+2, r24	; 0x02
    1150:	04 c0       	rjmp	.+8      	; 0x115a <malloc+0x96>
    1152:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__flp+0x1>
    1156:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__flp>
    115a:	fe 01       	movw	r30, r28
    115c:	32 96       	adiw	r30, 0x02	; 2
    115e:	44 c0       	rjmp	.+136    	; 0x11e8 <malloc+0x124>
    1160:	fe 01       	movw	r30, r28
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	81 93       	st	Z+, r24
    1168:	91 93       	st	Z+, r25
    116a:	22 50       	subi	r18, 0x02	; 2
    116c:	31 09       	sbc	r19, r1
    116e:	39 83       	std	Y+1, r19	; 0x01
    1170:	28 83       	st	Y, r18
    1172:	3a c0       	rjmp	.+116    	; 0x11e8 <malloc+0x124>
    1174:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    1178:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    117c:	23 2b       	or	r18, r19
    117e:	41 f4       	brne	.+16     	; 0x1190 <malloc+0xcc>
    1180:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1184:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1188:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <__brkval+0x1>
    118c:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <__brkval>
    1190:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1194:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	41 f4       	brne	.+16     	; 0x11ae <malloc+0xea>
    119e:	2d b7       	in	r18, 0x3d	; 61
    11a0:	3e b7       	in	r19, 0x3e	; 62
    11a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11aa:	24 1b       	sub	r18, r20
    11ac:	35 0b       	sbc	r19, r21
    11ae:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <__brkval>
    11b2:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <__brkval+0x1>
    11b6:	e2 17       	cp	r30, r18
    11b8:	f3 07       	cpc	r31, r19
    11ba:	a0 f4       	brcc	.+40     	; 0x11e4 <malloc+0x120>
    11bc:	2e 1b       	sub	r18, r30
    11be:	3f 0b       	sbc	r19, r31
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	78 f0       	brcs	.+30     	; 0x11e4 <malloc+0x120>
    11c6:	ac 01       	movw	r20, r24
    11c8:	4e 5f       	subi	r20, 0xFE	; 254
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	24 17       	cp	r18, r20
    11ce:	35 07       	cpc	r19, r21
    11d0:	48 f0       	brcs	.+18     	; 0x11e4 <malloc+0x120>
    11d2:	4e 0f       	add	r20, r30
    11d4:	5f 1f       	adc	r21, r31
    11d6:	50 93 70 01 	sts	0x0170, r21	; 0x800170 <__brkval+0x1>
    11da:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <__brkval>
    11de:	81 93       	st	Z+, r24
    11e0:	91 93       	st	Z+, r25
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <malloc+0x124>
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	cf 01       	movw	r24, r30
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <free>:
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f4       	brne	.+2      	; 0x11fe <free+0xa>
    11fc:	81 c0       	rjmp	.+258    	; 0x1300 <free+0x10c>
    11fe:	fc 01       	movw	r30, r24
    1200:	32 97       	sbiw	r30, 0x02	; 2
    1202:	13 82       	std	Z+3, r1	; 0x03
    1204:	12 82       	std	Z+2, r1	; 0x02
    1206:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <__flp>
    120a:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <__flp+0x1>
    120e:	10 97       	sbiw	r26, 0x00	; 0
    1210:	81 f4       	brne	.+32     	; 0x1232 <free+0x3e>
    1212:	20 81       	ld	r18, Z
    1214:	31 81       	ldd	r19, Z+1	; 0x01
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    121e:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    1222:	28 17       	cp	r18, r24
    1224:	39 07       	cpc	r19, r25
    1226:	51 f5       	brne	.+84     	; 0x127c <free+0x88>
    1228:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <__brkval+0x1>
    122c:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <__brkval>
    1230:	67 c0       	rjmp	.+206    	; 0x1300 <free+0x10c>
    1232:	ed 01       	movw	r28, r26
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	ce 17       	cp	r28, r30
    123a:	df 07       	cpc	r29, r31
    123c:	40 f4       	brcc	.+16     	; 0x124e <free+0x5a>
    123e:	4a 81       	ldd	r20, Y+2	; 0x02
    1240:	5b 81       	ldd	r21, Y+3	; 0x03
    1242:	9e 01       	movw	r18, r28
    1244:	41 15       	cp	r20, r1
    1246:	51 05       	cpc	r21, r1
    1248:	f1 f0       	breq	.+60     	; 0x1286 <free+0x92>
    124a:	ea 01       	movw	r28, r20
    124c:	f5 cf       	rjmp	.-22     	; 0x1238 <free+0x44>
    124e:	d3 83       	std	Z+3, r29	; 0x03
    1250:	c2 83       	std	Z+2, r28	; 0x02
    1252:	40 81       	ld	r20, Z
    1254:	51 81       	ldd	r21, Z+1	; 0x01
    1256:	84 0f       	add	r24, r20
    1258:	95 1f       	adc	r25, r21
    125a:	c8 17       	cp	r28, r24
    125c:	d9 07       	cpc	r29, r25
    125e:	59 f4       	brne	.+22     	; 0x1276 <free+0x82>
    1260:	88 81       	ld	r24, Y
    1262:	99 81       	ldd	r25, Y+1	; 0x01
    1264:	84 0f       	add	r24, r20
    1266:	95 1f       	adc	r25, r21
    1268:	02 96       	adiw	r24, 0x02	; 2
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	93 83       	std	Z+3, r25	; 0x03
    1274:	82 83       	std	Z+2, r24	; 0x02
    1276:	21 15       	cp	r18, r1
    1278:	31 05       	cpc	r19, r1
    127a:	29 f4       	brne	.+10     	; 0x1286 <free+0x92>
    127c:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__flp+0x1>
    1280:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__flp>
    1284:	3d c0       	rjmp	.+122    	; 0x1300 <free+0x10c>
    1286:	e9 01       	movw	r28, r18
    1288:	fb 83       	std	Y+3, r31	; 0x03
    128a:	ea 83       	std	Y+2, r30	; 0x02
    128c:	49 91       	ld	r20, Y+
    128e:	59 91       	ld	r21, Y+
    1290:	c4 0f       	add	r28, r20
    1292:	d5 1f       	adc	r29, r21
    1294:	ec 17       	cp	r30, r28
    1296:	fd 07       	cpc	r31, r29
    1298:	61 f4       	brne	.+24     	; 0x12b2 <free+0xbe>
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	84 0f       	add	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	02 96       	adiw	r24, 0x02	; 2
    12a4:	e9 01       	movw	r28, r18
    12a6:	99 83       	std	Y+1, r25	; 0x01
    12a8:	88 83       	st	Y, r24
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	9b 83       	std	Y+3, r25	; 0x03
    12b0:	8a 83       	std	Y+2, r24	; 0x02
    12b2:	e0 e0       	ldi	r30, 0x00	; 0
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	12 96       	adiw	r26, 0x02	; 2
    12b8:	8d 91       	ld	r24, X+
    12ba:	9c 91       	ld	r25, X
    12bc:	13 97       	sbiw	r26, 0x03	; 3
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <free+0xd4>
    12c2:	fd 01       	movw	r30, r26
    12c4:	dc 01       	movw	r26, r24
    12c6:	f7 cf       	rjmp	.-18     	; 0x12b6 <free+0xc2>
    12c8:	8d 91       	ld	r24, X+
    12ca:	9c 91       	ld	r25, X
    12cc:	11 97       	sbiw	r26, 0x01	; 1
    12ce:	9d 01       	movw	r18, r26
    12d0:	2e 5f       	subi	r18, 0xFE	; 254
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    12dc:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    12e0:	28 17       	cp	r18, r24
    12e2:	39 07       	cpc	r19, r25
    12e4:	69 f4       	brne	.+26     	; 0x1300 <free+0x10c>
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <free+0x100>
    12ea:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__flp+0x1>
    12ee:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__flp>
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <free+0x104>
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
    12f8:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <__brkval+0x1>
    12fc:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <__brkval>
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <do_rand>:
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	68 81       	ld	r22, Y
    131e:	79 81       	ldd	r23, Y+1	; 0x01
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	61 15       	cp	r22, r1
    1326:	71 05       	cpc	r23, r1
    1328:	81 05       	cpc	r24, r1
    132a:	91 05       	cpc	r25, r1
    132c:	21 f4       	brne	.+8      	; 0x1336 <do_rand+0x30>
    132e:	64 e2       	ldi	r22, 0x24	; 36
    1330:	79 ed       	ldi	r23, 0xD9	; 217
    1332:	8b e5       	ldi	r24, 0x5B	; 91
    1334:	97 e0       	ldi	r25, 0x07	; 7
    1336:	2d e1       	ldi	r18, 0x1D	; 29
    1338:	33 ef       	ldi	r19, 0xF3	; 243
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	38 d0       	rcall	.+112    	; 0x13b0 <__divmodsi4>
    1340:	49 01       	movw	r8, r18
    1342:	5a 01       	movw	r10, r20
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	a7 ea       	ldi	r26, 0xA7	; 167
    134a:	b1 e4       	ldi	r27, 0x41	; 65
    134c:	4d d0       	rcall	.+154    	; 0x13e8 <__muluhisi3>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
    1352:	ac ee       	ldi	r26, 0xEC	; 236
    1354:	b4 ef       	ldi	r27, 0xF4	; 244
    1356:	a5 01       	movw	r20, r10
    1358:	94 01       	movw	r18, r8
    135a:	52 d0       	rcall	.+164    	; 0x1400 <__mulohisi3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	8c 0d       	add	r24, r12
    1362:	9d 1d       	adc	r25, r13
    1364:	ae 1d       	adc	r26, r14
    1366:	bf 1d       	adc	r27, r15
    1368:	b7 ff       	sbrs	r27, 7
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <do_rand+0x6c>
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	a1 09       	sbc	r26, r1
    1370:	b0 48       	sbci	r27, 0x80	; 128
    1372:	88 83       	st	Y, r24
    1374:	99 83       	std	Y+1, r25	; 0x01
    1376:	aa 83       	std	Y+2, r26	; 0x02
    1378:	bb 83       	std	Y+3, r27	; 0x03
    137a:	9f 77       	andi	r25, 0x7F	; 127
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8
    1390:	08 95       	ret

00001392 <rand_r>:
    1392:	b9 cf       	rjmp	.-142    	; 0x1306 <do_rand>

00001394 <rand>:
    1394:	86 e0       	ldi	r24, 0x06	; 6
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	b6 cf       	rjmp	.-148    	; 0x1306 <do_rand>

0000139a <srand>:
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    13a2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    13a6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    13aa:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    13ae:	08 95       	ret

000013b0 <__divmodsi4>:
    13b0:	05 2e       	mov	r0, r21
    13b2:	97 fb       	bst	r25, 7
    13b4:	16 f4       	brtc	.+4      	; 0x13ba <__divmodsi4+0xa>
    13b6:	00 94       	com	r0
    13b8:	0f d0       	rcall	.+30     	; 0x13d8 <__negsi2>
    13ba:	57 fd       	sbrc	r21, 7
    13bc:	05 d0       	rcall	.+10     	; 0x13c8 <__divmodsi4_neg2>
    13be:	24 d0       	rcall	.+72     	; 0x1408 <__udivmodsi4>
    13c0:	07 fc       	sbrc	r0, 7
    13c2:	02 d0       	rcall	.+4      	; 0x13c8 <__divmodsi4_neg2>
    13c4:	46 f4       	brtc	.+16     	; 0x13d6 <__divmodsi4_exit>
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <__negsi2>

000013c8 <__divmodsi4_neg2>:
    13c8:	50 95       	com	r21
    13ca:	40 95       	com	r20
    13cc:	30 95       	com	r19
    13ce:	21 95       	neg	r18
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	4f 4f       	sbci	r20, 0xFF	; 255
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255

000013d6 <__divmodsi4_exit>:
    13d6:	08 95       	ret

000013d8 <__negsi2>:
    13d8:	90 95       	com	r25
    13da:	80 95       	com	r24
    13dc:	70 95       	com	r23
    13de:	61 95       	neg	r22
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	8f 4f       	sbci	r24, 0xFF	; 255
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	08 95       	ret

000013e8 <__muluhisi3>:
    13e8:	4a de       	rcall	.-876    	; 0x107e <__umulhisi3>
    13ea:	a5 9f       	mul	r26, r21
    13ec:	90 0d       	add	r25, r0
    13ee:	b4 9f       	mul	r27, r20
    13f0:	90 0d       	add	r25, r0
    13f2:	a4 9f       	mul	r26, r20
    13f4:	80 0d       	add	r24, r0
    13f6:	91 1d       	adc	r25, r1
    13f8:	11 24       	eor	r1, r1
    13fa:	08 95       	ret

000013fc <__mulshisi3>:
    13fc:	b7 ff       	sbrs	r27, 7
    13fe:	f4 cf       	rjmp	.-24     	; 0x13e8 <__muluhisi3>

00001400 <__mulohisi3>:
    1400:	f3 df       	rcall	.-26     	; 0x13e8 <__muluhisi3>
    1402:	82 1b       	sub	r24, r18
    1404:	93 0b       	sbc	r25, r19
    1406:	08 95       	ret

00001408 <__udivmodsi4>:
    1408:	a1 e2       	ldi	r26, 0x21	; 33
    140a:	1a 2e       	mov	r1, r26
    140c:	aa 1b       	sub	r26, r26
    140e:	bb 1b       	sub	r27, r27
    1410:	fd 01       	movw	r30, r26
    1412:	0d c0       	rjmp	.+26     	; 0x142e <__udivmodsi4_ep>

00001414 <__udivmodsi4_loop>:
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	ee 1f       	adc	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	a2 17       	cp	r26, r18
    141e:	b3 07       	cpc	r27, r19
    1420:	e4 07       	cpc	r30, r20
    1422:	f5 07       	cpc	r31, r21
    1424:	20 f0       	brcs	.+8      	; 0x142e <__udivmodsi4_ep>
    1426:	a2 1b       	sub	r26, r18
    1428:	b3 0b       	sbc	r27, r19
    142a:	e4 0b       	sbc	r30, r20
    142c:	f5 0b       	sbc	r31, r21

0000142e <__udivmodsi4_ep>:
    142e:	66 1f       	adc	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	88 1f       	adc	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	1a 94       	dec	r1
    1438:	69 f7       	brne	.-38     	; 0x1414 <__udivmodsi4_loop>
    143a:	60 95       	com	r22
    143c:	70 95       	com	r23
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	bd 01       	movw	r22, r26
    1448:	cf 01       	movw	r24, r30
    144a:	08 95       	ret

0000144c <_exit>:
    144c:	f8 94       	cli

0000144e <__stop_program>:
    144e:	ff cf       	rjmp	.-2      	; 0x144e <__stop_program>
