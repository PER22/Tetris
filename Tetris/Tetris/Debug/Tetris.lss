
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007fa  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080010a  0080010a  00000898  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ae  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd7  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a02  00000000  00000000  0000298d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079a  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b31  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000048a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c1       	rjmp	.+752    	; 0x326 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 01       	movw	r4, r0
  8e:	1d 01       	movw	r2, r26
  90:	1a 01       	movw	r2, r20
  92:	17 01       	movw	r2, r14
  94:	14 01       	movw	r2, r8
  96:	11 01       	movw	r2, r2
  98:	0e 01       	movw	r0, r28
  9a:	0b 01       	movw	r0, r22

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ea ef       	ldi	r30, 0xFA	; 250
  b0:	f7 e0       	ldi	r31, 0x07	; 7
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a8 34       	cpi	r26, 0x48	; 72
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	76 d1       	rcall	.+748    	; 0x3c0 <main>
  d4:	90 c3       	rjmp	.+1824   	; 0x7f6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <delay_ms>:
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	5c f0       	brlt	.+22     	; 0xf4 <delay_ms+0x1c>
  de:	08 95       	ret
  e0:	00 00       	nop
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <delay_ms+0x8>
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	84 17       	cp	r24, r20
  ee:	95 07       	cpc	r25, r21
  f0:	19 f4       	brne	.+6      	; 0xf8 <delay_ms+0x20>
  f2:	08 95       	ret
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	33 e0       	ldi	r19, 0x03	; 3
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <delay_ms+0x8>

000000fe <LCD_WriteCommand>:
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	88 b9       	out	0x08, r24	; 8
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	00 00       	nop
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <delay_ms>
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	e1 df       	rcall	.-62     	; 0xd8 <delay_ms>
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	f2 df       	rcall	.-28     	; 0xfe <LCD_WriteCommand>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	f0 df       	rcall	.-32     	; 0xfe <LCD_WriteCommand>
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	ee df       	rcall	.-36     	; 0xfe <LCD_WriteCommand>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	ec df       	rcall	.-40     	; 0xfe <LCD_WriteCommand>
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	d6 cf       	rjmp	.-84     	; 0xd8 <delay_ms>
 12c:	08 95       	ret

0000012e <ADC_init>:
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <writetoAll16BitShiftRegisters>:
 13a:	2d 98       	cbi	0x05, 5	; 5
 13c:	af e0       	ldi	r26, 0x0F	; 15
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	0a 2e       	mov	r0, r26
 144:	02 c0       	rjmp	.+4      	; 0x14a <writetoAll16BitShiftRegisters+0x10>
 146:	f6 95       	lsr	r31
 148:	e7 95       	ror	r30
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <writetoAll16BitShiftRegisters+0xc>
 14e:	fe 2f       	mov	r31, r30
 150:	f1 70       	andi	r31, 0x01	; 1
 152:	e0 ff       	sbrs	r30, 0
 154:	04 c0       	rjmp	.+8      	; 0x15e <writetoAll16BitShiftRegisters+0x24>
 156:	e5 b1       	in	r30, 0x05	; 5
 158:	ef 2b       	or	r30, r31
 15a:	e5 b9       	out	0x05, r30	; 5
 15c:	01 c0       	rjmp	.+2      	; 0x160 <writetoAll16BitShiftRegisters+0x26>
 15e:	28 98       	cbi	0x05, 0	; 5
 160:	fb 01       	movw	r30, r22
 162:	0a 2e       	mov	r0, r26
 164:	02 c0       	rjmp	.+4      	; 0x16a <writetoAll16BitShiftRegisters+0x30>
 166:	f6 95       	lsr	r31
 168:	e7 95       	ror	r30
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <writetoAll16BitShiftRegisters+0x2c>
 16e:	fe 2f       	mov	r31, r30
 170:	f1 70       	andi	r31, 0x01	; 1
 172:	e0 ff       	sbrs	r30, 0
 174:	05 c0       	rjmp	.+10     	; 0x180 <writetoAll16BitShiftRegisters+0x46>
 176:	e5 b1       	in	r30, 0x05	; 5
 178:	ff 0f       	add	r31, r31
 17a:	fe 2b       	or	r31, r30
 17c:	f5 b9       	out	0x05, r31	; 5
 17e:	01 c0       	rjmp	.+2      	; 0x182 <writetoAll16BitShiftRegisters+0x48>
 180:	29 98       	cbi	0x05, 1	; 5
 182:	fa 01       	movw	r30, r20
 184:	0a 2e       	mov	r0, r26
 186:	02 c0       	rjmp	.+4      	; 0x18c <writetoAll16BitShiftRegisters+0x52>
 188:	f6 95       	lsr	r31
 18a:	e7 95       	ror	r30
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <writetoAll16BitShiftRegisters+0x4e>
 190:	fe 2f       	mov	r31, r30
 192:	f1 70       	andi	r31, 0x01	; 1
 194:	e0 ff       	sbrs	r30, 0
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <writetoAll16BitShiftRegisters+0x6a>
 198:	e5 b1       	in	r30, 0x05	; 5
 19a:	ff 0f       	add	r31, r31
 19c:	ff 0f       	add	r31, r31
 19e:	fe 2b       	or	r31, r30
 1a0:	f5 b9       	out	0x05, r31	; 5
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <writetoAll16BitShiftRegisters+0x6c>
 1a4:	2a 98       	cbi	0x05, 2	; 5
 1a6:	f9 01       	movw	r30, r18
 1a8:	0a 2e       	mov	r0, r26
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <writetoAll16BitShiftRegisters+0x76>
 1ac:	f6 95       	lsr	r31
 1ae:	e7 95       	ror	r30
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <writetoAll16BitShiftRegisters+0x72>
 1b4:	fe 2f       	mov	r31, r30
 1b6:	f1 70       	andi	r31, 0x01	; 1
 1b8:	e0 ff       	sbrs	r30, 0
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <writetoAll16BitShiftRegisters+0x90>
 1bc:	e5 b1       	in	r30, 0x05	; 5
 1be:	ff 0f       	add	r31, r31
 1c0:	ff 0f       	add	r31, r31
 1c2:	ff 0f       	add	r31, r31
 1c4:	fe 2b       	or	r31, r30
 1c6:	f5 b9       	out	0x05, r31	; 5
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <writetoAll16BitShiftRegisters+0x92>
 1ca:	2b 98       	cbi	0x05, 3	; 5
 1cc:	ea e0       	ldi	r30, 0x0A	; 10
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	00 00       	nop
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	e9 f7       	brne	.-6      	; 0x1d0 <writetoAll16BitShiftRegisters+0x96>
 1d6:	2f 9a       	sbi	0x05, 7	; 5
 1d8:	ea e0       	ldi	r30, 0x0A	; 10
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	00 00       	nop
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	e9 f7       	brne	.-6      	; 0x1dc <writetoAll16BitShiftRegisters+0xa2>
 1e2:	2f 98       	cbi	0x05, 7	; 5
 1e4:	ea e0       	ldi	r30, 0x0A	; 10
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	00 00       	nop
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <writetoAll16BitShiftRegisters+0xae>
 1ee:	11 97       	sbiw	r26, 0x01	; 1
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <writetoAll16BitShiftRegisters+0xba>
 1f2:	a6 cf       	rjmp	.-180    	; 0x140 <writetoAll16BitShiftRegisters+0x6>
 1f4:	2d 9a       	sbi	0x05, 5	; 5
 1f6:	08 95       	ret

000001f8 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
 208:	87 70       	andi	r24, 0x07	; 7
	switch(column){
 20a:	48 2f       	mov	r20, r24
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	fa 01       	movw	r30, r20
 210:	ea 5b       	subi	r30, 0xBA	; 186
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	c6 c1       	rjmp	.+908    	; 0x5a2 <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
 216:	4f ef       	ldi	r20, 0xFF	; 255
 218:	50 e8       	ldi	r21, 0x80	; 128
 21a:	14 c0       	rjmp	.+40     	; 0x244 <pulseColumn+0x4c>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
 21c:	4f ef       	ldi	r20, 0xFF	; 255
 21e:	50 e4       	ldi	r21, 0x40	; 64
			break;
 220:	11 c0       	rjmp	.+34     	; 0x244 <pulseColumn+0x4c>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
 222:	4f ef       	ldi	r20, 0xFF	; 255
 224:	50 e2       	ldi	r21, 0x20	; 32
			break;
 226:	0e c0       	rjmp	.+28     	; 0x244 <pulseColumn+0x4c>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
 228:	4f ef       	ldi	r20, 0xFF	; 255
 22a:	50 e1       	ldi	r21, 0x10	; 16
			break;
 22c:	0b c0       	rjmp	.+22     	; 0x244 <pulseColumn+0x4c>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
 22e:	4f ef       	ldi	r20, 0xFF	; 255
 230:	58 e0       	ldi	r21, 0x08	; 8
			break;
 232:	08 c0       	rjmp	.+16     	; 0x244 <pulseColumn+0x4c>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
 234:	4f ef       	ldi	r20, 0xFF	; 255
 236:	54 e0       	ldi	r21, 0x04	; 4
			break;
 238:	05 c0       	rjmp	.+10     	; 0x244 <pulseColumn+0x4c>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
 23a:	4f ef       	ldi	r20, 0xFF	; 255
 23c:	52 e0       	ldi	r21, 0x02	; 2
			break;
 23e:	02 c0       	rjmp	.+4      	; 0x244 <pulseColumn+0x4c>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
 240:	4f ef       	ldi	r20, 0xFF	; 255
 242:	51 e0       	ldi	r21, 0x01	; 1
 244:	e9 e0       	ldi	r30, 0x09	; 9
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	90 e1       	ldi	r25, 0x10	; 16
 24e:	89 9f       	mul	r24, r25
 250:	e0 0d       	add	r30, r0
 252:	f1 1d       	adc	r31, r1
 254:	11 24       	eor	r1, r1
 256:	38 96       	adiw	r30, 0x08	; 8
 258:	04 2f       	mov	r16, r20
 25a:	15 2f       	mov	r17, r21
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
 260:	6f ef       	ldi	r22, 0xFF	; 255
 262:	7f ef       	ldi	r23, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 264:	ee 24       	eor	r14, r14
 266:	e3 94       	inc	r14
 268:	f1 2c       	mov	r15, r1
 26a:	dc 01       	movw	r26, r24
 26c:	18 96       	adiw	r26, 0x08	; 8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
 26e:	31 91       	ld	r19, Z+
 270:	30 ff       	sbrs	r19, 0
 272:	0c c0       	rjmp	.+24     	; 0x28c <pulseColumn+0x94>
 274:	d7 01       	movw	r26, r14
 276:	08 2e       	mov	r0, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <pulseColumn+0x86>
 27a:	aa 0f       	add	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <pulseColumn+0x82>
 282:	a0 95       	com	r26
 284:	b0 95       	com	r27
 286:	6a 23       	and	r22, r26
 288:	7b 23       	and	r23, r27
 28a:	1a c0       	rjmp	.+52     	; 0x2c0 <pulseColumn+0xc8>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
 28c:	32 ff       	sbrs	r19, 2
 28e:	0c c0       	rjmp	.+24     	; 0x2a8 <pulseColumn+0xb0>
 290:	97 01       	movw	r18, r14
 292:	08 2e       	mov	r0, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <pulseColumn+0xa2>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <pulseColumn+0x9e>
 29e:	20 95       	com	r18
 2a0:	30 95       	com	r19
 2a2:	02 23       	and	r16, r18
 2a4:	13 23       	and	r17, r19
 2a6:	0c c0       	rjmp	.+24     	; 0x2c0 <pulseColumn+0xc8>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 2a8:	31 ff       	sbrs	r19, 1
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <pulseColumn+0xc8>
 2ac:	97 01       	movw	r18, r14
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <pulseColumn+0xbc>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	aa 95       	dec	r26
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <pulseColumn+0xb8>
 2b8:	20 95       	com	r18
 2ba:	30 95       	com	r19
 2bc:	62 23       	and	r22, r18
 2be:	73 23       	and	r23, r19
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	91 05       	cpc	r25, r1
 2c6:	89 f6       	brne	.-94     	; 0x26a <pulseColumn+0x72>
		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
 2c8:	98 01       	movw	r18, r16
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	35 df       	rcall	.-406    	; 0x13a <writetoAll16BitShiftRegisters>
		
	
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	08 95       	ret

000002de <TimerOn>:
	Joystick_Process_Raw(nextJoystickFramePtr);	
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
	nextJoystickFramePtr = temp;
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2e4:	8d e7       	ldi	r24, 0x7D	; 125
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 302:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 306:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 30a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 30e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 312:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 316:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 31a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 31e:	8f b7       	in	r24, 0x3f	; 63
 320:	80 68       	ori	r24, 0x80	; 128
 322:	8f bf       	out	0x3f, r24	; 63
 324:	08 95       	ret

00000326 <__vector_13>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 33c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 340:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 344:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	a1 09       	sbc	r26, r1
 34c:	b1 09       	sbc	r27, r1
 34e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 352:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 356:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 35a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 35e:	89 2b       	or	r24, r25
 360:	8a 2b       	or	r24, r26
 362:	8b 2b       	or	r24, r27
 364:	99 f4       	brne	.+38     	; 0x38c <__vector_13+0x66>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 36c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 370:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 374:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 378:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 37c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 380:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 384:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 388:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <TimerSet>:
 39e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 3a2:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 3a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 3aa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 3ae:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 3b2:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 3b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 3ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 3be:	08 95       	ret

000003c0 <main>:
}

int main(void)
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	c0 58       	subi	r28, 0x80	; 128
 3ca:	d1 09       	sbc	r29, r1
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00;
 3d6:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 3dc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 3de:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 3e0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 3e2:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 3e4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 3e6:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 3e8:	a2 de       	rcall	.-700    	; 0x12e <ADC_init>
	LCD_init();
 3ea:	92 de       	rcall	.-732    	; 0x110 <LCD_init>
 3ec:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	e1 d0       	rcall	.+450    	; 0x5b4 <malloc>
 3f2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <currentJoystickFramePtr+0x1>
 3f6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <currentJoystickFramePtr>
 3fa:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	da d0       	rcall	.+436    	; 0x5b4 <malloc>
 400:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 404:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 408:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	d3 d0       	rcall	.+422    	; 0x5b4 <malloc>
 40e:	08 2f       	mov	r16, r24
 410:	19 2f       	mov	r17, r25
 412:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_RGB_FramePtr>
 416:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <current_RGB_FramePtr+0x1>
 41a:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	ca d0       	rcall	.+404    	; 0x5b4 <malloc>
 420:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <next_RGB_FramePtr>
 424:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <next_RGB_FramePtr+0x1>
 428:	40 2f       	mov	r20, r16
 42a:	51 2f       	mov	r21, r17
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 430:	b4 e0       	ldi	r27, 0x04	; 4
 432:	a2 e0       	ldi	r26, 0x02	; 2
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 434:	19 c0       	rjmp	.+50     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 436:	60 fd       	sbrc	r22, 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
 43a:	a0 83       	st	Z, r26
 43c:	01 c0       	rjmp	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 43e:	b0 83       	st	Z, r27
 440:	6f 5f       	subi	r22, 0xFF	; 255
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	31 96       	adiw	r30, 0x01	; 1
 446:	06 17       	cp	r16, r22
 448:	17 07       	cpc	r17, r23
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
 44a:	a9 f7       	brne	.-22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 450:	40 5f       	subi	r20, 0xF0	; 240
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	28 30       	cpi	r18, 0x08	; 8
 456:	31 05       	cpc	r19, r1
 458:	39 f4       	brne	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45a:	28 2f       	mov	r18, r24
 45c:	39 2f       	mov	r19, r25
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	72 e0       	ldi	r23, 0x02	; 2
 464:	64 e0       	ldi	r22, 0x04	; 4
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
			}
			else{
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 466:	17 c0       	rjmp	.+46     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}
	}
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 468:	b9 01       	movw	r22, r18
 46a:	89 01       	movw	r16, r18
 46c:	00 5f       	subi	r16, 0xF0	; 240
 46e:	1f 4f       	sbci	r17, 0xFF	; 255
 470:	fa 01       	movw	r30, r20
 472:	e1 cf       	rjmp	.-62     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	currentJoystickFramePtr = nextJoystickFramePtr;
	nextJoystickFramePtr = temp;
}

int main(void)
{
 474:	40 fd       	sbrc	r20, 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			}
		}
	}
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
 478:	60 83       	st	Z, r22
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 47c:	70 83       	st	Z, r23
 47e:	4f 5f       	subi	r20, 0xFF	; 255
			}
			else{
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	a4 17       	cp	r26, r20
 486:	b5 07       	cpc	r27, r21
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
			}
		}
	}
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
 488:	a9 f7       	brne	.-22     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	20 5f       	subi	r18, 0xF0	; 240
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
			}
		}
	}
	for (int i= 0; i < 8; i++){
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	88 30       	cpi	r24, 0x08	; 8
 492:	91 05       	cpc	r25, r1
 494:	29 f0       	breq	.+10     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 496:	ac 01       	movw	r20, r24
 498:	dc 01       	movw	r26, r24
 49a:	50 96       	adiw	r26, 0x10	; 16
 49c:	f9 01       	movw	r30, r18
 49e:	ea cf       	rjmp	.-44     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 4a0:	61 e0       	ldi	r22, 0x01	; 1
// 			Effects[i]->pitches_ptr[j] = i*150.0; 
// 		}
// 	}
	
	//timing
	TimerSet(1);
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	7a df       	rcall	.-268    	; 0x39e <TimerSet>
 4aa:	19 df       	rcall	.-462    	; 0x2de <TimerOn>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
	unsigned int cnt = 0;
	unsigned int cnt2 = 0;
	TimerOn();
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	00 e0       	ldi	r16, 0x00	; 0
// 		}
// 	}
	
	//timing
	TimerSet(1);
	unsigned int cnt = 0;
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	c1 2c       	mov	r12, r1
	unsigned int cnt2 = 0;
 4b6:	d1 2c       	mov	r13, r1
 4b8:	23 c0       	rjmp	.+70     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			*current_RGB_FramePtr = *next_RGB_FramePtr;
			*next_RGB_FramePtr = tmpFrame;
			cnt2 = 0;}
		
		cnt2++;	
		if(cnt == 8){pulseColumn(0, *current_RGB_FramePtr);cnt = 0;}
 4ba:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <current_RGB_FramePtr>
 4be:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <current_RGB_FramePtr+0x1>
	//	Joystick_Tick();
	//	testDisplayJoystickADC(); //Working and not needed
		//Gamestate_Tick(); //TODO
		
		//SoundEffect_Tick();
		if(cnt2 == 1000){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	fa 01       	movw	r30, r20
 4c6:	de 01       	movw	r26, r28
 4c8:	11 96       	adiw	r26, 0x01	; 1
 4ca:	01 90       	ld	r0, Z+
 4cc:	0d 92       	st	X+, r0
 4ce:	8a 95       	dec	r24
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4d2:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <next_RGB_FramePtr>
 4d6:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <next_RGB_FramePtr+0x1>
			*current_RGB_FramePtr = *next_RGB_FramePtr;
 4da:	80 e8       	ldi	r24, 0x80	; 128
 4dc:	da 01       	movw	r26, r20
 4de:	01 90       	ld	r0, Z+
 4e0:	0d 92       	st	X+, r0
 4e2:	8a 95       	dec	r24
 4e4:	e1 f7       	brne	.-8      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4e6:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <next_RGB_FramePtr>
 4ea:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <next_RGB_FramePtr+0x1>
			*next_RGB_FramePtr = tmpFrame;
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	fe 01       	movw	r30, r28
 4f2:	31 96       	adiw	r30, 0x01	; 1
 4f4:	01 90       	ld	r0, Z+
 4f6:	0d 92       	st	X+, r0
 4f8:	8a 95       	dec	r24
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4fc:	00 e0       	ldi	r16, 0x00	; 0
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	0f 5f       	subi	r16, 0xFF	; 255
			cnt2 = 0;}
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	28 30       	cpi	r18, 0x08	; 8
		
		cnt2++;	
 506:	31 05       	cpc	r19, r1
 508:	f9 f4       	brne	.+62     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		if(cnt == 8){pulseColumn(0, *current_RGB_FramePtr);cnt = 0;}
 50a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <current_RGB_FramePtr>
 50e:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <current_RGB_FramePtr+0x1>
 512:	8d b7       	in	r24, 0x3d	; 61
 514:	9e b7       	in	r25, 0x3e	; 62
 516:	80 58       	subi	r24, 0x80	; 128
 518:	91 09       	sbc	r25, r1
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	9e bf       	out	0x3e, r25	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	8d bf       	out	0x3d, r24	; 61
 524:	ad b7       	in	r26, 0x3d	; 61
 526:	be b7       	in	r27, 0x3e	; 62
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	01 90       	ld	r0, Z+
 52e:	0d 92       	st	X+, r0
 530:	8a 95       	dec	r24
 532:	e1 f7       	brne	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	60 de       	rcall	.-832    	; 0x1f8 <pulseColumn>
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	2c 2d       	mov	r18, r12
 544:	3d 2d       	mov	r19, r13
 546:	21 c0       	rjmp	.+66     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 548:	79 01       	movw	r14, r18
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	e9 1a       	sub	r14, r25
		else{pulseColumn(cnt++, *current_RGB_FramePtr);}
 54e:	f9 0a       	sbc	r15, r25
 550:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <current_RGB_FramePtr>
 554:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <current_RGB_FramePtr+0x1>
 558:	8d b7       	in	r24, 0x3d	; 61
 55a:	9e b7       	in	r25, 0x3e	; 62
 55c:	80 58       	subi	r24, 0x80	; 128
 55e:	91 09       	sbc	r25, r1
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	9e bf       	out	0x3e, r25	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	8d bf       	out	0x3d, r24	; 61
 56a:	ad b7       	in	r26, 0x3d	; 61
 56c:	be b7       	in	r27, 0x3e	; 62
 56e:	11 96       	adiw	r26, 0x01	; 1
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	01 90       	ld	r0, Z+
 574:	0d 92       	st	X+, r0
 576:	8a 95       	dec	r24
 578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 57a:	82 2f       	mov	r24, r18
 57c:	3d de       	rcall	.-902    	; 0x1f8 <pulseColumn>
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	97 01       	movw	r18, r14
 58a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <TimerFlag>
 58e:	99 23       	and	r25, r25
		
		while(!TimerFlag);
 590:	e1 f3       	breq	.-8      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 592:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 596:	08 3e       	cpi	r16, 0xE8	; 232
		TimerFlag = 0;
 598:	93 e0       	ldi	r25, 0x03	; 3
 59a:	19 07       	cpc	r17, r25
	//	Joystick_Tick();
	//	testDisplayJoystickADC(); //Working and not needed
		//Gamestate_Tick(); //TODO
		
		//SoundEffect_Tick();
		if(cnt2 == 1000){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59e:	b0 cf       	rjmp	.-160    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 5a0:	8c cf       	rjmp	.-232    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>

000005a2 <__tablejump2__>:
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	00 24       	eor	r0, r0
 5a8:	00 1c       	adc	r0, r0
 5aa:	0b be       	out	0x3b, r0	; 59
 5ac:	07 90       	elpm	r0, Z+
 5ae:	f6 91       	elpm	r31, Z
 5b0:	e0 2d       	mov	r30, r0
 5b2:	09 94       	ijmp

000005b4 <malloc>:
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	91 05       	cpc	r25, r1
 5c0:	10 f4       	brcc	.+4      	; 0x5c6 <malloc+0x12>
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__flp>
 5ca:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <__flp+0x1>
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	a0 e0       	ldi	r26, 0x00	; 0
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	30 97       	sbiw	r30, 0x00	; 0
 5d8:	19 f1       	breq	.+70     	; 0x620 <malloc+0x6c>
 5da:	40 81       	ld	r20, Z
 5dc:	51 81       	ldd	r21, Z+1	; 0x01
 5de:	02 81       	ldd	r16, Z+2	; 0x02
 5e0:	13 81       	ldd	r17, Z+3	; 0x03
 5e2:	48 17       	cp	r20, r24
 5e4:	59 07       	cpc	r21, r25
 5e6:	c8 f0       	brcs	.+50     	; 0x61a <malloc+0x66>
 5e8:	84 17       	cp	r24, r20
 5ea:	95 07       	cpc	r25, r21
 5ec:	69 f4       	brne	.+26     	; 0x608 <malloc+0x54>
 5ee:	10 97       	sbiw	r26, 0x00	; 0
 5f0:	31 f0       	breq	.+12     	; 0x5fe <malloc+0x4a>
 5f2:	12 96       	adiw	r26, 0x02	; 2
 5f4:	0c 93       	st	X, r16
 5f6:	12 97       	sbiw	r26, 0x02	; 2
 5f8:	13 96       	adiw	r26, 0x03	; 3
 5fa:	1c 93       	st	X, r17
 5fc:	27 c0       	rjmp	.+78     	; 0x64c <malloc+0x98>
 5fe:	00 93 46 01 	sts	0x0146, r16	; 0x800146 <__flp>
 602:	10 93 47 01 	sts	0x0147, r17	; 0x800147 <__flp+0x1>
 606:	22 c0       	rjmp	.+68     	; 0x64c <malloc+0x98>
 608:	21 15       	cp	r18, r1
 60a:	31 05       	cpc	r19, r1
 60c:	19 f0       	breq	.+6      	; 0x614 <malloc+0x60>
 60e:	42 17       	cp	r20, r18
 610:	53 07       	cpc	r21, r19
 612:	18 f4       	brcc	.+6      	; 0x61a <malloc+0x66>
 614:	9a 01       	movw	r18, r20
 616:	bd 01       	movw	r22, r26
 618:	ef 01       	movw	r28, r30
 61a:	df 01       	movw	r26, r30
 61c:	f8 01       	movw	r30, r16
 61e:	db cf       	rjmp	.-74     	; 0x5d6 <malloc+0x22>
 620:	21 15       	cp	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	f9 f0       	breq	.+62     	; 0x664 <malloc+0xb0>
 626:	28 1b       	sub	r18, r24
 628:	39 0b       	sbc	r19, r25
 62a:	24 30       	cpi	r18, 0x04	; 4
 62c:	31 05       	cpc	r19, r1
 62e:	80 f4       	brcc	.+32     	; 0x650 <malloc+0x9c>
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	9b 81       	ldd	r25, Y+3	; 0x03
 634:	61 15       	cp	r22, r1
 636:	71 05       	cpc	r23, r1
 638:	21 f0       	breq	.+8      	; 0x642 <malloc+0x8e>
 63a:	fb 01       	movw	r30, r22
 63c:	93 83       	std	Z+3, r25	; 0x03
 63e:	82 83       	std	Z+2, r24	; 0x02
 640:	04 c0       	rjmp	.+8      	; 0x64a <malloc+0x96>
 642:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__flp+0x1>
 646:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__flp>
 64a:	fe 01       	movw	r30, r28
 64c:	32 96       	adiw	r30, 0x02	; 2
 64e:	44 c0       	rjmp	.+136    	; 0x6d8 <malloc+0x124>
 650:	fe 01       	movw	r30, r28
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	81 93       	st	Z+, r24
 658:	91 93       	st	Z+, r25
 65a:	22 50       	subi	r18, 0x02	; 2
 65c:	31 09       	sbc	r19, r1
 65e:	39 83       	std	Y+1, r19	; 0x01
 660:	28 83       	st	Y, r18
 662:	3a c0       	rjmp	.+116    	; 0x6d8 <malloc+0x124>
 664:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 668:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 66c:	23 2b       	or	r18, r19
 66e:	41 f4       	brne	.+16     	; 0x680 <malloc+0xcc>
 670:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 674:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 678:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__brkval+0x1>
 67c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__brkval>
 680:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 684:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 688:	21 15       	cp	r18, r1
 68a:	31 05       	cpc	r19, r1
 68c:	41 f4       	brne	.+16     	; 0x69e <malloc+0xea>
 68e:	2d b7       	in	r18, 0x3d	; 61
 690:	3e b7       	in	r19, 0x3e	; 62
 692:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 696:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 69a:	24 1b       	sub	r18, r20
 69c:	35 0b       	sbc	r19, r21
 69e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__brkval>
 6a2:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__brkval+0x1>
 6a6:	e2 17       	cp	r30, r18
 6a8:	f3 07       	cpc	r31, r19
 6aa:	a0 f4       	brcc	.+40     	; 0x6d4 <malloc+0x120>
 6ac:	2e 1b       	sub	r18, r30
 6ae:	3f 0b       	sbc	r19, r31
 6b0:	28 17       	cp	r18, r24
 6b2:	39 07       	cpc	r19, r25
 6b4:	78 f0       	brcs	.+30     	; 0x6d4 <malloc+0x120>
 6b6:	ac 01       	movw	r20, r24
 6b8:	4e 5f       	subi	r20, 0xFE	; 254
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	24 17       	cp	r18, r20
 6be:	35 07       	cpc	r19, r21
 6c0:	48 f0       	brcs	.+18     	; 0x6d4 <malloc+0x120>
 6c2:	4e 0f       	add	r20, r30
 6c4:	5f 1f       	adc	r21, r31
 6c6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__brkval+0x1>
 6ca:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__brkval>
 6ce:	81 93       	st	Z+, r24
 6d0:	91 93       	st	Z+, r25
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <malloc+0x124>
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	cf 01       	movw	r24, r30
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	08 95       	ret

000006e4 <free>:
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	09 f4       	brne	.+2      	; 0x6ee <free+0xa>
 6ec:	81 c0       	rjmp	.+258    	; 0x7f0 <free+0x10c>
 6ee:	fc 01       	movw	r30, r24
 6f0:	32 97       	sbiw	r30, 0x02	; 2
 6f2:	13 82       	std	Z+3, r1	; 0x03
 6f4:	12 82       	std	Z+2, r1	; 0x02
 6f6:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__flp>
 6fa:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__flp+0x1>
 6fe:	10 97       	sbiw	r26, 0x00	; 0
 700:	81 f4       	brne	.+32     	; 0x722 <free+0x3e>
 702:	20 81       	ld	r18, Z
 704:	31 81       	ldd	r19, Z+1	; 0x01
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 70e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 712:	28 17       	cp	r18, r24
 714:	39 07       	cpc	r19, r25
 716:	51 f5       	brne	.+84     	; 0x76c <free+0x88>
 718:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <__brkval+0x1>
 71c:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <__brkval>
 720:	67 c0       	rjmp	.+206    	; 0x7f0 <free+0x10c>
 722:	ed 01       	movw	r28, r26
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	ce 17       	cp	r28, r30
 72a:	df 07       	cpc	r29, r31
 72c:	40 f4       	brcc	.+16     	; 0x73e <free+0x5a>
 72e:	4a 81       	ldd	r20, Y+2	; 0x02
 730:	5b 81       	ldd	r21, Y+3	; 0x03
 732:	9e 01       	movw	r18, r28
 734:	41 15       	cp	r20, r1
 736:	51 05       	cpc	r21, r1
 738:	f1 f0       	breq	.+60     	; 0x776 <free+0x92>
 73a:	ea 01       	movw	r28, r20
 73c:	f5 cf       	rjmp	.-22     	; 0x728 <free+0x44>
 73e:	d3 83       	std	Z+3, r29	; 0x03
 740:	c2 83       	std	Z+2, r28	; 0x02
 742:	40 81       	ld	r20, Z
 744:	51 81       	ldd	r21, Z+1	; 0x01
 746:	84 0f       	add	r24, r20
 748:	95 1f       	adc	r25, r21
 74a:	c8 17       	cp	r28, r24
 74c:	d9 07       	cpc	r29, r25
 74e:	59 f4       	brne	.+22     	; 0x766 <free+0x82>
 750:	88 81       	ld	r24, Y
 752:	99 81       	ldd	r25, Y+1	; 0x01
 754:	84 0f       	add	r24, r20
 756:	95 1f       	adc	r25, r21
 758:	02 96       	adiw	r24, 0x02	; 2
 75a:	91 83       	std	Z+1, r25	; 0x01
 75c:	80 83       	st	Z, r24
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	9b 81       	ldd	r25, Y+3	; 0x03
 762:	93 83       	std	Z+3, r25	; 0x03
 764:	82 83       	std	Z+2, r24	; 0x02
 766:	21 15       	cp	r18, r1
 768:	31 05       	cpc	r19, r1
 76a:	29 f4       	brne	.+10     	; 0x776 <free+0x92>
 76c:	f0 93 47 01 	sts	0x0147, r31	; 0x800147 <__flp+0x1>
 770:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <__flp>
 774:	3d c0       	rjmp	.+122    	; 0x7f0 <free+0x10c>
 776:	e9 01       	movw	r28, r18
 778:	fb 83       	std	Y+3, r31	; 0x03
 77a:	ea 83       	std	Y+2, r30	; 0x02
 77c:	49 91       	ld	r20, Y+
 77e:	59 91       	ld	r21, Y+
 780:	c4 0f       	add	r28, r20
 782:	d5 1f       	adc	r29, r21
 784:	ec 17       	cp	r30, r28
 786:	fd 07       	cpc	r31, r29
 788:	61 f4       	brne	.+24     	; 0x7a2 <free+0xbe>
 78a:	80 81       	ld	r24, Z
 78c:	91 81       	ldd	r25, Z+1	; 0x01
 78e:	84 0f       	add	r24, r20
 790:	95 1f       	adc	r25, r21
 792:	02 96       	adiw	r24, 0x02	; 2
 794:	e9 01       	movw	r28, r18
 796:	99 83       	std	Y+1, r25	; 0x01
 798:	88 83       	st	Y, r24
 79a:	82 81       	ldd	r24, Z+2	; 0x02
 79c:	93 81       	ldd	r25, Z+3	; 0x03
 79e:	9b 83       	std	Y+3, r25	; 0x03
 7a0:	8a 83       	std	Y+2, r24	; 0x02
 7a2:	e0 e0       	ldi	r30, 0x00	; 0
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	12 96       	adiw	r26, 0x02	; 2
 7a8:	8d 91       	ld	r24, X+
 7aa:	9c 91       	ld	r25, X
 7ac:	13 97       	sbiw	r26, 0x03	; 3
 7ae:	00 97       	sbiw	r24, 0x00	; 0
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <free+0xd4>
 7b2:	fd 01       	movw	r30, r26
 7b4:	dc 01       	movw	r26, r24
 7b6:	f7 cf       	rjmp	.-18     	; 0x7a6 <free+0xc2>
 7b8:	8d 91       	ld	r24, X+
 7ba:	9c 91       	ld	r25, X
 7bc:	11 97       	sbiw	r26, 0x01	; 1
 7be:	9d 01       	movw	r18, r26
 7c0:	2e 5f       	subi	r18, 0xFE	; 254
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	82 0f       	add	r24, r18
 7c6:	93 1f       	adc	r25, r19
 7c8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 7cc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 7d0:	28 17       	cp	r18, r24
 7d2:	39 07       	cpc	r19, r25
 7d4:	69 f4       	brne	.+26     	; 0x7f0 <free+0x10c>
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <free+0x100>
 7da:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__flp+0x1>
 7de:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__flp>
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <free+0x104>
 7e4:	13 82       	std	Z+3, r1	; 0x03
 7e6:	12 82       	std	Z+2, r1	; 0x02
 7e8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__brkval+0x1>
 7ec:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__brkval>
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <_exit>:
 7f6:	f8 94       	cli

000007f8 <__stop_program>:
 7f8:	ff cf       	rjmp	.-2      	; 0x7f8 <__stop_program>
