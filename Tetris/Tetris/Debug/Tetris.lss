
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  0080010a  0080010a  000009b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012cd  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  00001dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000946  00000000  00000000  0000299d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070e  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c2       	rjmp	.+1356   	; 0x582 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c7 d2       	rcall	.+1422   	; 0x652 <main>
  c4:	27 c4       	rjmp	.+2126   	; 0x914 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <ADC_init>:
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 6c       	ori	r24, 0xC0	; 192
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <ADC_channel>:
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	48 f4       	brcc	.+18     	; 0x19a <ADC_channel+0x16>
 188:	ec e7       	ldi	r30, 0x7C	; 124
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	98 7f       	andi	r25, 0xF8	; 248
 190:	90 83       	st	Z, r25
 192:	90 81       	ld	r25, Z
 194:	87 70       	andi	r24, 0x07	; 7
 196:	89 2b       	or	r24, r25
 198:	80 83       	st	Z, r24
 19a:	08 95       	ret

0000019c <ADC_read>:
 19c:	f3 df       	rcall	.-26     	; 0x184 <ADC_channel>
 19e:	ea e7       	ldi	r30, 0x7A	; 122
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	86 fd       	sbrc	r24, 6
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <ADC_read+0xc>
 1ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1b6:	08 95       	ret

000001b8 <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
 1b8:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 1ba:	af e0       	ldi	r26, 0x0F	; 15
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
 1be:	fc 01       	movw	r30, r24
 1c0:	0a 2e       	mov	r0, r26
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <writetoAll16BitShiftRegisters+0x10>
 1c4:	f6 95       	lsr	r31
 1c6:	e7 95       	ror	r30
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <writetoAll16BitShiftRegisters+0xc>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
 1cc:	fe 2f       	mov	r31, r30
 1ce:	f1 70       	andi	r31, 0x01	; 1
 1d0:	e0 ff       	sbrs	r30, 0
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <writetoAll16BitShiftRegisters+0x24>
 1d4:	e5 b1       	in	r30, 0x05	; 5
 1d6:	ef 2b       	or	r30, r31
 1d8:	e5 b9       	out	0x05, r30	; 5
 1da:	01 c0       	rjmp	.+2      	; 0x1de <writetoAll16BitShiftRegisters+0x26>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
 1dc:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
 1de:	fb 01       	movw	r30, r22
 1e0:	0a 2e       	mov	r0, r26
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <writetoAll16BitShiftRegisters+0x30>
 1e4:	f6 95       	lsr	r31
 1e6:	e7 95       	ror	r30
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <writetoAll16BitShiftRegisters+0x2c>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
 1ec:	fe 2f       	mov	r31, r30
 1ee:	f1 70       	andi	r31, 0x01	; 1
 1f0:	e0 ff       	sbrs	r30, 0
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <writetoAll16BitShiftRegisters+0x46>
 1f4:	e5 b1       	in	r30, 0x05	; 5
 1f6:	ff 0f       	add	r31, r31
 1f8:	fe 2b       	or	r31, r30
 1fa:	f5 b9       	out	0x05, r31	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <writetoAll16BitShiftRegisters+0x48>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
 1fe:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
 200:	fa 01       	movw	r30, r20
 202:	0a 2e       	mov	r0, r26
 204:	02 c0       	rjmp	.+4      	; 0x20a <writetoAll16BitShiftRegisters+0x52>
 206:	f6 95       	lsr	r31
 208:	e7 95       	ror	r30
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <writetoAll16BitShiftRegisters+0x4e>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
 20e:	fe 2f       	mov	r31, r30
 210:	f1 70       	andi	r31, 0x01	; 1
 212:	e0 ff       	sbrs	r30, 0
 214:	06 c0       	rjmp	.+12     	; 0x222 <writetoAll16BitShiftRegisters+0x6a>
 216:	e5 b1       	in	r30, 0x05	; 5
 218:	ff 0f       	add	r31, r31
 21a:	ff 0f       	add	r31, r31
 21c:	fe 2b       	or	r31, r30
 21e:	f5 b9       	out	0x05, r31	; 5
 220:	01 c0       	rjmp	.+2      	; 0x224 <writetoAll16BitShiftRegisters+0x6c>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
 222:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
 224:	f9 01       	movw	r30, r18
 226:	0a 2e       	mov	r0, r26
 228:	02 c0       	rjmp	.+4      	; 0x22e <writetoAll16BitShiftRegisters+0x76>
 22a:	f6 95       	lsr	r31
 22c:	e7 95       	ror	r30
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <writetoAll16BitShiftRegisters+0x72>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
 232:	fe 2f       	mov	r31, r30
 234:	f1 70       	andi	r31, 0x01	; 1
 236:	e0 ff       	sbrs	r30, 0
 238:	07 c0       	rjmp	.+14     	; 0x248 <writetoAll16BitShiftRegisters+0x90>
 23a:	e5 b1       	in	r30, 0x05	; 5
 23c:	ff 0f       	add	r31, r31
 23e:	ff 0f       	add	r31, r31
 240:	ff 0f       	add	r31, r31
 242:	fe 2b       	or	r31, r30
 244:	f5 b9       	out	0x05, r31	; 5
 246:	01 c0       	rjmp	.+2      	; 0x24a <writetoAll16BitShiftRegisters+0x92>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
 248:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 24a:	ea e0       	ldi	r30, 0x0A	; 10
 24c:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
 24e:	00 00       	nop
 250:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
 252:	e9 f7       	brne	.-6      	; 0x24e <writetoAll16BitShiftRegisters+0x96>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
 254:	2f 9a       	sbi	0x05, 7	; 5
 256:	ea e0       	ldi	r30, 0x0A	; 10
 258:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 25a:	00 00       	nop
 25c:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 25e:	e9 f7       	brne	.-6      	; 0x25a <writetoAll16BitShiftRegisters+0xa2>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
 260:	2f 98       	cbi	0x05, 7	; 5
 262:	ea e0       	ldi	r30, 0x0A	; 10
 264:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 266:	00 00       	nop
 268:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 26a:	e9 f7       	brne	.-6      	; 0x266 <writetoAll16BitShiftRegisters+0xae>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 26c:	11 97       	sbiw	r26, 0x01	; 1
 26e:	08 f0       	brcs	.+2      	; 0x272 <writetoAll16BitShiftRegisters+0xba>
 270:	a6 cf       	rjmp	.-180    	; 0x1be <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
 272:	2d 9a       	sbi	0x05, 5	; 5
 274:	08 95       	ret

00000276 <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
 276:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
 278:	80 81       	ld	r24, Z
 27a:	91 81       	ldd	r25, Z+1	; 0x01
 27c:	84 36       	cpi	r24, 0x64	; 100
 27e:	91 05       	cpc	r25, r1
 280:	18 f4       	brcc	.+6      	; 0x288 <Joystick_Process_Raw+0x12>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	85 83       	std	Z+5, r24	; 0x05
 286:	07 c0       	rjmp	.+14     	; 0x296 <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
 288:	89 3e       	cpi	r24, 0xE9	; 233
 28a:	93 40       	sbci	r25, 0x03	; 3
 28c:	18 f0       	brcs	.+6      	; 0x294 <Joystick_Process_Raw+0x1e>
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	85 83       	std	Z+5, r24	; 0x05
 292:	01 c0       	rjmp	.+2      	; 0x296 <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
 294:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	93 81       	ldd	r25, Z+3	; 0x03
 29a:	84 36       	cpi	r24, 0x64	; 100
 29c:	91 05       	cpc	r25, r1
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <Joystick_Process_Raw+0x30>
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	86 83       	std	Z+6, r24	; 0x06
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
 2a6:	89 3e       	cpi	r24, 0xE9	; 233
 2a8:	93 40       	sbci	r25, 0x03	; 3
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <Joystick_Process_Raw+0x3c>
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	86 83       	std	Z+6, r24	; 0x06
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
 2b2:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
 2b4:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
 2b6:	16 82       	std	Z+6, r1	; 0x06
 2b8:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
 2ba:	85 81       	ldd	r24, Z+5	; 0x05
 2bc:	81 11       	cpse	r24, r1
 2be:	fb cf       	rjmp	.-10     	; 0x2b6 <Joystick_Process_Raw+0x40>
 2c0:	08 95       	ret

000002c2 <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	68 df       	rcall	.-304    	; 0x19c <ADC_read>
 2cc:	99 83       	std	Y+1, r25	; 0x01
 2ce:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	64 df       	rcall	.-312    	; 0x19c <ADC_read>
 2d4:	9b 83       	std	Y+3, r25	; 0x03
 2d6:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
 2d8:	80 b1       	in	r24, 0x00	; 0
 2da:	83 fb       	bst	r24, 3
 2dc:	99 27       	eor	r25, r25
 2de:	90 f9       	bld	r25, 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	89 27       	eor	r24, r25
 2e4:	8c 83       	std	Y+4, r24	; 0x04
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <testDisplayJoystickADC>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <currentJoystickFramePtr>
 2fa:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
 2fe:	e8 80       	ld	r14, Y
 300:	f9 80       	ldd	r15, Y+1	; 0x01
 302:	e1 e1       	ldi	r30, 0x11	; 17
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	97 01       	movw	r18, r14
 308:	ad ec       	ldi	r26, 0xCD	; 205
 30a:	bc ec       	ldi	r27, 0xCC	; 204
 30c:	d3 d1       	rcall	.+934    	; 0x6b4 <__umulhisi3>
 30e:	ac 01       	movw	r20, r24
 310:	56 95       	lsr	r21
 312:	47 95       	ror	r20
 314:	56 95       	lsr	r21
 316:	47 95       	ror	r20
 318:	56 95       	lsr	r21
 31a:	47 95       	ror	r20
 31c:	9a 01       	movw	r18, r20
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	ca 01       	movw	r24, r20
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	82 0f       	add	r24, r18
 332:	93 1f       	adc	r25, r19
 334:	97 01       	movw	r18, r14
 336:	28 1b       	sub	r18, r24
 338:	39 0b       	sbc	r19, r25
 33a:	c9 01       	movw	r24, r18
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	83 83       	std	Z+3, r24	; 0x03
 340:	9a 01       	movw	r18, r20
 342:	b8 d1       	rcall	.+880    	; 0x6b4 <__umulhisi3>
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	9c 01       	movw	r18, r24
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	82 0f       	add	r24, r18
 364:	93 1f       	adc	r25, r19
 366:	48 1b       	sub	r20, r24
 368:	59 0b       	sbc	r21, r25
 36a:	40 5d       	subi	r20, 0xD0	; 208
 36c:	42 83       	std	Z+2, r20	; 0x02
 36e:	97 01       	movw	r18, r14
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	36 95       	lsr	r19
 376:	27 95       	ror	r18
 378:	ab e7       	ldi	r26, 0x7B	; 123
 37a:	b4 e1       	ldi	r27, 0x14	; 20
 37c:	9b d1       	rcall	.+822    	; 0x6b4 <__umulhisi3>
 37e:	ac 01       	movw	r20, r24
 380:	56 95       	lsr	r21
 382:	47 95       	ror	r20
 384:	9a 01       	movw	r18, r20
 386:	ad ec       	ldi	r26, 0xCD	; 205
 388:	bc ec       	ldi	r27, 0xCC	; 204
 38a:	94 d1       	rcall	.+808    	; 0x6b4 <__umulhisi3>
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	9c 01       	movw	r18, r24
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	82 0f       	add	r24, r18
 3ac:	93 1f       	adc	r25, r19
 3ae:	48 1b       	sub	r20, r24
 3b0:	59 0b       	sbc	r21, r25
 3b2:	40 5d       	subi	r20, 0xD0	; 208
 3b4:	41 83       	std	Z+1, r20	; 0x01
 3b6:	97 01       	movw	r18, r14
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	36 95       	lsr	r19
 3be:	27 95       	ror	r18
 3c0:	36 95       	lsr	r19
 3c2:	27 95       	ror	r18
 3c4:	a5 ec       	ldi	r26, 0xC5	; 197
 3c6:	b0 e2       	ldi	r27, 0x20	; 32
 3c8:	75 d1       	rcall	.+746    	; 0x6b4 <__umulhisi3>
 3ca:	ac 01       	movw	r20, r24
 3cc:	52 95       	swap	r21
 3ce:	42 95       	swap	r20
 3d0:	4f 70       	andi	r20, 0x0F	; 15
 3d2:	45 27       	eor	r20, r21
 3d4:	5f 70       	andi	r21, 0x0F	; 15
 3d6:	45 27       	eor	r20, r21
 3d8:	9a 01       	movw	r18, r20
 3da:	ad ec       	ldi	r26, 0xCD	; 205
 3dc:	bc ec       	ldi	r27, 0xCC	; 204
 3de:	6a d1       	rcall	.+724    	; 0x6b4 <__umulhisi3>
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	9c 01       	movw	r18, r24
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	48 1b       	sub	r20, r24
 404:	59 0b       	sbc	r21, r25
 406:	40 5d       	subi	r20, 0xD0	; 208
 408:	40 83       	st	Z, r20
 40a:	10 e2       	ldi	r17, 0x20	; 32
 40c:	14 83       	std	Z+4, r17	; 0x04
 40e:	ea 80       	ldd	r14, Y+2	; 0x02
 410:	fb 80       	ldd	r15, Y+3	; 0x03
 412:	97 01       	movw	r18, r14
 414:	4f d1       	rcall	.+670    	; 0x6b4 <__umulhisi3>
 416:	ac 01       	movw	r20, r24
 418:	56 95       	lsr	r21
 41a:	47 95       	ror	r20
 41c:	56 95       	lsr	r21
 41e:	47 95       	ror	r20
 420:	56 95       	lsr	r21
 422:	47 95       	ror	r20
 424:	9a 01       	movw	r18, r20
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	ca 01       	movw	r24, r20
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	97 01       	movw	r18, r14
 43e:	28 1b       	sub	r18, r24
 440:	39 0b       	sbc	r19, r25
 442:	c9 01       	movw	r24, r18
 444:	80 5d       	subi	r24, 0xD0	; 208
 446:	80 87       	std	Z+8, r24	; 0x08
 448:	9a 01       	movw	r18, r20
 44a:	34 d1       	rcall	.+616    	; 0x6b4 <__umulhisi3>
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	9c 01       	movw	r18, r24
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	82 0f       	add	r24, r18
 46c:	93 1f       	adc	r25, r19
 46e:	48 1b       	sub	r20, r24
 470:	59 0b       	sbc	r21, r25
 472:	40 5d       	subi	r20, 0xD0	; 208
 474:	47 83       	std	Z+7, r20	; 0x07
 476:	97 01       	movw	r18, r14
 478:	36 95       	lsr	r19
 47a:	27 95       	ror	r18
 47c:	36 95       	lsr	r19
 47e:	27 95       	ror	r18
 480:	ab e7       	ldi	r26, 0x7B	; 123
 482:	b4 e1       	ldi	r27, 0x14	; 20
 484:	17 d1       	rcall	.+558    	; 0x6b4 <__umulhisi3>
 486:	ac 01       	movw	r20, r24
 488:	56 95       	lsr	r21
 48a:	47 95       	ror	r20
 48c:	9a 01       	movw	r18, r20
 48e:	ad ec       	ldi	r26, 0xCD	; 205
 490:	bc ec       	ldi	r27, 0xCC	; 204
 492:	10 d1       	rcall	.+544    	; 0x6b4 <__umulhisi3>
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	9c 01       	movw	r18, r24
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	48 1b       	sub	r20, r24
 4b8:	59 0b       	sbc	r21, r25
 4ba:	40 5d       	subi	r20, 0xD0	; 208
 4bc:	46 83       	std	Z+6, r20	; 0x06
 4be:	97 01       	movw	r18, r14
 4c0:	36 95       	lsr	r19
 4c2:	27 95       	ror	r18
 4c4:	36 95       	lsr	r19
 4c6:	27 95       	ror	r18
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	a5 ec       	ldi	r26, 0xC5	; 197
 4ce:	b0 e2       	ldi	r27, 0x20	; 32
 4d0:	f1 d0       	rcall	.+482    	; 0x6b4 <__umulhisi3>
 4d2:	ac 01       	movw	r20, r24
 4d4:	52 95       	swap	r21
 4d6:	42 95       	swap	r20
 4d8:	4f 70       	andi	r20, 0x0F	; 15
 4da:	45 27       	eor	r20, r21
 4dc:	5f 70       	andi	r21, 0x0F	; 15
 4de:	45 27       	eor	r20, r21
 4e0:	9a 01       	movw	r18, r20
 4e2:	ad ec       	ldi	r26, 0xCD	; 205
 4e4:	bc ec       	ldi	r27, 0xCC	; 204
 4e6:	e6 d0       	rcall	.+460    	; 0x6b4 <__umulhisi3>
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	9c 01       	movw	r18, r24
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	82 0f       	add	r24, r18
 508:	93 1f       	adc	r25, r19
 50a:	48 1b       	sub	r20, r24
 50c:	59 0b       	sbc	r21, r25
 50e:	40 5d       	subi	r20, 0xD0	; 208
 510:	45 83       	std	Z+5, r20	; 0x05
 512:	11 87       	std	Z+9, r17	; 0x09
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	81 11       	cpse	r24, r1
 518:	02 c0       	rjmp	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51a:	80 e3       	ldi	r24, 0x30	; 48
 51c:	01 c0       	rjmp	.+2      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51e:	81 e3       	ldi	r24, 0x31	; 49
 520:	e1 e1       	ldi	r30, 0x11	; 17
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	82 87       	std	Z+10, r24	; 0x0a
 526:	13 86       	std	Z+11, r1	; 0x0b
 528:	bf 01       	movw	r22, r30
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0c de       	rcall	.-1000   	; 0x146 <LCD_DisplayString>
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	08 95       	ret

0000053a <TimerOn>:
 53a:	8b e0       	ldi	r24, 0x0B	; 11
 53c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 540:	8d e7       	ldi	r24, 0x7D	; 125
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 548:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 552:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 556:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 55a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 55e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 562:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 566:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 56a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 56e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 572:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 576:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 57a:	8f b7       	in	r24, 0x3f	; 63
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	8f bf       	out	0x3f, r24	; 63
 580:	08 95       	ret

00000582 <__vector_13>:
}


//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	af 93       	push	r26
 592:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 594:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 598:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 59c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 5a0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	a1 09       	sbc	r26, r1
 5a8:	b1 09       	sbc	r27, r1
 5aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 5ae:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 5b2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 5b6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	if(_avr_timer_cntcurr == 0){
 5ba:	89 2b       	or	r24, r25
 5bc:	8a 2b       	or	r24, r26
 5be:	8b 2b       	or	r24, r27
 5c0:	99 f4       	brne	.+38     	; 0x5e8 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 5c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 5cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 5d0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 5d4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 5d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 5dc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 5e0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 5e4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}
}
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 5fa:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 5fe:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 602:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 606:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 60a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 60e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 612:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 616:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 61a:	08 95       	ret

0000061c <Joystick_Tick>:
}

void Joystick_Tick(){
	//READ + POPULATE always into the next frame before swapping buffer
	Joystick_Read(nextJoystickFramePtr);	
 61c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 620:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 624:	4e de       	rcall	.-868    	; 0x2c2 <Joystick_Read>
	Joystick_Process_Raw(nextJoystickFramePtr);	
 626:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 62a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 62e:	23 de       	rcall	.-954    	; 0x276 <Joystick_Process_Raw>
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
 630:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <currentJoystickFramePtr>
 634:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
 638:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <nextJoystickFramePtr>
 63c:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 640:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <currentJoystickFramePtr+0x1>
 644:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <currentJoystickFramePtr>
	nextJoystickFramePtr = temp;
 648:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 64c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 650:	08 95       	ret

00000652 <main>:
}

int main(void)
{
	DDRA = 0x00;
 652:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 658:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 65a:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 65c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 65e:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 660:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 662:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 664:	89 dd       	rcall	.-1262   	; 0x178 <ADC_init>
	LCD_init();
 666:	57 dd       	rcall	.-1362   	; 0x116 <LCD_init>
 668:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	32 d0       	rcall	.+100    	; 0x6d2 <malloc>
 66e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <currentJoystickFramePtr+0x1>
 672:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <currentJoystickFramePtr>
 676:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	2b d0       	rcall	.+86     	; 0x6d2 <malloc>
 67c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 680:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 684:	64 e6       	ldi	r22, 0x64	; 100
 686:	70 e0       	ldi	r23, 0x00	; 0
// 			Effects[i]->pitches_ptr[j] = i*150.0; 
// 		}
// 	}
	
	//timing
	TimerSet(100);
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	b6 df       	rcall	.-148    	; 0x5fa <TimerSet>
	TimerOn();
 68e:	55 df       	rcall	.-342    	; 0x53a <TimerOn>
 690:	c5 df       	rcall	.-118    	; 0x61c <Joystick_Tick>
    while (1){
		Joystick_Tick();
 692:	2c de       	rcall	.-936    	; 0x2ec <testDisplayJoystickADC>
 694:	2f ef       	ldi	r18, 0xFF	; 255
		testDisplayJoystickADC(); //Working and not needed
 696:	3f ef       	ldi	r19, 0xFF	; 255
 698:	4f ef       	ldi	r20, 0xFF	; 255
		//Gamestate_Tick(); //TODO
		//
		//SoundEffect_Tick();
		writetoAll16BitShiftRegisters(0xFFFF, 0xFFFF,0xFFFF,0xFFFF);
 69a:	5f ef       	ldi	r21, 0xFF	; 255
 69c:	6f ef       	ldi	r22, 0xFF	; 255
 69e:	7f ef       	ldi	r23, 0xFF	; 255
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	89 dd       	rcall	.-1262   	; 0x1b8 <writetoAll16BitShiftRegisters>
 6a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
 6aa:	88 23       	and	r24, r24
		while(!TimerFlag);
 6ac:	e1 f3       	breq	.-8      	; 0x6a6 <main+0x54>
 6ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 6b2:	ee cf       	rjmp	.-36     	; 0x690 <main+0x3e>

000006b4 <__umulhisi3>:
		TimerFlag = 0;
 6b4:	a2 9f       	mul	r26, r18
 6b6:	b0 01       	movw	r22, r0
    }
 6b8:	b3 9f       	mul	r27, r19
 6ba:	c0 01       	movw	r24, r0
 6bc:	a3 9f       	mul	r26, r19
 6be:	70 0d       	add	r23, r0
 6c0:	81 1d       	adc	r24, r1
 6c2:	11 24       	eor	r1, r1
 6c4:	91 1d       	adc	r25, r1
 6c6:	b2 9f       	mul	r27, r18
 6c8:	70 0d       	add	r23, r0
 6ca:	81 1d       	adc	r24, r1
 6cc:	11 24       	eor	r1, r1
 6ce:	91 1d       	adc	r25, r1
 6d0:	08 95       	ret

000006d2 <malloc>:
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	91 05       	cpc	r25, r1
 6de:	10 f4       	brcc	.+4      	; 0x6e4 <malloc+0x12>
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__flp>
 6e8:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__flp+0x1>
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	a0 e0       	ldi	r26, 0x00	; 0
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	30 97       	sbiw	r30, 0x00	; 0
 6f6:	19 f1       	breq	.+70     	; 0x73e <malloc+0x6c>
 6f8:	40 81       	ld	r20, Z
 6fa:	51 81       	ldd	r21, Z+1	; 0x01
 6fc:	02 81       	ldd	r16, Z+2	; 0x02
 6fe:	13 81       	ldd	r17, Z+3	; 0x03
 700:	48 17       	cp	r20, r24
 702:	59 07       	cpc	r21, r25
 704:	c8 f0       	brcs	.+50     	; 0x738 <malloc+0x66>
 706:	84 17       	cp	r24, r20
 708:	95 07       	cpc	r25, r21
 70a:	69 f4       	brne	.+26     	; 0x726 <malloc+0x54>
 70c:	10 97       	sbiw	r26, 0x00	; 0
 70e:	31 f0       	breq	.+12     	; 0x71c <malloc+0x4a>
 710:	12 96       	adiw	r26, 0x02	; 2
 712:	0c 93       	st	X, r16
 714:	12 97       	sbiw	r26, 0x02	; 2
 716:	13 96       	adiw	r26, 0x03	; 3
 718:	1c 93       	st	X, r17
 71a:	27 c0       	rjmp	.+78     	; 0x76a <malloc+0x98>
 71c:	00 93 42 01 	sts	0x0142, r16	; 0x800142 <__flp>
 720:	10 93 43 01 	sts	0x0143, r17	; 0x800143 <__flp+0x1>
 724:	22 c0       	rjmp	.+68     	; 0x76a <malloc+0x98>
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	19 f0       	breq	.+6      	; 0x732 <malloc+0x60>
 72c:	42 17       	cp	r20, r18
 72e:	53 07       	cpc	r21, r19
 730:	18 f4       	brcc	.+6      	; 0x738 <malloc+0x66>
 732:	9a 01       	movw	r18, r20
 734:	bd 01       	movw	r22, r26
 736:	ef 01       	movw	r28, r30
 738:	df 01       	movw	r26, r30
 73a:	f8 01       	movw	r30, r16
 73c:	db cf       	rjmp	.-74     	; 0x6f4 <malloc+0x22>
 73e:	21 15       	cp	r18, r1
 740:	31 05       	cpc	r19, r1
 742:	f9 f0       	breq	.+62     	; 0x782 <malloc+0xb0>
 744:	28 1b       	sub	r18, r24
 746:	39 0b       	sbc	r19, r25
 748:	24 30       	cpi	r18, 0x04	; 4
 74a:	31 05       	cpc	r19, r1
 74c:	80 f4       	brcc	.+32     	; 0x76e <malloc+0x9c>
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	9b 81       	ldd	r25, Y+3	; 0x03
 752:	61 15       	cp	r22, r1
 754:	71 05       	cpc	r23, r1
 756:	21 f0       	breq	.+8      	; 0x760 <malloc+0x8e>
 758:	fb 01       	movw	r30, r22
 75a:	93 83       	std	Z+3, r25	; 0x03
 75c:	82 83       	std	Z+2, r24	; 0x02
 75e:	04 c0       	rjmp	.+8      	; 0x768 <malloc+0x96>
 760:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__flp+0x1>
 764:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__flp>
 768:	fe 01       	movw	r30, r28
 76a:	32 96       	adiw	r30, 0x02	; 2
 76c:	44 c0       	rjmp	.+136    	; 0x7f6 <malloc+0x124>
 76e:	fe 01       	movw	r30, r28
 770:	e2 0f       	add	r30, r18
 772:	f3 1f       	adc	r31, r19
 774:	81 93       	st	Z+, r24
 776:	91 93       	st	Z+, r25
 778:	22 50       	subi	r18, 0x02	; 2
 77a:	31 09       	sbc	r19, r1
 77c:	39 83       	std	Y+1, r19	; 0x01
 77e:	28 83       	st	Y, r18
 780:	3a c0       	rjmp	.+116    	; 0x7f6 <malloc+0x124>
 782:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 786:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 78a:	23 2b       	or	r18, r19
 78c:	41 f4       	brne	.+16     	; 0x79e <malloc+0xcc>
 78e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 792:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 796:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <__brkval+0x1>
 79a:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <__brkval>
 79e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7a6:	21 15       	cp	r18, r1
 7a8:	31 05       	cpc	r19, r1
 7aa:	41 f4       	brne	.+16     	; 0x7bc <malloc+0xea>
 7ac:	2d b7       	in	r18, 0x3d	; 61
 7ae:	3e b7       	in	r19, 0x3e	; 62
 7b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7b8:	24 1b       	sub	r18, r20
 7ba:	35 0b       	sbc	r19, r21
 7bc:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__brkval>
 7c0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__brkval+0x1>
 7c4:	e2 17       	cp	r30, r18
 7c6:	f3 07       	cpc	r31, r19
 7c8:	a0 f4       	brcc	.+40     	; 0x7f2 <malloc+0x120>
 7ca:	2e 1b       	sub	r18, r30
 7cc:	3f 0b       	sbc	r19, r31
 7ce:	28 17       	cp	r18, r24
 7d0:	39 07       	cpc	r19, r25
 7d2:	78 f0       	brcs	.+30     	; 0x7f2 <malloc+0x120>
 7d4:	ac 01       	movw	r20, r24
 7d6:	4e 5f       	subi	r20, 0xFE	; 254
 7d8:	5f 4f       	sbci	r21, 0xFF	; 255
 7da:	24 17       	cp	r18, r20
 7dc:	35 07       	cpc	r19, r21
 7de:	48 f0       	brcs	.+18     	; 0x7f2 <malloc+0x120>
 7e0:	4e 0f       	add	r20, r30
 7e2:	5f 1f       	adc	r21, r31
 7e4:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <__brkval+0x1>
 7e8:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <__brkval>
 7ec:	81 93       	st	Z+, r24
 7ee:	91 93       	st	Z+, r25
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <malloc+0x124>
 7f2:	e0 e0       	ldi	r30, 0x00	; 0
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	cf 01       	movw	r24, r30
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	08 95       	ret

00000802 <free>:
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	00 97       	sbiw	r24, 0x00	; 0
 808:	09 f4       	brne	.+2      	; 0x80c <free+0xa>
 80a:	81 c0       	rjmp	.+258    	; 0x90e <free+0x10c>
 80c:	fc 01       	movw	r30, r24
 80e:	32 97       	sbiw	r30, 0x02	; 2
 810:	13 82       	std	Z+3, r1	; 0x03
 812:	12 82       	std	Z+2, r1	; 0x02
 814:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__flp>
 818:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__flp+0x1>
 81c:	10 97       	sbiw	r26, 0x00	; 0
 81e:	81 f4       	brne	.+32     	; 0x840 <free+0x3e>
 820:	20 81       	ld	r18, Z
 822:	31 81       	ldd	r19, Z+1	; 0x01
 824:	82 0f       	add	r24, r18
 826:	93 1f       	adc	r25, r19
 828:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 82c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 830:	28 17       	cp	r18, r24
 832:	39 07       	cpc	r19, r25
 834:	51 f5       	brne	.+84     	; 0x88a <free+0x88>
 836:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <__brkval+0x1>
 83a:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__brkval>
 83e:	67 c0       	rjmp	.+206    	; 0x90e <free+0x10c>
 840:	ed 01       	movw	r28, r26
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	ce 17       	cp	r28, r30
 848:	df 07       	cpc	r29, r31
 84a:	40 f4       	brcc	.+16     	; 0x85c <free+0x5a>
 84c:	4a 81       	ldd	r20, Y+2	; 0x02
 84e:	5b 81       	ldd	r21, Y+3	; 0x03
 850:	9e 01       	movw	r18, r28
 852:	41 15       	cp	r20, r1
 854:	51 05       	cpc	r21, r1
 856:	f1 f0       	breq	.+60     	; 0x894 <free+0x92>
 858:	ea 01       	movw	r28, r20
 85a:	f5 cf       	rjmp	.-22     	; 0x846 <free+0x44>
 85c:	d3 83       	std	Z+3, r29	; 0x03
 85e:	c2 83       	std	Z+2, r28	; 0x02
 860:	40 81       	ld	r20, Z
 862:	51 81       	ldd	r21, Z+1	; 0x01
 864:	84 0f       	add	r24, r20
 866:	95 1f       	adc	r25, r21
 868:	c8 17       	cp	r28, r24
 86a:	d9 07       	cpc	r29, r25
 86c:	59 f4       	brne	.+22     	; 0x884 <free+0x82>
 86e:	88 81       	ld	r24, Y
 870:	99 81       	ldd	r25, Y+1	; 0x01
 872:	84 0f       	add	r24, r20
 874:	95 1f       	adc	r25, r21
 876:	02 96       	adiw	r24, 0x02	; 2
 878:	91 83       	std	Z+1, r25	; 0x01
 87a:	80 83       	st	Z, r24
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	9b 81       	ldd	r25, Y+3	; 0x03
 880:	93 83       	std	Z+3, r25	; 0x03
 882:	82 83       	std	Z+2, r24	; 0x02
 884:	21 15       	cp	r18, r1
 886:	31 05       	cpc	r19, r1
 888:	29 f4       	brne	.+10     	; 0x894 <free+0x92>
 88a:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <__flp+0x1>
 88e:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <__flp>
 892:	3d c0       	rjmp	.+122    	; 0x90e <free+0x10c>
 894:	e9 01       	movw	r28, r18
 896:	fb 83       	std	Y+3, r31	; 0x03
 898:	ea 83       	std	Y+2, r30	; 0x02
 89a:	49 91       	ld	r20, Y+
 89c:	59 91       	ld	r21, Y+
 89e:	c4 0f       	add	r28, r20
 8a0:	d5 1f       	adc	r29, r21
 8a2:	ec 17       	cp	r30, r28
 8a4:	fd 07       	cpc	r31, r29
 8a6:	61 f4       	brne	.+24     	; 0x8c0 <free+0xbe>
 8a8:	80 81       	ld	r24, Z
 8aa:	91 81       	ldd	r25, Z+1	; 0x01
 8ac:	84 0f       	add	r24, r20
 8ae:	95 1f       	adc	r25, r21
 8b0:	02 96       	adiw	r24, 0x02	; 2
 8b2:	e9 01       	movw	r28, r18
 8b4:	99 83       	std	Y+1, r25	; 0x01
 8b6:	88 83       	st	Y, r24
 8b8:	82 81       	ldd	r24, Z+2	; 0x02
 8ba:	93 81       	ldd	r25, Z+3	; 0x03
 8bc:	9b 83       	std	Y+3, r25	; 0x03
 8be:	8a 83       	std	Y+2, r24	; 0x02
 8c0:	e0 e0       	ldi	r30, 0x00	; 0
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	12 96       	adiw	r26, 0x02	; 2
 8c6:	8d 91       	ld	r24, X+
 8c8:	9c 91       	ld	r25, X
 8ca:	13 97       	sbiw	r26, 0x03	; 3
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	19 f0       	breq	.+6      	; 0x8d6 <free+0xd4>
 8d0:	fd 01       	movw	r30, r26
 8d2:	dc 01       	movw	r26, r24
 8d4:	f7 cf       	rjmp	.-18     	; 0x8c4 <free+0xc2>
 8d6:	8d 91       	ld	r24, X+
 8d8:	9c 91       	ld	r25, X
 8da:	11 97       	sbiw	r26, 0x01	; 1
 8dc:	9d 01       	movw	r18, r26
 8de:	2e 5f       	subi	r18, 0xFE	; 254
 8e0:	3f 4f       	sbci	r19, 0xFF	; 255
 8e2:	82 0f       	add	r24, r18
 8e4:	93 1f       	adc	r25, r19
 8e6:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__brkval>
 8ea:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__brkval+0x1>
 8ee:	28 17       	cp	r18, r24
 8f0:	39 07       	cpc	r19, r25
 8f2:	69 f4       	brne	.+26     	; 0x90e <free+0x10c>
 8f4:	30 97       	sbiw	r30, 0x00	; 0
 8f6:	29 f4       	brne	.+10     	; 0x902 <free+0x100>
 8f8:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__flp+0x1>
 8fc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__flp>
 900:	02 c0       	rjmp	.+4      	; 0x906 <free+0x104>
 902:	13 82       	std	Z+3, r1	; 0x03
 904:	12 82       	std	Z+2, r1	; 0x02
 906:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <__brkval+0x1>
 90a:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <__brkval>
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
