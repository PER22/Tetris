
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  0080010a  0080010a  000009c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f8  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc7  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b73  00000000  00000000  00002d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079b  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bae  00000000  00000000  000042ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	0d c2       	rjmp	.+1050   	; 0x450 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7b 01       	movw	r14, r22
  8e:	78 01       	movw	r14, r16
  90:	75 01       	movw	r14, r10
  92:	72 01       	movw	r14, r4
  94:	6f 01       	movw	r12, r30
  96:	6c 01       	movw	r12, r24
  98:	69 01       	movw	r12, r18
  9a:	66 01       	movw	r12, r12

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e6 e2       	ldi	r30, 0x26	; 38
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ae 33       	cpi	r26, 0x3E	; 62
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	8c d2       	rcall	.+1304   	; 0x5ec <main>
  d4:	26 c4       	rjmp	.+2124   	; 0x922 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <delay_ms>:
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	5c f0       	brlt	.+22     	; 0xf4 <delay_ms+0x1c>
  de:	08 95       	ret
  e0:	00 00       	nop
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <delay_ms+0x8>
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	84 17       	cp	r24, r20
  ee:	95 07       	cpc	r25, r21
  f0:	19 f4       	brne	.+6      	; 0xf8 <delay_ms+0x20>
  f2:	08 95       	ret
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	33 e0       	ldi	r19, 0x03	; 3
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <delay_ms+0x8>

000000fe <LCD_WriteCommand>:
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	88 b9       	out	0x08, r24	; 8
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	00 00       	nop
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <delay_ms>
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	e1 df       	rcall	.-62     	; 0xd8 <delay_ms>
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	f2 df       	rcall	.-28     	; 0xfe <LCD_WriteCommand>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	f0 df       	rcall	.-32     	; 0xfe <LCD_WriteCommand>
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	ee df       	rcall	.-36     	; 0xfe <LCD_WriteCommand>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	ec df       	rcall	.-40     	; 0xfe <LCD_WriteCommand>
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	d6 cf       	rjmp	.-84     	; 0xd8 <delay_ms>
 12c:	08 95       	ret

0000012e <ADC_init>:
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <ADC_channel>:
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	48 f4       	brcc	.+18     	; 0x150 <ADC_channel+0x16>
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	98 7f       	andi	r25, 0xF8	; 248
 146:	90 83       	st	Z, r25
 148:	90 81       	ld	r25, Z
 14a:	87 70       	andi	r24, 0x07	; 7
 14c:	89 2b       	or	r24, r25
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <ADC_read>:
 152:	f3 df       	rcall	.-26     	; 0x13a <ADC_channel>
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
 15e:	80 81       	ld	r24, Z
 160:	86 fd       	sbrc	r24, 6
 162:	fd cf       	rjmp	.-6      	; 0x15e <ADC_read+0xc>
 164:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 168:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 16c:	08 95       	ret

0000016e <writetoAll16BitShiftRegisters>:
 16e:	2d 98       	cbi	0x05, 5	; 5
 170:	af e0       	ldi	r26, 0x0F	; 15
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	0a 2e       	mov	r0, r26
 178:	02 c0       	rjmp	.+4      	; 0x17e <writetoAll16BitShiftRegisters+0x10>
 17a:	f6 95       	lsr	r31
 17c:	e7 95       	ror	r30
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <writetoAll16BitShiftRegisters+0xc>
 182:	fe 2f       	mov	r31, r30
 184:	f1 70       	andi	r31, 0x01	; 1
 186:	e0 ff       	sbrs	r30, 0
 188:	04 c0       	rjmp	.+8      	; 0x192 <writetoAll16BitShiftRegisters+0x24>
 18a:	e5 b1       	in	r30, 0x05	; 5
 18c:	ef 2b       	or	r30, r31
 18e:	e5 b9       	out	0x05, r30	; 5
 190:	01 c0       	rjmp	.+2      	; 0x194 <writetoAll16BitShiftRegisters+0x26>
 192:	28 98       	cbi	0x05, 0	; 5
 194:	fb 01       	movw	r30, r22
 196:	0a 2e       	mov	r0, r26
 198:	02 c0       	rjmp	.+4      	; 0x19e <writetoAll16BitShiftRegisters+0x30>
 19a:	f6 95       	lsr	r31
 19c:	e7 95       	ror	r30
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <writetoAll16BitShiftRegisters+0x2c>
 1a2:	fe 2f       	mov	r31, r30
 1a4:	f1 70       	andi	r31, 0x01	; 1
 1a6:	e0 ff       	sbrs	r30, 0
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <writetoAll16BitShiftRegisters+0x46>
 1aa:	e5 b1       	in	r30, 0x05	; 5
 1ac:	ff 0f       	add	r31, r31
 1ae:	fe 2b       	or	r31, r30
 1b0:	f5 b9       	out	0x05, r31	; 5
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <writetoAll16BitShiftRegisters+0x48>
 1b4:	29 98       	cbi	0x05, 1	; 5
 1b6:	fa 01       	movw	r30, r20
 1b8:	0a 2e       	mov	r0, r26
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <writetoAll16BitShiftRegisters+0x52>
 1bc:	f6 95       	lsr	r31
 1be:	e7 95       	ror	r30
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <writetoAll16BitShiftRegisters+0x4e>
 1c4:	fe 2f       	mov	r31, r30
 1c6:	f1 70       	andi	r31, 0x01	; 1
 1c8:	e0 ff       	sbrs	r30, 0
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <writetoAll16BitShiftRegisters+0x6a>
 1cc:	e5 b1       	in	r30, 0x05	; 5
 1ce:	ff 0f       	add	r31, r31
 1d0:	ff 0f       	add	r31, r31
 1d2:	fe 2b       	or	r31, r30
 1d4:	f5 b9       	out	0x05, r31	; 5
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <writetoAll16BitShiftRegisters+0x6c>
 1d8:	2a 98       	cbi	0x05, 2	; 5
 1da:	f9 01       	movw	r30, r18
 1dc:	0a 2e       	mov	r0, r26
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <writetoAll16BitShiftRegisters+0x76>
 1e0:	f6 95       	lsr	r31
 1e2:	e7 95       	ror	r30
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <writetoAll16BitShiftRegisters+0x72>
 1e8:	fe 2f       	mov	r31, r30
 1ea:	f1 70       	andi	r31, 0x01	; 1
 1ec:	e0 ff       	sbrs	r30, 0
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <writetoAll16BitShiftRegisters+0x90>
 1f0:	e5 b1       	in	r30, 0x05	; 5
 1f2:	ff 0f       	add	r31, r31
 1f4:	ff 0f       	add	r31, r31
 1f6:	ff 0f       	add	r31, r31
 1f8:	fe 2b       	or	r31, r30
 1fa:	f5 b9       	out	0x05, r31	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <writetoAll16BitShiftRegisters+0x92>
 1fe:	2b 98       	cbi	0x05, 3	; 5
 200:	ea e0       	ldi	r30, 0x0A	; 10
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	00 00       	nop
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	e9 f7       	brne	.-6      	; 0x204 <writetoAll16BitShiftRegisters+0x96>
 20a:	2f 9a       	sbi	0x05, 7	; 5
 20c:	ea e0       	ldi	r30, 0x0A	; 10
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	00 00       	nop
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	e9 f7       	brne	.-6      	; 0x210 <writetoAll16BitShiftRegisters+0xa2>
 216:	2f 98       	cbi	0x05, 7	; 5
 218:	ea e0       	ldi	r30, 0x0A	; 10
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	00 00       	nop
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	e9 f7       	brne	.-6      	; 0x21c <writetoAll16BitShiftRegisters+0xae>
 222:	11 97       	sbiw	r26, 0x01	; 1
 224:	08 f0       	brcs	.+2      	; 0x228 <writetoAll16BitShiftRegisters+0xba>
 226:	a6 cf       	rjmp	.-180    	; 0x174 <writetoAll16BitShiftRegisters+0x6>
 228:	2d 9a       	sbi	0x05, 5	; 5
 22a:	08 95       	ret

0000022c <Joystick_Process_Raw>:
 22c:	fc 01       	movw	r30, r24
 22e:	80 81       	ld	r24, Z
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	84 36       	cpi	r24, 0x64	; 100
 234:	91 05       	cpc	r25, r1
 236:	18 f4       	brcc	.+6      	; 0x23e <Joystick_Process_Raw+0x12>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	85 83       	std	Z+5, r24	; 0x05
 23c:	07 c0       	rjmp	.+14     	; 0x24c <Joystick_Process_Raw+0x20>
 23e:	89 3e       	cpi	r24, 0xE9	; 233
 240:	93 40       	sbci	r25, 0x03	; 3
 242:	18 f0       	brcs	.+6      	; 0x24a <Joystick_Process_Raw+0x1e>
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	85 83       	std	Z+5, r24	; 0x05
 248:	01 c0       	rjmp	.+2      	; 0x24c <Joystick_Process_Raw+0x20>
 24a:	15 82       	std	Z+5, r1	; 0x05
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	84 36       	cpi	r24, 0x64	; 100
 252:	91 05       	cpc	r25, r1
 254:	18 f4       	brcc	.+6      	; 0x25c <Joystick_Process_Raw+0x30>
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	86 83       	std	Z+6, r24	; 0x06
 25a:	0a c0       	rjmp	.+20     	; 0x270 <Joystick_Process_Raw+0x44>
 25c:	89 3e       	cpi	r24, 0xE9	; 233
 25e:	93 40       	sbci	r25, 0x03	; 3
 260:	18 f0       	brcs	.+6      	; 0x268 <Joystick_Process_Raw+0x3c>
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	86 83       	std	Z+6, r24	; 0x06
 266:	04 c0       	rjmp	.+8      	; 0x270 <Joystick_Process_Raw+0x44>
 268:	16 82       	std	Z+6, r1	; 0x06
 26a:	08 95       	ret
 26c:	16 82       	std	Z+6, r1	; 0x06
 26e:	08 95       	ret
 270:	85 81       	ldd	r24, Z+5	; 0x05
 272:	81 11       	cpse	r24, r1
 274:	fb cf       	rjmp	.-10     	; 0x26c <Joystick_Process_Raw+0x40>
 276:	08 95       	ret

00000278 <Joystick_Read>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	68 df       	rcall	.-304    	; 0x152 <ADC_read>
 282:	99 83       	std	Y+1, r25	; 0x01
 284:	88 83       	st	Y, r24
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	64 df       	rcall	.-312    	; 0x152 <ADC_read>
 28a:	9b 83       	std	Y+3, r25	; 0x03
 28c:	8a 83       	std	Y+2, r24	; 0x02
 28e:	80 b1       	in	r24, 0x00	; 0
 290:	83 fb       	bst	r24, 3
 292:	99 27       	eor	r25, r25
 294:	90 f9       	bld	r25, 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	89 27       	eor	r24, r25
 29a:	8c 83       	std	Y+4, r24	; 0x04
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
 2a2:	8f 92       	push	r8
 2a4:	9f 92       	push	r9
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
 2be:	87 70       	andi	r24, 0x07	; 7
	switch(column){
 2c0:	48 2f       	mov	r20, r24
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	fa 01       	movw	r30, r20
 2c6:	ea 5b       	subi	r30, 0xBA	; 186
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	01 c2       	rjmp	.+1026   	; 0x6ce <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
 2cc:	4f ef       	ldi	r20, 0xFF	; 255
 2ce:	50 e8       	ldi	r21, 0x80	; 128
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <pulseColumn+0x58>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
 2d2:	4f ef       	ldi	r20, 0xFF	; 255
 2d4:	50 e4       	ldi	r21, 0x40	; 64
			break;
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <pulseColumn+0x58>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
 2d8:	4f ef       	ldi	r20, 0xFF	; 255
 2da:	50 e2       	ldi	r21, 0x20	; 32
			break;
 2dc:	0e c0       	rjmp	.+28     	; 0x2fa <pulseColumn+0x58>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
 2de:	4f ef       	ldi	r20, 0xFF	; 255
 2e0:	50 e1       	ldi	r21, 0x10	; 16
			break;
 2e2:	0b c0       	rjmp	.+22     	; 0x2fa <pulseColumn+0x58>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	58 e0       	ldi	r21, 0x08	; 8
			break;
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <pulseColumn+0x58>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
 2ea:	4f ef       	ldi	r20, 0xFF	; 255
 2ec:	54 e0       	ldi	r21, 0x04	; 4
			break;
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <pulseColumn+0x58>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
 2f0:	4f ef       	ldi	r20, 0xFF	; 255
 2f2:	52 e0       	ldi	r21, 0x02	; 2
			break;
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <pulseColumn+0x58>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
 2f6:	4f ef       	ldi	r20, 0xFF	; 255
 2f8:	51 e0       	ldi	r21, 0x01	; 1
 2fa:	0f 2e       	mov	r0, r31
 2fc:	ff e0       	ldi	r31, 0x0F	; 15
 2fe:	8f 2e       	mov	r8, r31
 300:	91 2c       	mov	r9, r1
 302:	f0 2d       	mov	r31, r0
 304:	8c 0e       	add	r8, r28
 306:	9d 1e       	adc	r9, r29
 308:	10 e1       	ldi	r17, 0x10	; 16
 30a:	81 9f       	mul	r24, r17
 30c:	80 0c       	add	r8, r0
 30e:	91 1c       	adc	r9, r1
 310:	11 24       	eor	r1, r1
 312:	9a 01       	movw	r18, r20
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f0 e0       	ldi	r31, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
 318:	6f ef       	ldi	r22, 0xFF	; 255
 31a:	7f ef       	ldi	r23, 0xFF	; 255
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	9f ef       	ldi	r25, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 320:	cc 24       	eor	r12, r12
 322:	c3 94       	inc	r12
 324:	d1 2c       	mov	r13, r1
 326:	5f 01       	movw	r10, r30
 328:	a8 e0       	ldi	r26, 0x08	; 8
 32a:	aa 0e       	add	r10, r26
 32c:	b1 1c       	adc	r11, r1
 32e:	84 01       	movw	r16, r8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
 330:	d4 01       	movw	r26, r8
 332:	18 96       	adiw	r26, 0x08	; 8
 334:	fc 90       	ld	r15, X
 336:	f0 fe       	sbrs	r15, 0
 338:	0c c0       	rjmp	.+24     	; 0x352 <pulseColumn+0xb0>
 33a:	76 01       	movw	r14, r12
 33c:	0e 2e       	mov	r0, r30
 33e:	02 c0       	rjmp	.+4      	; 0x344 <pulseColumn+0xa2>
 340:	ee 0c       	add	r14, r14
 342:	ff 1c       	adc	r15, r15
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <pulseColumn+0x9e>
 348:	e0 94       	com	r14
 34a:	f0 94       	com	r15
 34c:	6e 21       	and	r22, r14
 34e:	7f 21       	and	r23, r15
 350:	1b c0       	rjmp	.+54     	; 0x388 <pulseColumn+0xe6>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
 352:	f2 fe       	sbrs	r15, 2
 354:	0c c0       	rjmp	.+24     	; 0x36e <pulseColumn+0xcc>
 356:	76 01       	movw	r14, r12
 358:	0e 2e       	mov	r0, r30
 35a:	02 c0       	rjmp	.+4      	; 0x360 <pulseColumn+0xbe>
 35c:	ee 0c       	add	r14, r14
 35e:	ff 1c       	adc	r15, r15
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <pulseColumn+0xba>
 364:	e0 94       	com	r14
 366:	f0 94       	com	r15
 368:	2e 21       	and	r18, r14
 36a:	3f 21       	and	r19, r15
 36c:	0d c0       	rjmp	.+26     	; 0x388 <pulseColumn+0xe6>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 36e:	f1 fe       	sbrs	r15, 1
 370:	0b c0       	rjmp	.+22     	; 0x388 <pulseColumn+0xe6>
 372:	76 01       	movw	r14, r12
 374:	0a 2c       	mov	r0, r10
 376:	02 c0       	rjmp	.+4      	; 0x37c <pulseColumn+0xda>
 378:	ee 0c       	add	r14, r14
 37a:	ff 1c       	adc	r15, r15
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <pulseColumn+0xd6>
 380:	e0 94       	com	r14
 382:	f0 94       	com	r15
 384:	6e 21       	and	r22, r14
 386:	7f 21       	and	r23, r15
		
		//matrix 1			
		if(frame.frame[column][i] & (1 << RGB_RED_BIT)){register1 &= ~(1 << i);}
 388:	d8 01       	movw	r26, r16
 38a:	1c 91       	ld	r17, X
 38c:	bf ef       	ldi	r27, 0xFF	; 255
 38e:	8b 1a       	sub	r8, r27
 390:	9b 0a       	sbc	r9, r27
 392:	10 ff       	sbrs	r17, 0
 394:	0c c0       	rjmp	.+24     	; 0x3ae <pulseColumn+0x10c>
 396:	86 01       	movw	r16, r12
 398:	0e 2e       	mov	r0, r30
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <pulseColumn+0xfe>
 39c:	00 0f       	add	r16, r16
 39e:	11 1f       	adc	r17, r17
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <pulseColumn+0xfa>
 3a4:	00 95       	com	r16
 3a6:	10 95       	com	r17
 3a8:	80 23       	and	r24, r16
 3aa:	91 23       	and	r25, r17
 3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <pulseColumn+0x140>
		
		else if(frame.frame[column][i] & (1 << RGB_GREEN_BIT)){register3 &= ~(1 << i); }
 3ae:	12 ff       	sbrs	r17, 2
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <pulseColumn+0x128>
 3b2:	86 01       	movw	r16, r12
 3b4:	0e 2e       	mov	r0, r30
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <pulseColumn+0x11a>
 3b8:	00 0f       	add	r16, r16
 3ba:	11 1f       	adc	r17, r17
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <pulseColumn+0x116>
 3c0:	00 95       	com	r16
 3c2:	10 95       	com	r17
 3c4:	40 23       	and	r20, r16
 3c6:	51 23       	and	r21, r17
 3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <pulseColumn+0x140>

		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
 3ca:	11 ff       	sbrs	r17, 1
 3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <pulseColumn+0x140>
 3ce:	86 01       	movw	r16, r12
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <pulseColumn+0x134>
 3d2:	00 0f       	add	r16, r16
 3d4:	11 1f       	adc	r17, r17
 3d6:	aa 94       	dec	r10
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <pulseColumn+0x130>
 3da:	00 95       	com	r16
 3dc:	10 95       	com	r17
 3de:	80 23       	and	r24, r16
 3e0:	91 23       	and	r25, r17
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 3e2:	31 96       	adiw	r30, 0x01	; 1
 3e4:	e8 30       	cpi	r30, 0x08	; 8
 3e6:	f1 05       	cpc	r31, r1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <pulseColumn+0x14a>
		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
 3ea:	9d cf       	rjmp	.-198    	; 0x326 <pulseColumn+0x84>
 3ec:	c0 de       	rcall	.-640    	; 0x16e <writetoAll16BitShiftRegisters>
		
	
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	bf 90       	pop	r11
 400:	af 90       	pop	r10
 402:	9f 90       	pop	r9
 404:	8f 90       	pop	r8
 406:	08 95       	ret

00000408 <TimerOn>:
	
	
	


void gamestateTick(){
 408:	8b e0       	ldi	r24, 0x0B	; 11
 40a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 40e:	8d e7       	ldi	r24, 0x7D	; 125
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 416:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 420:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 424:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 428:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 42c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 430:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 434:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 438:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 43c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 440:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 444:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
 448:	8f b7       	in	r24, 0x3f	; 63
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	8f bf       	out	0x3f, r24	; 63
 44e:	08 95       	ret

00000450 <__vector_13>:
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_cntcurr>
 466:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x1>
 46a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x2>
 46e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x3>
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	a1 09       	sbc	r26, r1
 476:	b1 09       	sbc	r27, r1
 478:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 47c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 480:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 484:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
 488:	89 2b       	or	r24, r25
 48a:	8a 2b       	or	r24, r26
 48c:	8b 2b       	or	r24, r27
 48e:	99 f4       	brne	.+38     	; 0x4b6 <__vector_13+0x66>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
 496:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 49a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 49e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 4a2:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 4a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 4aa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 4ae:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 4b2:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <TimerSet>:
 4c8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 4cc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 4d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 4d4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 4d8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <_avr_timer_cntcurr>
 4dc:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <_avr_timer_cntcurr+0x1>
 4e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_avr_timer_cntcurr+0x2>
 4e4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_avr_timer_cntcurr+0x3>
 4e8:	08 95       	ret

000004ea <Joystick_Tick>:
 4ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextJoystickFramePtr>
 4ee:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <nextJoystickFramePtr+0x1>
 4f2:	c2 de       	rcall	.-636    	; 0x278 <Joystick_Read>
 4f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <nextJoystickFramePtr>
 4f8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <nextJoystickFramePtr+0x1>
 4fc:	97 de       	rcall	.-722    	; 0x22c <Joystick_Process_Raw>
 4fe:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <currentJoystickFramePtr>
 502:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <currentJoystickFramePtr+0x1>
 506:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <nextJoystickFramePtr>
 50a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <nextJoystickFramePtr+0x1>
 50e:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <currentJoystickFramePtr+0x1>
 512:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <currentJoystickFramePtr>
 516:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <nextJoystickFramePtr+0x1>
 51a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <nextJoystickFramePtr>
 51e:	08 95       	ret

00000520 <LED_Tick>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	c0 58       	subi	r28, 0x80	; 128
 52a:	d1 09       	sbc	r29, r1
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 53a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 53e:	44 97       	sbiw	r24, 0x14	; 20
 540:	29 f5       	brne	.+74     	; 0x58c <LED_Tick+0x6c>
 542:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <current_RGB_FramePtr>
 546:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <current_RGB_FramePtr+0x1>
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	f9 01       	movw	r30, r18
 54e:	de 01       	movw	r26, r28
 550:	11 96       	adiw	r26, 0x01	; 1
 552:	01 90       	ld	r0, Z+
 554:	0d 92       	st	X+, r0
 556:	8a 95       	dec	r24
 558:	e1 f7       	brne	.-8      	; 0x552 <LED_Tick+0x32>
 55a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <next_RGB_FramePtr>
 55e:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <next_RGB_FramePtr+0x1>
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	d9 01       	movw	r26, r18
 566:	01 90       	ld	r0, Z+
 568:	0d 92       	st	X+, r0
 56a:	8a 95       	dec	r24
 56c:	e1 f7       	brne	.-8      	; 0x566 <LED_Tick+0x46>
 56e:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <next_RGB_FramePtr>
 572:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <next_RGB_FramePtr+0x1>
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	fe 01       	movw	r30, r28
 57a:	31 96       	adiw	r30, 0x01	; 1
 57c:	01 90       	ld	r0, Z+
 57e:	0d 92       	st	X+, r0
 580:	8a 95       	dec	r24
 582:	e1 f7       	brne	.-8      	; 0x57c <LED_Tick+0x5c>
 584:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 588:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 58c:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <current_RGB_FramePtr>
 590:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <current_RGB_FramePtr+0x1>
 594:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 598:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 59c:	9c 01       	movw	r18, r24
 59e:	2f 5f       	subi	r18, 0xFF	; 255
 5a0:	3f 4f       	sbci	r19, 0xFF	; 255
 5a2:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__data_end+0x1>
 5a6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
 5aa:	2d b7       	in	r18, 0x3d	; 61
 5ac:	3e b7       	in	r19, 0x3e	; 62
 5ae:	20 58       	subi	r18, 0x80	; 128
 5b0:	31 09       	sbc	r19, r1
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	3e bf       	out	0x3e, r19	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	2d bf       	out	0x3d, r18	; 61
 5bc:	ad b7       	in	r26, 0x3d	; 61
 5be:	be b7       	in	r27, 0x3e	; 62
 5c0:	11 96       	adiw	r26, 0x01	; 1
 5c2:	90 e8       	ldi	r25, 0x80	; 128
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	9a 95       	dec	r25
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <LED_Tick+0xa4>
 5cc:	6a de       	rcall	.-812    	; 0x2a2 <pulseColumn>
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	c0 58       	subi	r28, 0x80	; 128
 5da:	df 4f       	sbci	r29, 0xFF	; 255
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <main>:
}


int main(void)
{
	DDRA = 0x00;
 5ec:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 5f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 5f4:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 5f6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 5f8:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 5fa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 5fc:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 5fe:	97 dd       	rcall	.-1234   	; 0x12e <ADC_init>
	LCD_init();
 600:	87 dd       	rcall	.-1266   	; 0x110 <LCD_init>
 602:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	6c d0       	rcall	.+216    	; 0x6e0 <malloc>
 608:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <currentJoystickFramePtr+0x1>
 60c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <currentJoystickFramePtr>
 610:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	65 d0       	rcall	.+202    	; 0x6e0 <malloc>
 616:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <nextJoystickFramePtr+0x1>
 61a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <nextJoystickFramePtr>
 61e:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	5e d0       	rcall	.+188    	; 0x6e0 <malloc>
 624:	d8 2f       	mov	r29, r24
 626:	c9 2f       	mov	r28, r25
 628:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <current_RGB_FramePtr>
 62c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <current_RGB_FramePtr+0x1>
 630:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	55 d0       	rcall	.+170    	; 0x6e0 <malloc>
 636:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <next_RGB_FramePtr>
 63a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <next_RGB_FramePtr+0x1>
 63e:	4d 2f       	mov	r20, r29
 640:	5c 2f       	mov	r21, r28
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 646:	a2 e0       	ldi	r26, 0x02	; 2
 648:	18 c0       	rjmp	.+48     	; 0x67a <main+0x8e>
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 64a:	60 fd       	sbrc	r22, 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <main+0x66>
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
 64e:	a0 83       	st	Z, r26
 650:	01 c0       	rjmp	.+2      	; 0x654 <main+0x68>
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 652:	a0 83       	st	Z, r26
 654:	6f 5f       	subi	r22, 0xFF	; 255
			}
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	31 96       	adiw	r30, 0x01	; 1
 65a:	c6 17       	cp	r28, r22
 65c:	d7 07       	cpc	r29, r23
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
 65e:	a9 f7       	brne	.-22     	; 0x64a <main+0x5e>
 660:	2f 5f       	subi	r18, 0xFF	; 255
 662:	3f 4f       	sbci	r19, 0xFF	; 255
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 664:	40 5f       	subi	r20, 0xF0	; 240
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	28 30       	cpi	r18, 0x08	; 8
 66a:	31 05       	cpc	r19, r1
 66c:	31 f4       	brne	.+12     	; 0x67a <main+0x8e>
 66e:	28 2f       	mov	r18, r24
 670:	39 2f       	mov	r19, r25
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	64 e0       	ldi	r22, 0x04	; 4
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <main+0xba>
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
			}
			else{
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 67a:	b9 01       	movw	r22, r18
 67c:	e9 01       	movw	r28, r18
 67e:	60 96       	adiw	r28, 0x10	; 16
 680:	fa 01       	movw	r30, r20
 682:	e3 cf       	rjmp	.-58     	; 0x64a <main+0x5e>
	
}


int main(void)
{
 684:	40 fd       	sbrc	r20, 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <main+0xa0>
			}
		}
	}
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if((i+j) % 2 == 0){
 688:	60 83       	st	Z, r22
 68a:	01 c0       	rjmp	.+2      	; 0x68e <main+0xa2>
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 68c:	60 83       	st	Z, r22
 68e:	4f 5f       	subi	r20, 0xFF	; 255
			}
			else{
				next_RGB_FramePtr->frame[i][j] = (1 << RGB_GREEN_BIT);
 690:	5f 4f       	sbci	r21, 0xFF	; 255
 692:	31 96       	adiw	r30, 0x01	; 1
 694:	4a 17       	cp	r20, r26
 696:	5b 07       	cpc	r21, r27
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
			}
		}
	}
	for (int i= 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
 698:	a9 f7       	brne	.-22     	; 0x684 <main+0x98>
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	20 5f       	subi	r18, 0xF0	; 240
			else{
				current_RGB_FramePtr->frame[i][j] = (1 << RGB_BLUE_BIT);
			}
		}
	}
	for (int i= 0; i < 8; i++){
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	88 30       	cpi	r24, 0x08	; 8
 6a2:	91 05       	cpc	r25, r1
 6a4:	29 f0       	breq	.+10     	; 0x6b0 <main+0xc4>
 6a6:	ac 01       	movw	r20, r24
 6a8:	dc 01       	movw	r26, r24
 6aa:	50 96       	adiw	r26, 0x10	; 16
 6ac:	f9 01       	movw	r30, r18
 6ae:	ea cf       	rjmp	.-44     	; 0x684 <main+0x98>
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
	
	//TEST CODE
	for (int i= 0; i < 8; i++){
 6b0:	61 e0       	ldi	r22, 0x01	; 1
// 			Effects[i]->pitches_ptr[j] = i*150.0; 
// 		}
// 	}
	
	//timing
	TimerSet(1);
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	07 df       	rcall	.-498    	; 0x4c8 <TimerSet>
	unsigned int cnt = 0;
	
	TimerOn();
 6ba:	a6 de       	rcall	.-692    	; 0x408 <TimerOn>
 6bc:	16 df       	rcall	.-468    	; 0x4ea <Joystick_Tick>
    while (1){
	Joystick_Tick();
 6be:	30 df       	rcall	.-416    	; 0x520 <LED_Tick>
 6c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
	//testDisplayJoystickADC(); //Working and not needed
		//Gamestate_Tick(); //TODO
		
		//SoundEffect_Tick();
		LED_Tick();
 6c4:	88 23       	and	r24, r24
		
		while(!TimerFlag);
 6c6:	e1 f3       	breq	.-8      	; 0x6c0 <main+0xd4>
 6c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
 6cc:	f7 cf       	rjmp	.-18     	; 0x6bc <main+0xd0>

000006ce <__tablejump2__>:
		TimerFlag = 0;
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
    }
 6d2:	00 24       	eor	r0, r0
 6d4:	00 1c       	adc	r0, r0
 6d6:	0b be       	out	0x3b, r0	; 59
 6d8:	07 90       	elpm	r0, Z+
 6da:	f6 91       	elpm	r31, Z
 6dc:	e0 2d       	mov	r30, r0
 6de:	09 94       	ijmp

000006e0 <malloc>:
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	91 05       	cpc	r25, r1
 6ec:	10 f4       	brcc	.+4      	; 0x6f2 <malloc+0x12>
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__flp>
 6f6:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__flp+0x1>
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	a0 e0       	ldi	r26, 0x00	; 0
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	30 97       	sbiw	r30, 0x00	; 0
 704:	19 f1       	breq	.+70     	; 0x74c <malloc+0x6c>
 706:	40 81       	ld	r20, Z
 708:	51 81       	ldd	r21, Z+1	; 0x01
 70a:	02 81       	ldd	r16, Z+2	; 0x02
 70c:	13 81       	ldd	r17, Z+3	; 0x03
 70e:	48 17       	cp	r20, r24
 710:	59 07       	cpc	r21, r25
 712:	c8 f0       	brcs	.+50     	; 0x746 <malloc+0x66>
 714:	84 17       	cp	r24, r20
 716:	95 07       	cpc	r25, r21
 718:	69 f4       	brne	.+26     	; 0x734 <malloc+0x54>
 71a:	10 97       	sbiw	r26, 0x00	; 0
 71c:	31 f0       	breq	.+12     	; 0x72a <malloc+0x4a>
 71e:	12 96       	adiw	r26, 0x02	; 2
 720:	0c 93       	st	X, r16
 722:	12 97       	sbiw	r26, 0x02	; 2
 724:	13 96       	adiw	r26, 0x03	; 3
 726:	1c 93       	st	X, r17
 728:	27 c0       	rjmp	.+78     	; 0x778 <malloc+0x98>
 72a:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <__flp>
 72e:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__flp+0x1>
 732:	22 c0       	rjmp	.+68     	; 0x778 <malloc+0x98>
 734:	21 15       	cp	r18, r1
 736:	31 05       	cpc	r19, r1
 738:	19 f0       	breq	.+6      	; 0x740 <malloc+0x60>
 73a:	42 17       	cp	r20, r18
 73c:	53 07       	cpc	r21, r19
 73e:	18 f4       	brcc	.+6      	; 0x746 <malloc+0x66>
 740:	9a 01       	movw	r18, r20
 742:	bd 01       	movw	r22, r26
 744:	ef 01       	movw	r28, r30
 746:	df 01       	movw	r26, r30
 748:	f8 01       	movw	r30, r16
 74a:	db cf       	rjmp	.-74     	; 0x702 <malloc+0x22>
 74c:	21 15       	cp	r18, r1
 74e:	31 05       	cpc	r19, r1
 750:	f9 f0       	breq	.+62     	; 0x790 <malloc+0xb0>
 752:	28 1b       	sub	r18, r24
 754:	39 0b       	sbc	r19, r25
 756:	24 30       	cpi	r18, 0x04	; 4
 758:	31 05       	cpc	r19, r1
 75a:	80 f4       	brcc	.+32     	; 0x77c <malloc+0x9c>
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	9b 81       	ldd	r25, Y+3	; 0x03
 760:	61 15       	cp	r22, r1
 762:	71 05       	cpc	r23, r1
 764:	21 f0       	breq	.+8      	; 0x76e <malloc+0x8e>
 766:	fb 01       	movw	r30, r22
 768:	93 83       	std	Z+3, r25	; 0x03
 76a:	82 83       	std	Z+2, r24	; 0x02
 76c:	04 c0       	rjmp	.+8      	; 0x776 <malloc+0x96>
 76e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__flp+0x1>
 772:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__flp>
 776:	fe 01       	movw	r30, r28
 778:	32 96       	adiw	r30, 0x02	; 2
 77a:	44 c0       	rjmp	.+136    	; 0x804 <malloc+0x124>
 77c:	fe 01       	movw	r30, r28
 77e:	e2 0f       	add	r30, r18
 780:	f3 1f       	adc	r31, r19
 782:	81 93       	st	Z+, r24
 784:	91 93       	st	Z+, r25
 786:	22 50       	subi	r18, 0x02	; 2
 788:	31 09       	sbc	r19, r1
 78a:	39 83       	std	Y+1, r19	; 0x01
 78c:	28 83       	st	Y, r18
 78e:	3a c0       	rjmp	.+116    	; 0x804 <malloc+0x124>
 790:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 794:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 798:	23 2b       	or	r18, r19
 79a:	41 f4       	brne	.+16     	; 0x7ac <malloc+0xcc>
 79c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7a4:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__brkval+0x1>
 7a8:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__brkval>
 7ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7b4:	21 15       	cp	r18, r1
 7b6:	31 05       	cpc	r19, r1
 7b8:	41 f4       	brne	.+16     	; 0x7ca <malloc+0xea>
 7ba:	2d b7       	in	r18, 0x3d	; 61
 7bc:	3e b7       	in	r19, 0x3e	; 62
 7be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7c6:	24 1b       	sub	r18, r20
 7c8:	35 0b       	sbc	r19, r21
 7ca:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__brkval>
 7ce:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__brkval+0x1>
 7d2:	e2 17       	cp	r30, r18
 7d4:	f3 07       	cpc	r31, r19
 7d6:	a0 f4       	brcc	.+40     	; 0x800 <malloc+0x120>
 7d8:	2e 1b       	sub	r18, r30
 7da:	3f 0b       	sbc	r19, r31
 7dc:	28 17       	cp	r18, r24
 7de:	39 07       	cpc	r19, r25
 7e0:	78 f0       	brcs	.+30     	; 0x800 <malloc+0x120>
 7e2:	ac 01       	movw	r20, r24
 7e4:	4e 5f       	subi	r20, 0xFE	; 254
 7e6:	5f 4f       	sbci	r21, 0xFF	; 255
 7e8:	24 17       	cp	r18, r20
 7ea:	35 07       	cpc	r19, r21
 7ec:	48 f0       	brcs	.+18     	; 0x800 <malloc+0x120>
 7ee:	4e 0f       	add	r20, r30
 7f0:	5f 1f       	adc	r21, r31
 7f2:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <__brkval+0x1>
 7f6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <__brkval>
 7fa:	81 93       	st	Z+, r24
 7fc:	91 93       	st	Z+, r25
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <malloc+0x124>
 800:	e0 e0       	ldi	r30, 0x00	; 0
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	cf 01       	movw	r24, r30
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	08 95       	ret

00000810 <free>:
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	09 f4       	brne	.+2      	; 0x81a <free+0xa>
 818:	81 c0       	rjmp	.+258    	; 0x91c <free+0x10c>
 81a:	fc 01       	movw	r30, r24
 81c:	32 97       	sbiw	r30, 0x02	; 2
 81e:	13 82       	std	Z+3, r1	; 0x03
 820:	12 82       	std	Z+2, r1	; 0x02
 822:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <__flp>
 826:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <__flp+0x1>
 82a:	10 97       	sbiw	r26, 0x00	; 0
 82c:	81 f4       	brne	.+32     	; 0x84e <free+0x3e>
 82e:	20 81       	ld	r18, Z
 830:	31 81       	ldd	r19, Z+1	; 0x01
 832:	82 0f       	add	r24, r18
 834:	93 1f       	adc	r25, r19
 836:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 83a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 83e:	28 17       	cp	r18, r24
 840:	39 07       	cpc	r19, r25
 842:	51 f5       	brne	.+84     	; 0x898 <free+0x88>
 844:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <__brkval+0x1>
 848:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <__brkval>
 84c:	67 c0       	rjmp	.+206    	; 0x91c <free+0x10c>
 84e:	ed 01       	movw	r28, r26
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	ce 17       	cp	r28, r30
 856:	df 07       	cpc	r29, r31
 858:	40 f4       	brcc	.+16     	; 0x86a <free+0x5a>
 85a:	4a 81       	ldd	r20, Y+2	; 0x02
 85c:	5b 81       	ldd	r21, Y+3	; 0x03
 85e:	9e 01       	movw	r18, r28
 860:	41 15       	cp	r20, r1
 862:	51 05       	cpc	r21, r1
 864:	f1 f0       	breq	.+60     	; 0x8a2 <free+0x92>
 866:	ea 01       	movw	r28, r20
 868:	f5 cf       	rjmp	.-22     	; 0x854 <free+0x44>
 86a:	d3 83       	std	Z+3, r29	; 0x03
 86c:	c2 83       	std	Z+2, r28	; 0x02
 86e:	40 81       	ld	r20, Z
 870:	51 81       	ldd	r21, Z+1	; 0x01
 872:	84 0f       	add	r24, r20
 874:	95 1f       	adc	r25, r21
 876:	c8 17       	cp	r28, r24
 878:	d9 07       	cpc	r29, r25
 87a:	59 f4       	brne	.+22     	; 0x892 <free+0x82>
 87c:	88 81       	ld	r24, Y
 87e:	99 81       	ldd	r25, Y+1	; 0x01
 880:	84 0f       	add	r24, r20
 882:	95 1f       	adc	r25, r21
 884:	02 96       	adiw	r24, 0x02	; 2
 886:	91 83       	std	Z+1, r25	; 0x01
 888:	80 83       	st	Z, r24
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	9b 81       	ldd	r25, Y+3	; 0x03
 88e:	93 83       	std	Z+3, r25	; 0x03
 890:	82 83       	std	Z+2, r24	; 0x02
 892:	21 15       	cp	r18, r1
 894:	31 05       	cpc	r19, r1
 896:	29 f4       	brne	.+10     	; 0x8a2 <free+0x92>
 898:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <__flp+0x1>
 89c:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <__flp>
 8a0:	3d c0       	rjmp	.+122    	; 0x91c <free+0x10c>
 8a2:	e9 01       	movw	r28, r18
 8a4:	fb 83       	std	Y+3, r31	; 0x03
 8a6:	ea 83       	std	Y+2, r30	; 0x02
 8a8:	49 91       	ld	r20, Y+
 8aa:	59 91       	ld	r21, Y+
 8ac:	c4 0f       	add	r28, r20
 8ae:	d5 1f       	adc	r29, r21
 8b0:	ec 17       	cp	r30, r28
 8b2:	fd 07       	cpc	r31, r29
 8b4:	61 f4       	brne	.+24     	; 0x8ce <free+0xbe>
 8b6:	80 81       	ld	r24, Z
 8b8:	91 81       	ldd	r25, Z+1	; 0x01
 8ba:	84 0f       	add	r24, r20
 8bc:	95 1f       	adc	r25, r21
 8be:	02 96       	adiw	r24, 0x02	; 2
 8c0:	e9 01       	movw	r28, r18
 8c2:	99 83       	std	Y+1, r25	; 0x01
 8c4:	88 83       	st	Y, r24
 8c6:	82 81       	ldd	r24, Z+2	; 0x02
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	9b 83       	std	Y+3, r25	; 0x03
 8cc:	8a 83       	std	Y+2, r24	; 0x02
 8ce:	e0 e0       	ldi	r30, 0x00	; 0
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	12 96       	adiw	r26, 0x02	; 2
 8d4:	8d 91       	ld	r24, X+
 8d6:	9c 91       	ld	r25, X
 8d8:	13 97       	sbiw	r26, 0x03	; 3
 8da:	00 97       	sbiw	r24, 0x00	; 0
 8dc:	19 f0       	breq	.+6      	; 0x8e4 <free+0xd4>
 8de:	fd 01       	movw	r30, r26
 8e0:	dc 01       	movw	r26, r24
 8e2:	f7 cf       	rjmp	.-18     	; 0x8d2 <free+0xc2>
 8e4:	8d 91       	ld	r24, X+
 8e6:	9c 91       	ld	r25, X
 8e8:	11 97       	sbiw	r26, 0x01	; 1
 8ea:	9d 01       	movw	r18, r26
 8ec:	2e 5f       	subi	r18, 0xFE	; 254
 8ee:	3f 4f       	sbci	r19, 0xFF	; 255
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 8f8:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 8fc:	28 17       	cp	r18, r24
 8fe:	39 07       	cpc	r19, r25
 900:	69 f4       	brne	.+26     	; 0x91c <free+0x10c>
 902:	30 97       	sbiw	r30, 0x00	; 0
 904:	29 f4       	brne	.+10     	; 0x910 <free+0x100>
 906:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__flp+0x1>
 90a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__flp>
 90e:	02 c0       	rjmp	.+4      	; 0x914 <free+0x104>
 910:	13 82       	std	Z+3, r1	; 0x03
 912:	12 82       	std	Z+2, r1	; 0x02
 914:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <__brkval+0x1>
 918:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <__brkval>
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
