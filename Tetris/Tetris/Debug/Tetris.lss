
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001556  000015ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800136  00800136  00001620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f0a  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9d  00000000  00000000  0000375a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011fc  00000000  00000000  000045f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  000057f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ce  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e1  00000000  00000000  00006602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00007ce3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d0 c5       	rjmp	.+2976   	; 0xbd6 <__vector_13>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3e 05       	cpc	r19, r14
      8e:	3b 05       	cpc	r19, r11
      90:	38 05       	cpc	r19, r8
      92:	35 05       	cpc	r19, r5
      94:	32 05       	cpc	r19, r2
      96:	2f 05       	cpc	r18, r15
      98:	2c 05       	cpc	r18, r12
      9a:	29 05       	cpc	r18, r9

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e6 e5       	ldi	r30, 0x56	; 86
      b0:	f5 e1       	ldi	r31, 0x15	; 21
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a6 e3       	ldi	r26, 0x36	; 54
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a3 37       	cpi	r26, 0x73	; 115
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	f5 d7       	rcall	.+4074   	; 0x10be <main>
      d4:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <checkDownAndDo>:
	{{0,0},{0,-1},{0,-2},{1,0}}, //L-shape
	{{0,0},{0,-1},{0,1},{1,0}}, //triangle
	{{0,0},{0,-1},{1,0},{1,1}}
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	28 97       	sbiw	r28, 0x08	; 8
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0];
     104:	9c 91       	ld	r25, X
     106:	99 83       	std	Y+1, r25	; 0x01
		tempActive[i][1] = active->coordinates[i][1] + 1;
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	8c 91       	ld	r24, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	8a 83       	std	Y+2, r24	; 0x02
		
		if(tempActive[i][0] + active->x_coordinate > 7
     112:	18 96       	adiw	r26, 0x08	; 8
     114:	cc 90       	ld	r12, X
     116:	18 97       	sbiw	r26, 0x08	; 8
     118:	0c 2c       	mov	r0, r12
     11a:	00 0c       	add	r0, r0
     11c:	dd 08       	sbc	r13, r13
     11e:	96 01       	movw	r18, r12
     120:	29 0f       	add	r18, r25
     122:	31 1d       	adc	r19, r1
     124:	97 fd       	sbrc	r25, 7
     126:	3a 95       	dec	r19
     128:	28 30       	cpi	r18, 0x08	; 8
     12a:	31 05       	cpc	r19, r1
     12c:	08 f0       	brcs	.+2      	; 0x130 <checkDownAndDo+0x56>
     12e:	5c c0       	rjmp	.+184    	; 0x1e8 <checkDownAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     130:	19 96       	adiw	r26, 0x09	; 9
     132:	ac 90       	ld	r10, X
     134:	19 97       	sbiw	r26, 0x09	; 9
     136:	0a 2c       	mov	r0, r10
     138:	00 0c       	add	r0, r0
     13a:	bb 08       	sbc	r11, r11
     13c:	75 01       	movw	r14, r10
     13e:	e8 0e       	add	r14, r24
     140:	f1 1c       	adc	r15, r1
     142:	87 fd       	sbrc	r24, 7
     144:	fa 94       	dec	r15
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	e8 16       	cp	r14, r24
     14a:	f1 04       	cpc	r15, r1
     14c:	08 f0       	brcs	.+2      	; 0x150 <checkDownAndDo+0x76>
     14e:	4c c0       	rjmp	.+152    	; 0x1e8 <checkDownAndDo+0x10e>
     150:	ad 01       	movw	r20, r26
     152:	fe 01       	movw	r30, r28
     154:	31 96       	adiw	r30, 0x01	; 1
     156:	ce 01       	movw	r24, r28
     158:	07 96       	adiw	r24, 0x07	; 7
     15a:	8f 01       	movw	r16, r30
     15c:	4d 01       	movw	r8, r26
     15e:	24 c0       	rjmp	.+72     	; 0x1a8 <checkDownAndDo+0xce>
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0];
     160:	d4 01       	movw	r26, r8
     162:	12 96       	adiw	r26, 0x02	; 2
     164:	2c 91       	ld	r18, X
     166:	d8 01       	movw	r26, r16
     168:	12 96       	adiw	r26, 0x02	; 2
     16a:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1] + 1;
     16c:	d4 01       	movw	r26, r8
     16e:	13 96       	adiw	r26, 0x03	; 3
     170:	fc 90       	ld	r15, X
     172:	f3 94       	inc	r15
     174:	d8 01       	movw	r26, r16
     176:	13 96       	adiw	r26, 0x03	; 3
     178:	fc 92       	st	X, r15
		
		if(tempActive[i][0] + active->x_coordinate > 7
     17a:	d6 01       	movw	r26, r12
     17c:	a2 0f       	add	r26, r18
     17e:	b1 1d       	adc	r27, r1
     180:	27 fd       	sbrc	r18, 7
     182:	ba 95       	dec	r27
     184:	9d 01       	movw	r18, r26
     186:	18 97       	sbiw	r26, 0x08	; 8
     188:	78 f5       	brcc	.+94     	; 0x1e8 <checkDownAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     18a:	d5 01       	movw	r26, r10
     18c:	af 0d       	add	r26, r15
     18e:	b1 1d       	adc	r27, r1
     190:	f7 fc       	sbrc	r15, 7
     192:	ba 95       	dec	r27
     194:	7d 01       	movw	r14, r26
     196:	b2 e0       	ldi	r27, 0x02	; 2
     198:	8b 0e       	add	r8, r27
     19a:	91 1c       	adc	r9, r1
     19c:	0e 5f       	subi	r16, 0xFE	; 254
     19e:	1f 4f       	sbci	r17, 0xFF	; 255
     1a0:	a0 e1       	ldi	r26, 0x10	; 16
     1a2:	ea 16       	cp	r14, r26
     1a4:	f1 04       	cpc	r15, r1
     1a6:	00 f5       	brcc	.+64     	; 0x1e8 <checkDownAndDo+0x10e>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     1a8:	22 95       	swap	r18
     1aa:	32 95       	swap	r19
     1ac:	30 7f       	andi	r19, 0xF0	; 240
     1ae:	32 27       	eor	r19, r18
     1b0:	20 7f       	andi	r18, 0xF0	; 240
     1b2:	32 27       	eor	r19, r18
     1b4:	26 0f       	add	r18, r22
     1b6:	37 1f       	adc	r19, r23
     1b8:	2e 0d       	add	r18, r14
     1ba:	3f 1d       	adc	r19, r15
     1bc:	d9 01       	movw	r26, r18
     1be:	2c 91       	ld	r18, X
     1c0:	21 11       	cpse	r18, r1
     1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <checkDownAndDo+0x10e>
	{{0,0},{0,-1},{1,0},{1,1}}
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     1c4:	08 17       	cp	r16, r24
     1c6:	19 07       	cpc	r17, r25
     1c8:	59 f6       	brne	.-106    	; 0x160 <checkDownAndDo+0x86>
     1ca:	9e 01       	movw	r18, r28
     1cc:	27 5f       	subi	r18, 0xF7	; 247
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
			return;//fail
		}
	}
	//copy
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     1d0:	80 81       	ld	r24, Z
     1d2:	da 01       	movw	r26, r20
     1d4:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     1d6:	81 81       	ldd	r24, Z+1	; 0x01
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	8c 93       	st	X, r24
     1dc:	32 96       	adiw	r30, 0x02	; 2
     1de:	4e 5f       	subi	r20, 0xFE	; 254
     1e0:	5f 4f       	sbci	r21, 0xFF	; 255
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	//copy
	for(int i = 0; i < 4; i++){
     1e2:	e2 17       	cp	r30, r18
     1e4:	f3 07       	cpc	r31, r19
     1e6:	a1 f7       	brne	.-24     	; 0x1d0 <checkDownAndDo+0xf6>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
}
     1e8:	28 96       	adiw	r28, 0x08	; 8
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	08 95       	ret

0000020e <checkRotateAndDo>:
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
     20e:	8f 92       	push	r8
     210:	9f 92       	push	r9
     212:	af 92       	push	r10
     214:	bf 92       	push	r11
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	28 97       	sbiw	r28, 0x08	; 8
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	dc 01       	movw	r26, r24
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = -1 * active->coordinates[i][1];
     238:	11 96       	adiw	r26, 0x01	; 1
     23a:	8c 91       	ld	r24, X
     23c:	11 97       	sbiw	r26, 0x01	; 1
     23e:	81 95       	neg	r24
     240:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][0];
     242:	9c 91       	ld	r25, X
     244:	9a 83       	std	Y+2, r25	; 0x02
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7 
     246:	18 96       	adiw	r26, 0x08	; 8
     248:	cc 90       	ld	r12, X
     24a:	18 97       	sbiw	r26, 0x08	; 8
     24c:	0c 2c       	mov	r0, r12
     24e:	00 0c       	add	r0, r0
     250:	dd 08       	sbc	r13, r13
     252:	96 01       	movw	r18, r12
     254:	28 0f       	add	r18, r24
     256:	31 1d       	adc	r19, r1
     258:	87 fd       	sbrc	r24, 7
     25a:	3a 95       	dec	r19
     25c:	28 30       	cpi	r18, 0x08	; 8
     25e:	31 05       	cpc	r19, r1
     260:	08 f0       	brcs	.+2      	; 0x264 <checkRotateAndDo+0x56>
     262:	5c c0       	rjmp	.+184    	; 0x31c <checkRotateAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     264:	19 96       	adiw	r26, 0x09	; 9
     266:	ac 90       	ld	r10, X
     268:	19 97       	sbiw	r26, 0x09	; 9
     26a:	0a 2c       	mov	r0, r10
     26c:	00 0c       	add	r0, r0
     26e:	bb 08       	sbc	r11, r11
     270:	75 01       	movw	r14, r10
     272:	e9 0e       	add	r14, r25
     274:	f1 1c       	adc	r15, r1
     276:	97 fd       	sbrc	r25, 7
     278:	fa 94       	dec	r15
     27a:	80 e1       	ldi	r24, 0x10	; 16
     27c:	e8 16       	cp	r14, r24
     27e:	f1 04       	cpc	r15, r1
     280:	08 f0       	brcs	.+2      	; 0x284 <checkRotateAndDo+0x76>
     282:	4c c0       	rjmp	.+152    	; 0x31c <checkRotateAndDo+0x10e>
     284:	ad 01       	movw	r20, r26
     286:	fe 01       	movw	r30, r28
     288:	31 96       	adiw	r30, 0x01	; 1
     28a:	ce 01       	movw	r24, r28
     28c:	07 96       	adiw	r24, 0x07	; 7
     28e:	8f 01       	movw	r16, r30
     290:	4d 01       	movw	r8, r26
     292:	24 c0       	rjmp	.+72     	; 0x2dc <checkRotateAndDo+0xce>
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = -1 * active->coordinates[i][1];
     294:	d4 01       	movw	r26, r8
     296:	13 96       	adiw	r26, 0x03	; 3
     298:	2c 91       	ld	r18, X
     29a:	21 95       	neg	r18
     29c:	d8 01       	movw	r26, r16
     29e:	12 96       	adiw	r26, 0x02	; 2
     2a0:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][0];
     2a2:	d4 01       	movw	r26, r8
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	fc 90       	ld	r15, X
     2a8:	d8 01       	movw	r26, r16
     2aa:	13 96       	adiw	r26, 0x03	; 3
     2ac:	fc 92       	st	X, r15
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7 
     2ae:	d6 01       	movw	r26, r12
     2b0:	a2 0f       	add	r26, r18
     2b2:	b1 1d       	adc	r27, r1
     2b4:	27 fd       	sbrc	r18, 7
     2b6:	ba 95       	dec	r27
     2b8:	9d 01       	movw	r18, r26
     2ba:	18 97       	sbiw	r26, 0x08	; 8
     2bc:	78 f5       	brcc	.+94     	; 0x31c <checkRotateAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     2be:	d5 01       	movw	r26, r10
     2c0:	af 0d       	add	r26, r15
     2c2:	b1 1d       	adc	r27, r1
     2c4:	f7 fc       	sbrc	r15, 7
     2c6:	ba 95       	dec	r27
     2c8:	7d 01       	movw	r14, r26
     2ca:	b2 e0       	ldi	r27, 0x02	; 2
     2cc:	8b 0e       	add	r8, r27
     2ce:	91 1c       	adc	r9, r1
     2d0:	0e 5f       	subi	r16, 0xFE	; 254
     2d2:	1f 4f       	sbci	r17, 0xFF	; 255
     2d4:	a0 e1       	ldi	r26, 0x10	; 16
     2d6:	ea 16       	cp	r14, r26
     2d8:	f1 04       	cpc	r15, r1
     2da:	00 f5       	brcc	.+64     	; 0x31c <checkRotateAndDo+0x10e>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		} 
		//check gameboard
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     2dc:	22 95       	swap	r18
     2de:	32 95       	swap	r19
     2e0:	30 7f       	andi	r19, 0xF0	; 240
     2e2:	32 27       	eor	r19, r18
     2e4:	20 7f       	andi	r18, 0xF0	; 240
     2e6:	32 27       	eor	r19, r18
     2e8:	26 0f       	add	r18, r22
     2ea:	37 1f       	adc	r19, r23
     2ec:	2e 0d       	add	r18, r14
     2ee:	3f 1d       	adc	r19, r15
     2f0:	d9 01       	movw	r26, r18
     2f2:	2c 91       	ld	r18, X
     2f4:	21 11       	cpse	r18, r1
     2f6:	12 c0       	rjmp	.+36     	; 0x31c <checkRotateAndDo+0x10e>
}
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     2f8:	08 17       	cp	r16, r24
     2fa:	19 07       	cpc	r17, r25
     2fc:	59 f6       	brne	.-106    	; 0x294 <checkRotateAndDo+0x86>
     2fe:	9e 01       	movw	r18, r28
     300:	27 5f       	subi	r18, 0xF7	; 247
     302:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     304:	80 81       	ld	r24, Z
     306:	da 01       	movw	r26, r20
     308:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     30a:	81 81       	ldd	r24, Z+1	; 0x01
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	8c 93       	st	X, r24
     310:	32 96       	adiw	r30, 0x02	; 2
     312:	4e 5f       	subi	r20, 0xFE	; 254
     314:	5f 4f       	sbci	r21, 0xFF	; 255
			return;//fail
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
     316:	e2 17       	cp	r30, r18
     318:	f3 07       	cpc	r31, r19
     31a:	a1 f7       	brne	.-24     	; 0x304 <checkRotateAndDo+0xf6>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
     31c:	28 96       	adiw	r28, 0x08	; 8
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	08 95       	ret

00000342 <checkLeftAndDo>:

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
     342:	8f 92       	push	r8
     344:	9f 92       	push	r9
     346:	af 92       	push	r10
     348:	bf 92       	push	r11
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	28 97       	sbiw	r28, 0x08	; 8
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] - 1;
     36c:	8c 91       	ld	r24, X
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][1];
     372:	11 96       	adiw	r26, 0x01	; 1
     374:	9c 91       	ld	r25, X
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	9a 83       	std	Y+2, r25	; 0x02
		
		if(tempActive[i][0] + active->x_coordinate > 7
     37a:	18 96       	adiw	r26, 0x08	; 8
     37c:	cc 90       	ld	r12, X
     37e:	18 97       	sbiw	r26, 0x08	; 8
     380:	0c 2c       	mov	r0, r12
     382:	00 0c       	add	r0, r0
     384:	dd 08       	sbc	r13, r13
     386:	96 01       	movw	r18, r12
     388:	28 0f       	add	r18, r24
     38a:	31 1d       	adc	r19, r1
     38c:	87 fd       	sbrc	r24, 7
     38e:	3a 95       	dec	r19
     390:	28 30       	cpi	r18, 0x08	; 8
     392:	31 05       	cpc	r19, r1
     394:	08 f0       	brcs	.+2      	; 0x398 <checkLeftAndDo+0x56>
     396:	5c c0       	rjmp	.+184    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     398:	19 96       	adiw	r26, 0x09	; 9
     39a:	ac 90       	ld	r10, X
     39c:	19 97       	sbiw	r26, 0x09	; 9
     39e:	0a 2c       	mov	r0, r10
     3a0:	00 0c       	add	r0, r0
     3a2:	bb 08       	sbc	r11, r11
     3a4:	75 01       	movw	r14, r10
     3a6:	e9 0e       	add	r14, r25
     3a8:	f1 1c       	adc	r15, r1
     3aa:	97 fd       	sbrc	r25, 7
     3ac:	fa 94       	dec	r15
     3ae:	80 e1       	ldi	r24, 0x10	; 16
     3b0:	e8 16       	cp	r14, r24
     3b2:	f1 04       	cpc	r15, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <checkLeftAndDo+0x76>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	ad 01       	movw	r20, r26
     3ba:	fe 01       	movw	r30, r28
     3bc:	31 96       	adiw	r30, 0x01	; 1
     3be:	ce 01       	movw	r24, r28
     3c0:	07 96       	adiw	r24, 0x07	; 7
     3c2:	8f 01       	movw	r16, r30
     3c4:	4d 01       	movw	r8, r26
     3c6:	24 c0       	rjmp	.+72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] - 1;
     3c8:	d4 01       	movw	r26, r8
     3ca:	12 96       	adiw	r26, 0x02	; 2
     3cc:	2c 91       	ld	r18, X
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	d8 01       	movw	r26, r16
     3d2:	12 96       	adiw	r26, 0x02	; 2
     3d4:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1];
     3d6:	d4 01       	movw	r26, r8
     3d8:	13 96       	adiw	r26, 0x03	; 3
     3da:	fc 90       	ld	r15, X
     3dc:	d8 01       	movw	r26, r16
     3de:	13 96       	adiw	r26, 0x03	; 3
     3e0:	fc 92       	st	X, r15
		
		if(tempActive[i][0] + active->x_coordinate > 7
     3e2:	d6 01       	movw	r26, r12
     3e4:	a2 0f       	add	r26, r18
     3e6:	b1 1d       	adc	r27, r1
     3e8:	27 fd       	sbrc	r18, 7
     3ea:	ba 95       	dec	r27
     3ec:	9d 01       	movw	r18, r26
     3ee:	18 97       	sbiw	r26, 0x08	; 8
     3f0:	78 f5       	brcc	.+94     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     3f2:	d5 01       	movw	r26, r10
     3f4:	af 0d       	add	r26, r15
     3f6:	b1 1d       	adc	r27, r1
     3f8:	f7 fc       	sbrc	r15, 7
     3fa:	ba 95       	dec	r27
     3fc:	7d 01       	movw	r14, r26
     3fe:	b2 e0       	ldi	r27, 0x02	; 2
     400:	8b 0e       	add	r8, r27
     402:	91 1c       	adc	r9, r1
     404:	0e 5f       	subi	r16, 0xFE	; 254
     406:	1f 4f       	sbci	r17, 0xFF	; 255
     408:	a0 e1       	ldi	r26, 0x10	; 16
     40a:	ea 16       	cp	r14, r26
     40c:	f1 04       	cpc	r15, r1
     40e:	00 f5       	brcc	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     410:	22 95       	swap	r18
     412:	32 95       	swap	r19
     414:	30 7f       	andi	r19, 0xF0	; 240
     416:	32 27       	eor	r19, r18
     418:	20 7f       	andi	r18, 0xF0	; 240
     41a:	32 27       	eor	r19, r18
     41c:	26 0f       	add	r18, r22
     41e:	37 1f       	adc	r19, r23
     420:	2e 0d       	add	r18, r14
     422:	3f 1d       	adc	r19, r15
     424:	d9 01       	movw	r26, r18
     426:	2c 91       	ld	r18, X
     428:	21 11       	cpse	r18, r1
     42a:	12 c0       	rjmp	.+36     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     42c:	08 17       	cp	r16, r24
     42e:	19 07       	cpc	r17, r25
     430:	59 f6       	brne	.-106    	; 0x3c8 <checkLeftAndDo+0x86>
     432:	9e 01       	movw	r18, r28
     434:	27 5f       	subi	r18, 0xF7	; 247
     436:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     438:	80 81       	ld	r24, Z
     43a:	da 01       	movw	r26, r20
     43c:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	8c 93       	st	X, r24
     444:	32 96       	adiw	r30, 0x02	; 2
     446:	4e 5f       	subi	r20, 0xFE	; 254
     448:	5f 4f       	sbci	r21, 0xFF	; 255
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
     44a:	e2 17       	cp	r30, r18
     44c:	f3 07       	cpc	r31, r19
     44e:	a1 f7       	brne	.-24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}	
}
     450:	28 96       	adiw	r28, 0x08	; 8
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	08 95       	ret

00000476 <checkRightAndDo>:
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
     476:	8f 92       	push	r8
     478:	9f 92       	push	r9
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	28 97       	sbiw	r28, 0x08	; 8
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
     4a0:	8c 91       	ld	r24, X
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][1];
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	9c 91       	ld	r25, X
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	9a 83       	std	Y+2, r25	; 0x02
			
		if(tempActive[i][0] + active->x_coordinate > 7
     4ae:	18 96       	adiw	r26, 0x08	; 8
     4b0:	cc 90       	ld	r12, X
     4b2:	18 97       	sbiw	r26, 0x08	; 8
     4b4:	0c 2c       	mov	r0, r12
     4b6:	00 0c       	add	r0, r0
     4b8:	dd 08       	sbc	r13, r13
     4ba:	96 01       	movw	r18, r12
     4bc:	28 0f       	add	r18, r24
     4be:	31 1d       	adc	r19, r1
     4c0:	87 fd       	sbrc	r24, 7
     4c2:	3a 95       	dec	r19
     4c4:	28 30       	cpi	r18, 0x08	; 8
     4c6:	31 05       	cpc	r19, r1
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <checkRightAndDo+0x56>
     4ca:	5c c0       	rjmp	.+184    	; 0x584 <checkRightAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     4cc:	19 96       	adiw	r26, 0x09	; 9
     4ce:	ac 90       	ld	r10, X
     4d0:	19 97       	sbiw	r26, 0x09	; 9
     4d2:	0a 2c       	mov	r0, r10
     4d4:	00 0c       	add	r0, r0
     4d6:	bb 08       	sbc	r11, r11
     4d8:	75 01       	movw	r14, r10
     4da:	e9 0e       	add	r14, r25
     4dc:	f1 1c       	adc	r15, r1
     4de:	97 fd       	sbrc	r25, 7
     4e0:	fa 94       	dec	r15
     4e2:	80 e1       	ldi	r24, 0x10	; 16
     4e4:	e8 16       	cp	r14, r24
     4e6:	f1 04       	cpc	r15, r1
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <checkRightAndDo+0x76>
     4ea:	4c c0       	rjmp	.+152    	; 0x584 <checkRightAndDo+0x10e>
     4ec:	ad 01       	movw	r20, r26
     4ee:	fe 01       	movw	r30, r28
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	ce 01       	movw	r24, r28
     4f4:	07 96       	adiw	r24, 0x07	; 7
     4f6:	8f 01       	movw	r16, r30
     4f8:	4d 01       	movw	r8, r26
     4fa:	24 c0       	rjmp	.+72     	; 0x544 <checkRightAndDo+0xce>
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
     4fc:	d4 01       	movw	r26, r8
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	2c 91       	ld	r18, X
     502:	2f 5f       	subi	r18, 0xFF	; 255
     504:	d8 01       	movw	r26, r16
     506:	12 96       	adiw	r26, 0x02	; 2
     508:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1];
     50a:	d4 01       	movw	r26, r8
     50c:	13 96       	adiw	r26, 0x03	; 3
     50e:	fc 90       	ld	r15, X
     510:	d8 01       	movw	r26, r16
     512:	13 96       	adiw	r26, 0x03	; 3
     514:	fc 92       	st	X, r15
			
		if(tempActive[i][0] + active->x_coordinate > 7
     516:	d6 01       	movw	r26, r12
     518:	a2 0f       	add	r26, r18
     51a:	b1 1d       	adc	r27, r1
     51c:	27 fd       	sbrc	r18, 7
     51e:	ba 95       	dec	r27
     520:	9d 01       	movw	r18, r26
     522:	18 97       	sbiw	r26, 0x08	; 8
     524:	78 f5       	brcc	.+94     	; 0x584 <checkRightAndDo+0x10e>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     526:	d5 01       	movw	r26, r10
     528:	af 0d       	add	r26, r15
     52a:	b1 1d       	adc	r27, r1
     52c:	f7 fc       	sbrc	r15, 7
     52e:	ba 95       	dec	r27
     530:	7d 01       	movw	r14, r26
     532:	b2 e0       	ldi	r27, 0x02	; 2
     534:	8b 0e       	add	r8, r27
     536:	91 1c       	adc	r9, r1
     538:	0e 5f       	subi	r16, 0xFE	; 254
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
     53c:	a0 e1       	ldi	r26, 0x10	; 16
     53e:	ea 16       	cp	r14, r26
     540:	f1 04       	cpc	r15, r1
     542:	00 f5       	brcc	.+64     	; 0x584 <checkRightAndDo+0x10e>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     544:	22 95       	swap	r18
     546:	32 95       	swap	r19
     548:	30 7f       	andi	r19, 0xF0	; 240
     54a:	32 27       	eor	r19, r18
     54c:	20 7f       	andi	r18, 0xF0	; 240
     54e:	32 27       	eor	r19, r18
     550:	26 0f       	add	r18, r22
     552:	37 1f       	adc	r19, r23
     554:	2e 0d       	add	r18, r14
     556:	3f 1d       	adc	r19, r15
     558:	d9 01       	movw	r26, r18
     55a:	2c 91       	ld	r18, X
     55c:	21 11       	cpse	r18, r1
     55e:	12 c0       	rjmp	.+36     	; 0x584 <checkRightAndDo+0x10e>
	}	
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     560:	08 17       	cp	r16, r24
     562:	19 07       	cpc	r17, r25
     564:	59 f6       	brne	.-106    	; 0x4fc <checkRightAndDo+0x86>
     566:	9e 01       	movw	r18, r28
     568:	27 5f       	subi	r18, 0xF7	; 247
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     56c:	80 81       	ld	r24, Z
     56e:	da 01       	movw	r26, r20
     570:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     572:	81 81       	ldd	r24, Z+1	; 0x01
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	8c 93       	st	X, r24
     578:	32 96       	adiw	r30, 0x02	; 2
     57a:	4e 5f       	subi	r20, 0xFE	; 254
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	a1 f7       	brne	.-24     	; 0x56c <checkRightAndDo+0xf6>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
     584:	28 96       	adiw	r28, 0x08	; 8
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	af 90       	pop	r10
     5a4:	9f 90       	pop	r9
     5a6:	8f 90       	pop	r8
     5a8:	08 95       	ret

000005aa <checkLoss>:

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 81       	ld	r18, Z
     5ae:	21 11       	cpse	r18, r1
     5b0:	0d c0       	rjmp	.+26     	; 0x5cc <checkLoss+0x22>
     5b2:	9c 01       	movw	r18, r24
     5b4:	20 59       	subi	r18, 0x90	; 144
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	90 89       	ldd	r25, Z+16	; 0x10
     5ba:	91 11       	cpse	r25, r1
     5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <checkLoss+0x28>
     5be:	70 96       	adiw	r30, 0x10	; 16
	}
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
     5c0:	e2 17       	cp	r30, r18
     5c2:	f3 07       	cpc	r31, r19
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <checkLoss+0xe>
		if(inactive->board[i][0]){return 1;}
	}
	return 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	08 95       	ret
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
	
}
     5d6:	08 95       	ret

000005d8 <convertPieceToInactive>:

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
     5de:	dc 01       	movw	r26, r24
     5e0:	08 96       	adiw	r24, 0x08	; 8
	for(int i = 0; i < 4; i ++){
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	2c 91       	ld	r18, X
     5e6:	e8 85       	ldd	r30, Y+8	; 0x08
     5e8:	0e 2e       	mov	r0, r30
     5ea:	00 0c       	add	r0, r0
     5ec:	ff 0b       	sbc	r31, r31
     5ee:	e2 0f       	add	r30, r18
     5f0:	f1 1d       	adc	r31, r1
     5f2:	27 fd       	sbrc	r18, 7
     5f4:	fa 95       	dec	r31
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	3c 91       	ld	r19, X
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	29 85       	ldd	r18, Y+9	; 0x09
     5fe:	e2 95       	swap	r30
     600:	f2 95       	swap	r31
     602:	f0 7f       	andi	r31, 0xF0	; 240
     604:	fe 27       	eor	r31, r30
     606:	e0 7f       	andi	r30, 0xF0	; 240
     608:	fe 27       	eor	r31, r30
     60a:	e6 0f       	add	r30, r22
     60c:	f7 1f       	adc	r31, r23
     60e:	e3 0f       	add	r30, r19
     610:	f1 1d       	adc	r31, r1
     612:	37 fd       	sbrc	r19, 7
     614:	fa 95       	dec	r31
     616:	e2 0f       	add	r30, r18
     618:	f1 1d       	adc	r31, r1
     61a:	27 fd       	sbrc	r18, 7
     61c:	fa 95       	dec	r31
     61e:	40 83       	st	Z, r20
     620:	12 96       	adiw	r26, 0x02	; 2
	
}

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i ++){
     622:	a8 17       	cp	r26, r24
     624:	b9 07       	cpc	r27, r25
     626:	f1 f6       	brne	.-68     	; 0x5e4 <convertPieceToInactive+0xc>
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
	}
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <deletedAFilledRowAndSlidDown>:

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	dc 01       	movw	r26, r24
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     634:	6f e0       	ldi	r22, 0x0F	; 15
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	eb 01       	movw	r28, r22
     63e:	fd 01       	movw	r30, r26
     640:	e6 0f       	add	r30, r22
     642:	f7 1f       	adc	r31, r23
     644:	9b 01       	movw	r18, r22
     646:	20 58       	subi	r18, 0x80	; 128
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	2a 0f       	add	r18, r26
     64c:	3b 1f       	adc	r19, r27
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     64e:	48 2f       	mov	r20, r24
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     650:	90 81       	ld	r25, Z
     652:	91 11       	cpse	r25, r1
     654:	01 c0       	rjmp	.+2      	; 0x658 <deletedAFilledRowAndSlidDown+0x2a>
     656:	45 2f       	mov	r20, r21
     658:	70 96       	adiw	r30, 0x10	; 16

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
     65a:	e2 17       	cp	r30, r18
     65c:	f3 07       	cpc	r31, r19
     65e:	c1 f7       	brne	.-16     	; 0x650 <deletedAFilledRowAndSlidDown+0x22>
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
     660:	44 23       	and	r20, r20
     662:	21 f1       	breq	.+72     	; 0x6ac <deletedAFilledRowAndSlidDown+0x7e>
				for(int k = i; k > 0; k--){
     664:	16 16       	cp	r1, r22
     666:	17 06       	cpc	r1, r23
     668:	3c f5       	brge	.+78     	; 0x6b8 <deletedAFilledRowAndSlidDown+0x8a>
     66a:	ae 01       	movw	r20, r28
     66c:	41 50       	subi	r20, 0x01	; 1
     66e:	51 09       	sbc	r21, r1
     670:	4a 0f       	add	r20, r26
     672:	5b 1f       	adc	r21, r27
     674:	bd 01       	movw	r22, r26
     676:	61 50       	subi	r22, 0x01	; 1
     678:	71 09       	sbc	r23, r1
     67a:	0b c0       	rjmp	.+22     	; 0x692 <deletedAFilledRowAndSlidDown+0x64>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
     67c:	90 81       	ld	r25, Z
     67e:	91 83       	std	Z+1, r25	; 0x01
     680:	70 96       	adiw	r30, 0x10	; 16
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
     682:	e2 17       	cp	r30, r18
     684:	f3 07       	cpc	r31, r19
     686:	d1 f7       	brne	.-12     	; 0x67c <deletedAFilledRowAndSlidDown+0x4e>
     688:	41 50       	subi	r20, 0x01	; 1
     68a:	51 09       	sbc	r21, r1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
     68c:	46 17       	cp	r20, r22
     68e:	57 07       	cpc	r21, r23
     690:	99 f0       	breq	.+38     	; 0x6b8 <deletedAFilledRowAndSlidDown+0x8a>
     692:	9a 01       	movw	r18, r20
     694:	20 58       	subi	r18, 0x80	; 128
     696:	3f 4f       	sbci	r19, 0xFF	; 255
int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     698:	fa 01       	movw	r30, r20
     69a:	f0 cf       	rjmp	.-32     	; 0x67c <deletedAFilledRowAndSlidDown+0x4e>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
					inactive->board[k][0] = 0;	
     69c:	10 82       	st	Z, r1
     69e:	70 96       	adiw	r30, 0x10	; 16
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
     6a0:	ae 17       	cp	r26, r30
     6a2:	bf 07       	cpc	r27, r31
     6a4:	d9 f7       	brne	.-10     	; 0x69c <deletedAFilledRowAndSlidDown+0x6e>
					inactive->board[k][0] = 0;	
				}
				return 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0a c0       	rjmp	.+20     	; 0x6c0 <deletedAFilledRowAndSlidDown+0x92>
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     6ac:	61 50       	subi	r22, 0x01	; 1
     6ae:	71 09       	sbc	r23, r1
     6b0:	28 f6       	brcc	.-118    	; 0x63c <deletedAFilledRowAndSlidDown+0xe>
					inactive->board[k][0] = 0;	
				}
				return 1;
			}
	}
	return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <deletedAFilledRowAndSlidDown+0x92>
     6b8:	fd 01       	movw	r30, r26
     6ba:	a0 58       	subi	r26, 0x80	; 128
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	ee cf       	rjmp	.-36     	; 0x69c <deletedAFilledRowAndSlidDown+0x6e>
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <combinePieceAndBoardIntoImage>:

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	fc 01       	movw	r30, r24
     6d8:	ec 01       	movw	r28, r24
     6da:	c0 58       	subi	r28, 0x80	; 128
     6dc:	df 4f       	sbci	r29, 0xFF	; 255
     6de:	dc 01       	movw	r26, r24
     6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <combinePieceAndBoardIntoImage+0x2c>
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
     6e2:	1d 92       	st	X+, r1
//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     6e4:	a2 17       	cp	r26, r18
     6e6:	b3 07       	cpc	r27, r19
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <combinePieceAndBoardIntoImage+0x1c>
     6ea:	d9 01       	movw	r26, r18

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
     6ec:	c2 17       	cp	r28, r18
     6ee:	d3 07       	cpc	r29, r19
     6f0:	21 f0       	breq	.+8      	; 0x6fa <combinePieceAndBoardIntoImage+0x34>
     6f2:	9d 01       	movw	r18, r26
     6f4:	20 5f       	subi	r18, 0xF0	; 240
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	f4 cf       	rjmp	.-24     	; 0x6e2 <combinePieceAndBoardIntoImage+0x1c>
     6fa:	8b 01       	movw	r16, r22
     6fc:	7b 01       	movw	r14, r22
     6fe:	28 e0       	ldi	r18, 0x08	; 8
     700:	e2 0e       	add	r14, r18
     702:	f1 1c       	adc	r15, r1
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
     704:	d8 01       	movw	r26, r16
     706:	dc 90       	ld	r13, X
     708:	db 01       	movw	r26, r22
     70a:	18 96       	adiw	r26, 0x08	; 8
     70c:	2c 91       	ld	r18, X
     70e:	02 2e       	mov	r0, r18
     710:	00 0c       	add	r0, r0
     712:	33 0b       	sbc	r19, r19
     714:	2d 0d       	add	r18, r13
     716:	31 1d       	adc	r19, r1
     718:	d7 fc       	sbrc	r13, 7
     71a:	3a 95       	dec	r19
     71c:	d8 01       	movw	r26, r16
     71e:	11 96       	adiw	r26, 0x01	; 1
     720:	dc 90       	ld	r13, X
     722:	db 01       	movw	r26, r22
     724:	19 96       	adiw	r26, 0x09	; 9
     726:	cc 90       	ld	r12, X
     728:	ac 2d       	mov	r26, r12
     72a:	cc 0c       	add	r12, r12
     72c:	bb 0b       	sbc	r27, r27
     72e:	ad 0d       	add	r26, r13
     730:	b1 1d       	adc	r27, r1
     732:	d7 fc       	sbrc	r13, 7
     734:	ba 95       	dec	r27
     736:	22 95       	swap	r18
     738:	32 95       	swap	r19
     73a:	30 7f       	andi	r19, 0xF0	; 240
     73c:	32 27       	eor	r19, r18
     73e:	20 7f       	andi	r18, 0xF0	; 240
     740:	32 27       	eor	r19, r18
     742:	28 0f       	add	r18, r24
     744:	39 1f       	adc	r19, r25
     746:	a2 0f       	add	r26, r18
     748:	b3 1f       	adc	r27, r19
     74a:	2c 91       	ld	r18, X
     74c:	24 60       	ori	r18, 0x04	; 4
     74e:	2c 93       	st	X, r18
     750:	0e 5f       	subi	r16, 0xFE	; 254
     752:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
     754:	0e 15       	cp	r16, r14
     756:	1f 05       	cpc	r17, r15
     758:	a9 f6       	brne	.-86     	; 0x704 <combinePieceAndBoardIntoImage+0x3e>
     75a:	64 2f       	mov	r22, r20
     75c:	75 2f       	mov	r23, r21
     75e:	10 c0       	rjmp	.+32     	; 0x780 <combinePieceAndBoardIntoImage+0xba>
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
     760:	8d 91       	ld	r24, X+
     762:	88 23       	and	r24, r24
     764:	19 f0       	breq	.+6      	; 0x76c <combinePieceAndBoardIntoImage+0xa6>
     766:	80 81       	ld	r24, Z
     768:	82 60       	ori	r24, 0x02	; 2
     76a:	80 83       	st	Z, r24
     76c:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     76e:	e2 17       	cp	r30, r18
     770:	f3 07       	cpc	r31, r19
     772:	b1 f7       	brne	.-20     	; 0x760 <combinePieceAndBoardIntoImage+0x9a>
     774:	60 5f       	subi	r22, 0xF0	; 240
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	f9 01       	movw	r30, r18
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
     77a:	2c 17       	cp	r18, r28
     77c:	3d 07       	cpc	r19, r29
     77e:	29 f0       	breq	.+10     	; 0x78a <combinePieceAndBoardIntoImage+0xc4>
     780:	9f 01       	movw	r18, r30
     782:	20 5f       	subi	r18, 0xF0	; 240
     784:	3f 4f       	sbci	r19, 0xFF	; 255
	return 0;
}

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     786:	db 01       	movw	r26, r22
     788:	eb cf       	rjmp	.-42     	; 0x760 <combinePieceAndBoardIntoImage+0x9a>
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
		}
	}
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	08 95       	ret

0000079c <createTetromino>:


Tetromino* createTetromino(unsigned char type){
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	18 2f       	mov	r17, r24
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	10 d5       	rcall	.+2592   	; 0x11ca <malloc>
     7aa:	ec 01       	movw	r28, r24
     7ac:	a1 2f       	mov	r26, r17
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	aa 0f       	add	r26, r26
     7b2:	bb 1f       	adc	r27, r27
     7b4:	aa 0f       	add	r26, r26
     7b6:	bb 1f       	adc	r27, r27
     7b8:	aa 0f       	add	r26, r26
     7ba:	bb 1f       	adc	r27, r27
     7bc:	a2 5f       	subi	r26, 0xF2	; 242
     7be:	be 4f       	sbci	r27, 0xFE	; 254
     7c0:	fc 01       	movw	r30, r24
     7c2:	9c 01       	movw	r18, r24
     7c4:	28 5f       	subi	r18, 0xF8	; 248
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i =0; i< 4;i++ ){
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
     7c8:	9c 91       	ld	r25, X
     7ca:	90 83       	st	Z, r25
     7cc:	11 96       	adiw	r26, 0x01	; 1
     7ce:	9c 91       	ld	r25, X
     7d0:	11 97       	sbiw	r26, 0x01	; 1
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	12 96       	adiw	r26, 0x02	; 2
     7d6:	32 96       	adiw	r30, 0x02	; 2
}


Tetromino* createTetromino(unsigned char type){
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
	for(int i =0; i< 4;i++ ){
     7d8:	e2 17       	cp	r30, r18
     7da:	f3 07       	cpc	r31, r19
     7dc:	a9 f7       	brne	.-22     	; 0x7c8 <createTetromino+0x2c>
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
		}
	}
	switch(type){
     7de:	12 30       	cpi	r17, 0x02	; 2
     7e0:	a1 f0       	breq	.+40     	; 0x80a <createTetromino+0x6e>
     7e2:	28 f4       	brcc	.+10     	; 0x7ee <createTetromino+0x52>
     7e4:	11 23       	and	r17, r17
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <createTetromino+0x5c>
     7e8:	11 30       	cpi	r17, 0x01	; 1
     7ea:	51 f0       	breq	.+20     	; 0x800 <createTetromino+0x64>
     7ec:	1d c0       	rjmp	.+58     	; 0x828 <createTetromino+0x8c>
     7ee:	13 30       	cpi	r17, 0x03	; 3
     7f0:	89 f0       	breq	.+34     	; 0x814 <createTetromino+0x78>
     7f2:	14 30       	cpi	r17, 0x04	; 4
     7f4:	a1 f0       	breq	.+40     	; 0x81e <createTetromino+0x82>
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <createTetromino+0x8c>
		case 0:
			tet->x_coordinate = 3;
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 0;
     7fc:	19 86       	std	Y+9, r1	; 0x09
			break;
     7fe:	18 c0       	rjmp	.+48     	; 0x830 <createTetromino+0x94>
		
		case 1:
			tet->x_coordinate = 3;
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 2;
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 87       	std	Y+9, r24	; 0x09
		break;
     808:	13 c0       	rjmp	.+38     	; 0x830 <createTetromino+0x94>
		
		case 2:
		tet->x_coordinate = 3;
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 2;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	89 87       	std	Y+9, r24	; 0x09
		break;
     812:	0e c0       	rjmp	.+28     	; 0x830 <createTetromino+0x94>
		
		case 3:
		tet->x_coordinate = 3;
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	89 87       	std	Y+9, r24	; 0x09
		break;
     81c:	09 c0       	rjmp	.+18     	; 0x830 <createTetromino+0x94>
		
		case 4:
		tet->x_coordinate = 3;
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	89 87       	std	Y+9, r24	; 0x09
		break;
     826:	04 c0       	rjmp	.+8      	; 0x830 <createTetromino+0x94>
		
		default:
		tet->x_coordinate = 2;
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 3;
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	89 87       	std	Y+9, r24	; 0x09
		break;
		
		
	}
	return tet;
}
     830:	ce 01       	movw	r24, r28
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	08 95       	ret

0000083a <losingDisplay>:

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
     83a:	fc 01       	movw	r30, r24
     83c:	ac 01       	movw	r20, r24
     83e:	40 58       	subi	r20, 0x80	; 128
     840:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = (1 << RGB_RED_BIT);
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	08 c0       	rjmp	.+16     	; 0x856 <losingDisplay+0x1c>
     846:	21 93       	st	Z+, r18
	return tet;
}

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     848:	e8 17       	cp	r30, r24
     84a:	f9 07       	cpc	r31, r25
     84c:	e1 f7       	brne	.-8      	; 0x846 <losingDisplay+0xc>
     84e:	fc 01       	movw	r30, r24
	}
	return tet;
}

void losingDisplay(RGB_8x16_Frame* next_frame_ptr){
	for(int i = 0; i < 8; i++){
     850:	48 17       	cp	r20, r24
     852:	59 07       	cpc	r21, r25
     854:	19 f0       	breq	.+6      	; 0x85c <losingDisplay+0x22>
     856:	cf 01       	movw	r24, r30
     858:	40 96       	adiw	r24, 0x10	; 16
     85a:	f5 cf       	rjmp	.-22     	; 0x846 <losingDisplay+0xc>
     85c:	08 95       	ret

0000085e <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
     85e:	18 16       	cp	r1, r24
     860:	19 06       	cpc	r1, r25
     862:	5c f0       	brlt	.+22     	; 0x87a <delay_ms+0x1c>
     864:	08 95       	ret
     866:	00 00       	nop
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	31 09       	sbc	r19, r1
     86c:	e1 f7       	brne	.-8      	; 0x866 <delay_ms+0x8>
     86e:	4f 5f       	subi	r20, 0xFF	; 255
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	84 17       	cp	r24, r20
     874:	95 07       	cpc	r25, r21
     876:	19 f4       	brne	.+6      	; 0x87e <delay_ms+0x20>
     878:	08 95       	ret
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	27 e0       	ldi	r18, 0x07	; 7
     880:	33 e0       	ldi	r19, 0x03	; 3
     882:	f1 cf       	rjmp	.-30     	; 0x866 <delay_ms+0x8>

00000884 <LCD_WriteCommand>:
     884:	5e 98       	cbi	0x0b, 6	; 11
     886:	88 b9       	out	0x08, r24	; 8
     888:	5f 9a       	sbi	0x0b, 7	; 11
     88a:	00 00       	nop
     88c:	5f 98       	cbi	0x0b, 7	; 11
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	e5 cf       	rjmp	.-54     	; 0x85e <delay_ms>
     894:	08 95       	ret

00000896 <LCD_init>:
     896:	84 e6       	ldi	r24, 0x64	; 100
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	e1 df       	rcall	.-62     	; 0x85e <delay_ms>
     89c:	88 e3       	ldi	r24, 0x38	; 56
     89e:	f2 df       	rcall	.-28     	; 0x884 <LCD_WriteCommand>
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	f0 df       	rcall	.-32     	; 0x884 <LCD_WriteCommand>
     8a4:	8f e0       	ldi	r24, 0x0F	; 15
     8a6:	ee df       	rcall	.-36     	; 0x884 <LCD_WriteCommand>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	ec df       	rcall	.-40     	; 0x884 <LCD_WriteCommand>
     8ac:	8a e0       	ldi	r24, 0x0A	; 10
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	d6 cf       	rjmp	.-84     	; 0x85e <delay_ms>
     8b2:	08 95       	ret

000008b4 <ADC_init>:
     8b4:	ea e7       	ldi	r30, 0x7A	; 122
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	80 6c       	ori	r24, 0xC0	; 192
     8bc:	80 83       	st	Z, r24
     8be:	08 95       	ret

000008c0 <ADC_channel>:
     8c0:	88 30       	cpi	r24, 0x08	; 8
     8c2:	48 f4       	brcc	.+18     	; 0x8d6 <ADC_channel+0x16>
     8c4:	ec e7       	ldi	r30, 0x7C	; 124
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	90 81       	ld	r25, Z
     8ca:	98 7f       	andi	r25, 0xF8	; 248
     8cc:	90 83       	st	Z, r25
     8ce:	90 81       	ld	r25, Z
     8d0:	87 70       	andi	r24, 0x07	; 7
     8d2:	89 2b       	or	r24, r25
     8d4:	80 83       	st	Z, r24
     8d6:	08 95       	ret

000008d8 <ADC_read>:
     8d8:	f3 df       	rcall	.-26     	; 0x8c0 <ADC_channel>
     8da:	ea e7       	ldi	r30, 0x7A	; 122
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	80 83       	st	Z, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	86 fd       	sbrc	r24, 6
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <ADC_read+0xc>
     8ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     8ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8f2:	08 95       	ret

000008f4 <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
     8f4:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     8f6:	af e0       	ldi	r26, 0x0F	; 15
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
     8fa:	fc 01       	movw	r30, r24
     8fc:	0a 2e       	mov	r0, r26
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <writetoAll16BitShiftRegisters+0x10>
     900:	f6 95       	lsr	r31
     902:	e7 95       	ror	r30
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <writetoAll16BitShiftRegisters+0xc>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
     908:	fe 2f       	mov	r31, r30
     90a:	f1 70       	andi	r31, 0x01	; 1
     90c:	e0 ff       	sbrs	r30, 0
     90e:	04 c0       	rjmp	.+8      	; 0x918 <writetoAll16BitShiftRegisters+0x24>
     910:	e5 b1       	in	r30, 0x05	; 5
     912:	ef 2b       	or	r30, r31
     914:	e5 b9       	out	0x05, r30	; 5
     916:	01 c0       	rjmp	.+2      	; 0x91a <writetoAll16BitShiftRegisters+0x26>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
     918:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
     91a:	fb 01       	movw	r30, r22
     91c:	0a 2e       	mov	r0, r26
     91e:	02 c0       	rjmp	.+4      	; 0x924 <writetoAll16BitShiftRegisters+0x30>
     920:	f6 95       	lsr	r31
     922:	e7 95       	ror	r30
     924:	0a 94       	dec	r0
     926:	e2 f7       	brpl	.-8      	; 0x920 <writetoAll16BitShiftRegisters+0x2c>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
     928:	fe 2f       	mov	r31, r30
     92a:	f1 70       	andi	r31, 0x01	; 1
     92c:	e0 ff       	sbrs	r30, 0
     92e:	05 c0       	rjmp	.+10     	; 0x93a <writetoAll16BitShiftRegisters+0x46>
     930:	e5 b1       	in	r30, 0x05	; 5
     932:	ff 0f       	add	r31, r31
     934:	fe 2b       	or	r31, r30
     936:	f5 b9       	out	0x05, r31	; 5
     938:	01 c0       	rjmp	.+2      	; 0x93c <writetoAll16BitShiftRegisters+0x48>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
     93a:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
     93c:	fa 01       	movw	r30, r20
     93e:	0a 2e       	mov	r0, r26
     940:	02 c0       	rjmp	.+4      	; 0x946 <writetoAll16BitShiftRegisters+0x52>
     942:	f6 95       	lsr	r31
     944:	e7 95       	ror	r30
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <writetoAll16BitShiftRegisters+0x4e>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
     94a:	fe 2f       	mov	r31, r30
     94c:	f1 70       	andi	r31, 0x01	; 1
     94e:	e0 ff       	sbrs	r30, 0
     950:	06 c0       	rjmp	.+12     	; 0x95e <writetoAll16BitShiftRegisters+0x6a>
     952:	e5 b1       	in	r30, 0x05	; 5
     954:	ff 0f       	add	r31, r31
     956:	ff 0f       	add	r31, r31
     958:	fe 2b       	or	r31, r30
     95a:	f5 b9       	out	0x05, r31	; 5
     95c:	01 c0       	rjmp	.+2      	; 0x960 <writetoAll16BitShiftRegisters+0x6c>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
     95e:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
     960:	f9 01       	movw	r30, r18
     962:	0a 2e       	mov	r0, r26
     964:	02 c0       	rjmp	.+4      	; 0x96a <writetoAll16BitShiftRegisters+0x76>
     966:	f6 95       	lsr	r31
     968:	e7 95       	ror	r30
     96a:	0a 94       	dec	r0
     96c:	e2 f7       	brpl	.-8      	; 0x966 <writetoAll16BitShiftRegisters+0x72>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
     96e:	fe 2f       	mov	r31, r30
     970:	f1 70       	andi	r31, 0x01	; 1
     972:	e0 ff       	sbrs	r30, 0
     974:	07 c0       	rjmp	.+14     	; 0x984 <writetoAll16BitShiftRegisters+0x90>
     976:	e5 b1       	in	r30, 0x05	; 5
     978:	ff 0f       	add	r31, r31
     97a:	ff 0f       	add	r31, r31
     97c:	ff 0f       	add	r31, r31
     97e:	fe 2b       	or	r31, r30
     980:	f5 b9       	out	0x05, r31	; 5
     982:	01 c0       	rjmp	.+2      	; 0x986 <writetoAll16BitShiftRegisters+0x92>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
     984:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     986:	ea e0       	ldi	r30, 0x0A	; 10
     988:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
     98a:	00 00       	nop
     98c:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
     98e:	e9 f7       	brne	.-6      	; 0x98a <writetoAll16BitShiftRegisters+0x96>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
     990:	2f 9a       	sbi	0x05, 7	; 5
     992:	ea e0       	ldi	r30, 0x0A	; 10
     994:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     996:	00 00       	nop
     998:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     99a:	e9 f7       	brne	.-6      	; 0x996 <writetoAll16BitShiftRegisters+0xa2>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
     99c:	2f 98       	cbi	0x05, 7	; 5
     99e:	ea e0       	ldi	r30, 0x0A	; 10
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     9a2:	00 00       	nop
     9a4:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     9a6:	e9 f7       	brne	.-6      	; 0x9a2 <writetoAll16BitShiftRegisters+0xae>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     9a8:	11 97       	sbiw	r26, 0x01	; 1
     9aa:	08 f0       	brcs	.+2      	; 0x9ae <writetoAll16BitShiftRegisters+0xba>
     9ac:	a6 cf       	rjmp	.-180    	; 0x8fa <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
     9ae:	2d 9a       	sbi	0x05, 5	; 5
     9b0:	08 95       	ret

000009b2 <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
     9b2:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	84 36       	cpi	r24, 0x64	; 100
     9ba:	91 05       	cpc	r25, r1
     9bc:	18 f4       	brcc	.+6      	; 0x9c4 <Joystick_Process_Raw+0x12>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	85 83       	std	Z+5, r24	; 0x05
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
     9c4:	89 3e       	cpi	r24, 0xE9	; 233
     9c6:	93 40       	sbci	r25, 0x03	; 3
     9c8:	18 f0       	brcs	.+6      	; 0x9d0 <Joystick_Process_Raw+0x1e>
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	85 83       	std	Z+5, r24	; 0x05
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
     9d0:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	84 36       	cpi	r24, 0x64	; 100
     9d8:	91 05       	cpc	r25, r1
     9da:	18 f4       	brcc	.+6      	; 0x9e2 <Joystick_Process_Raw+0x30>
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	86 83       	std	Z+6, r24	; 0x06
     9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
     9e2:	89 3e       	cpi	r24, 0xE9	; 233
     9e4:	93 40       	sbci	r25, 0x03	; 3
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <Joystick_Process_Raw+0x3c>
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	86 83       	std	Z+6, r24	; 0x06
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
     9ee:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
     9f0:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
     9f2:	16 82       	std	Z+6, r1	; 0x06
     9f4:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
     9f6:	85 81       	ldd	r24, Z+5	; 0x05
     9f8:	81 11       	cpse	r24, r1
     9fa:	fb cf       	rjmp	.-10     	; 0x9f2 <Joystick_Process_Raw+0x40>
     9fc:	08 95       	ret

000009fe <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	68 df       	rcall	.-304    	; 0x8d8 <ADC_read>
     a08:	99 83       	std	Y+1, r25	; 0x01
     a0a:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	64 df       	rcall	.-312    	; 0x8d8 <ADC_read>
     a10:	9b 83       	std	Y+3, r25	; 0x03
     a12:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
     a14:	80 b1       	in	r24, 0x00	; 0
     a16:	83 fb       	bst	r24, 3
     a18:	99 27       	eor	r25, r25
     a1a:	90 f9       	bld	r25, 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	89 27       	eor	r24, r25
     a20:	8c 83       	std	Y+4, r24	; 0x04
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
     a44:	87 70       	andi	r24, 0x07	; 7
	switch(column){
     a46:	48 2f       	mov	r20, r24
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	fa 01       	movw	r30, r20
     a4c:	ea 5b       	subi	r30, 0xBA	; 186
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	90 c3       	rjmp	.+1824   	; 0x1172 <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
     a52:	4f ef       	ldi	r20, 0xFF	; 255
     a54:	50 e8       	ldi	r21, 0x80	; 128
     a56:	14 c0       	rjmp	.+40     	; 0xa80 <pulseColumn+0x58>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
     a58:	4f ef       	ldi	r20, 0xFF	; 255
     a5a:	50 e4       	ldi	r21, 0x40	; 64
			break;
     a5c:	11 c0       	rjmp	.+34     	; 0xa80 <pulseColumn+0x58>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
     a5e:	4f ef       	ldi	r20, 0xFF	; 255
     a60:	50 e2       	ldi	r21, 0x20	; 32
			break;
     a62:	0e c0       	rjmp	.+28     	; 0xa80 <pulseColumn+0x58>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
     a64:	4f ef       	ldi	r20, 0xFF	; 255
     a66:	50 e1       	ldi	r21, 0x10	; 16
			break;
     a68:	0b c0       	rjmp	.+22     	; 0xa80 <pulseColumn+0x58>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
     a6a:	4f ef       	ldi	r20, 0xFF	; 255
     a6c:	58 e0       	ldi	r21, 0x08	; 8
			break;
     a6e:	08 c0       	rjmp	.+16     	; 0xa80 <pulseColumn+0x58>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
     a70:	4f ef       	ldi	r20, 0xFF	; 255
     a72:	54 e0       	ldi	r21, 0x04	; 4
			break;
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <pulseColumn+0x58>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
     a76:	4f ef       	ldi	r20, 0xFF	; 255
     a78:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <pulseColumn+0x58>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
     a7c:	4f ef       	ldi	r20, 0xFF	; 255
     a7e:	51 e0       	ldi	r21, 0x01	; 1
     a80:	0f 2e       	mov	r0, r31
     a82:	ff e0       	ldi	r31, 0x0F	; 15
     a84:	8f 2e       	mov	r8, r31
     a86:	91 2c       	mov	r9, r1
     a88:	f0 2d       	mov	r31, r0
     a8a:	8c 0e       	add	r8, r28
     a8c:	9d 1e       	adc	r9, r29
     a8e:	10 e1       	ldi	r17, 0x10	; 16
     a90:	81 9f       	mul	r24, r17
     a92:	80 0c       	add	r8, r0
     a94:	91 1c       	adc	r9, r1
     a96:	11 24       	eor	r1, r1
     a98:	9a 01       	movw	r18, r20
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     a9a:	e0 e0       	ldi	r30, 0x00	; 0
     a9c:	f0 e0       	ldi	r31, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
     a9e:	6f ef       	ldi	r22, 0xFF	; 255
     aa0:	7f ef       	ldi	r23, 0xFF	; 255
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     aa6:	cc 24       	eor	r12, r12
     aa8:	c3 94       	inc	r12
     aaa:	d1 2c       	mov	r13, r1
     aac:	5f 01       	movw	r10, r30
     aae:	a8 e0       	ldi	r26, 0x08	; 8
     ab0:	aa 0e       	add	r10, r26
     ab2:	b1 1c       	adc	r11, r1
     ab4:	84 01       	movw	r16, r8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
     ab6:	d4 01       	movw	r26, r8
     ab8:	18 96       	adiw	r26, 0x08	; 8
     aba:	fc 90       	ld	r15, X
     abc:	f0 fe       	sbrs	r15, 0
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <pulseColumn+0xb0>
     ac0:	76 01       	movw	r14, r12
     ac2:	0e 2e       	mov	r0, r30
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <pulseColumn+0xa2>
     ac6:	ee 0c       	add	r14, r14
     ac8:	ff 1c       	adc	r15, r15
     aca:	0a 94       	dec	r0
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <pulseColumn+0x9e>
     ace:	e0 94       	com	r14
     ad0:	f0 94       	com	r15
     ad2:	6e 21       	and	r22, r14
     ad4:	7f 21       	and	r23, r15
     ad6:	1b c0       	rjmp	.+54     	; 0xb0e <pulseColumn+0xe6>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
     ad8:	f2 fe       	sbrs	r15, 2
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <pulseColumn+0xcc>
     adc:	76 01       	movw	r14, r12
     ade:	0e 2e       	mov	r0, r30
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <pulseColumn+0xbe>
     ae2:	ee 0c       	add	r14, r14
     ae4:	ff 1c       	adc	r15, r15
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <pulseColumn+0xba>
     aea:	e0 94       	com	r14
     aec:	f0 94       	com	r15
     aee:	2e 21       	and	r18, r14
     af0:	3f 21       	and	r19, r15
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <pulseColumn+0xe6>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     af4:	f1 fe       	sbrs	r15, 1
     af6:	0b c0       	rjmp	.+22     	; 0xb0e <pulseColumn+0xe6>
     af8:	76 01       	movw	r14, r12
     afa:	0a 2c       	mov	r0, r10
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <pulseColumn+0xda>
     afe:	ee 0c       	add	r14, r14
     b00:	ff 1c       	adc	r15, r15
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <pulseColumn+0xd6>
     b06:	e0 94       	com	r14
     b08:	f0 94       	com	r15
     b0a:	6e 21       	and	r22, r14
     b0c:	7f 21       	and	r23, r15
		
		//matrix 1			
		if(frame.frame[column][i] & (1 << RGB_RED_BIT)){register1 &= ~(1 << i);}
     b0e:	d8 01       	movw	r26, r16
     b10:	1c 91       	ld	r17, X
     b12:	bf ef       	ldi	r27, 0xFF	; 255
     b14:	8b 1a       	sub	r8, r27
     b16:	9b 0a       	sbc	r9, r27
     b18:	10 ff       	sbrs	r17, 0
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <pulseColumn+0x10c>
     b1c:	86 01       	movw	r16, r12
     b1e:	0e 2e       	mov	r0, r30
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <pulseColumn+0xfe>
     b22:	00 0f       	add	r16, r16
     b24:	11 1f       	adc	r17, r17
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <pulseColumn+0xfa>
     b2a:	00 95       	com	r16
     b2c:	10 95       	com	r17
     b2e:	80 23       	and	r24, r16
     b30:	91 23       	and	r25, r17
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <pulseColumn+0x140>
		
		else if(frame.frame[column][i] & (1 << RGB_GREEN_BIT)){register3 &= ~(1 << i); }
     b34:	12 ff       	sbrs	r17, 2
     b36:	0c c0       	rjmp	.+24     	; 0xb50 <pulseColumn+0x128>
     b38:	86 01       	movw	r16, r12
     b3a:	0e 2e       	mov	r0, r30
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <pulseColumn+0x11a>
     b3e:	00 0f       	add	r16, r16
     b40:	11 1f       	adc	r17, r17
     b42:	0a 94       	dec	r0
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <pulseColumn+0x116>
     b46:	00 95       	com	r16
     b48:	10 95       	com	r17
     b4a:	40 23       	and	r20, r16
     b4c:	51 23       	and	r21, r17
     b4e:	0c c0       	rjmp	.+24     	; 0xb68 <pulseColumn+0x140>

		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
     b50:	11 ff       	sbrs	r17, 1
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <pulseColumn+0x140>
     b54:	86 01       	movw	r16, r12
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <pulseColumn+0x134>
     b58:	00 0f       	add	r16, r16
     b5a:	11 1f       	adc	r17, r17
     b5c:	aa 94       	dec	r10
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <pulseColumn+0x130>
     b60:	00 95       	com	r16
     b62:	10 95       	com	r17
     b64:	80 23       	and	r24, r16
     b66:	91 23       	and	r25, r17
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     b68:	31 96       	adiw	r30, 0x01	; 1
     b6a:	e8 30       	cpi	r30, 0x08	; 8
     b6c:	f1 05       	cpc	r31, r1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <pulseColumn+0x14a>
		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
     b70:	9d cf       	rjmp	.-198    	; 0xaac <pulseColumn+0x84>
     b72:	c0 de       	rcall	.-640    	; 0x8f4 <writetoAll16BitShiftRegisters>
		
	
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	08 95       	ret

00000b8e <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     b8e:	8b e0       	ldi	r24, 0x0B	; 11
     b90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b94:	8d e7       	ldi	r24, 0x7D	; 125
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b9c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     ba6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     baa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     bb2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     bb6:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     bba:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     bbe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     bc2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     bc6:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     bca:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
     bce:	8f b7       	in	r24, 0x3f	; 63
     bd0:	80 68       	ori	r24, 0x80	; 128
     bd2:	8f bf       	out	0x3f, r24	; 63
     bd4:	08 95       	ret

00000bd6 <__vector_13>:
}

//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
	_avr_timer_cntcurr--;
     be8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
     bec:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
     bf0:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
     bf4:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	a1 09       	sbc	r26, r1
     bfc:	b1 09       	sbc	r27, r1
     bfe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     c02:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     c06:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     c0a:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
     c0e:	89 2b       	or	r24, r25
     c10:	8a 2b       	or	r24, r26
     c12:	8b 2b       	or	r24, r27
     c14:	99 f4       	brne	.+38     	; 0xc3c <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
     c1c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     c20:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     c24:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     c28:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     c2c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     c30:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     c34:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     c38:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	}
}
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
     c4e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_M>
     c52:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_M+0x1>
     c56:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_M+0x2>
     c5a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     c5e:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <_avr_timer_cntcurr>
     c62:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <_avr_timer_cntcurr+0x1>
     c66:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_avr_timer_cntcurr+0x2>
     c6a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_avr_timer_cntcurr+0x3>
     c6e:	08 95       	ret

00000c70 <Joystick_Tick>:
}

              
void Joystick_Tick(){
	static int count = 0;
	if (count == 100){
     c70:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <count.1911>
     c74:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <count.1911+0x1>
     c78:	84 36       	cpi	r24, 0x64	; 100
     c7a:	91 05       	cpc	r25, r1
     c7c:	f9 f4       	brne	.+62     	; 0xcbc <Joystick_Tick+0x4c>
		Joystick_Read(nextJoystickFramePtr);
     c7e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c82:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     c86:	bb de       	rcall	.-650    	; 0x9fe <Joystick_Read>
		Joystick_Process_Raw(nextJoystickFramePtr);
     c88:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c8c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     c90:	90 de       	rcall	.-736    	; 0x9b2 <Joystick_Process_Raw>
		//COPY POINTER BEFORE SWAPPING
		Joystick_Frame* temp = currentJoystickFramePtr;
     c92:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <currentJoystickFramePtr>
     c96:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
		//SWAP BUFFER
		currentJoystickFramePtr = nextJoystickFramePtr;
     c9a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c9e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     ca2:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <currentJoystickFramePtr+0x1>
     ca6:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <currentJoystickFramePtr>
		nextJoystickFramePtr = temp;
     caa:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
     cae:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
		count = 0;
     cb2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <count.1911+0x1>
     cb6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <count.1911>
     cba:	08 95       	ret
	}
	else{count++; return;}
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <count.1911+0x1>
     cc2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <count.1911>
     cc6:	08 95       	ret

00000cc8 <LED_Tick>:
	//READ + POPULATE always into the next frame before swapping buffer
}
			                                                                                        
void LED_Tick(){
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	c0 58       	subi	r28, 0x80	; 128
     cd2:	d1 09       	sbc	r29, r1
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	static int count = 0;
	//update frame every 8 ms
	if(count == 20){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
     cde:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1915>
     ce2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1915+0x1>
     ce6:	44 97       	sbiw	r24, 0x14	; 20
     ce8:	29 f5       	brne	.+74     	; 0xd34 <LED_Tick+0x6c>
     cea:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <current_RGB_FramePtr>
     cee:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     cf2:	80 e8       	ldi	r24, 0x80	; 128
     cf4:	f9 01       	movw	r30, r18
     cf6:	de 01       	movw	r26, r28
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	8a 95       	dec	r24
     d00:	e1 f7       	brne	.-8      	; 0xcfa <LED_Tick+0x32>
		*current_RGB_FramePtr = *next_RGB_FramePtr;
     d02:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <next_RGB_FramePtr>
     d06:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     d0a:	80 e8       	ldi	r24, 0x80	; 128
     d0c:	d9 01       	movw	r26, r18
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	8a 95       	dec	r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <LED_Tick+0x46>
		*next_RGB_FramePtr = tmpFrame;
     d16:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <next_RGB_FramePtr>
     d1a:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	fe 01       	movw	r30, r28
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	01 90       	ld	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	8a 95       	dec	r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <LED_Tick+0x5c>
		count = 0;
     d2c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <count.1915+0x1>
     d30:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count.1915>
	}
	pulseColumn(count++, *current_RGB_FramePtr);
     d34:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <current_RGB_FramePtr>
     d38:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     d3c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1915>
     d40:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1915+0x1>
     d44:	9c 01       	movw	r18, r24
     d46:	2f 5f       	subi	r18, 0xFF	; 255
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <count.1915+0x1>
     d4e:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <count.1915>
     d52:	2d b7       	in	r18, 0x3d	; 61
     d54:	3e b7       	in	r19, 0x3e	; 62
     d56:	20 58       	subi	r18, 0x80	; 128
     d58:	31 09       	sbc	r19, r1
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	3e bf       	out	0x3e, r19	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	2d bf       	out	0x3d, r18	; 61
     d64:	ad b7       	in	r26, 0x3d	; 61
     d66:	be b7       	in	r27, 0x3e	; 62
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	90 e8       	ldi	r25, 0x80	; 128
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	9a 95       	dec	r25
     d72:	e1 f7       	brne	.-8      	; 0xd6c <LED_Tick+0xa4>
     d74:	59 de       	rcall	.-846    	; 0xa28 <pulseColumn>
	
}
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	c0 58       	subi	r28, 0x80	; 128
     d82:	df 4f       	sbci	r29, 0xFF	; 255
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <Gamestate_Tick>:

	
void Gamestate_Tick(){
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
	static int count = 0;
	count++;
     da4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     da8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
     db2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	if(count == 1000){
     db6:	88 3e       	cpi	r24, 0xE8	; 232
     db8:	23 e0       	ldi	r18, 0x03	; 3
     dba:	92 07       	cpc	r25, r18
     dbc:	91 f4       	brne	.+36     	; 0xde2 <Gamestate_Tick+0x4e>
		checkDownAndDo(activeTile,board);//move down 1 square every second;
     dbe:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     dc2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     dc6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     dca:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     dce:	85 d9       	rcall	.-3318   	; 0xda <checkDownAndDo>
		count = 0;//reset count
     dd0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
     dd4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	}
	if(!lostYet){
     dd8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <lostYet>
     ddc:	88 23       	and	r24, r24
     dde:	b9 f0       	breq	.+46     	; 0xe0e <Gamestate_Tick+0x7a>
     de0:	00 c1       	rjmp	.+512    	; 0xfe2 <Gamestate_Tick+0x24e>
     de2:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <lostYet>
     de6:	21 11       	cpse	r18, r1
     de8:	fc c0       	rjmp	.+504    	; 0xfe2 <Gamestate_Tick+0x24e>
		if(count == 200 
     dea:	88 3c       	cpi	r24, 0xC8	; 200
     dec:	91 05       	cpc	r25, r1
     dee:	79 f0       	breq	.+30     	; 0xe0e <Gamestate_Tick+0x7a>
		|| count == 400 
     df0:	80 39       	cpi	r24, 0x90	; 144
     df2:	a1 e0       	ldi	r26, 0x01	; 1
     df4:	9a 07       	cpc	r25, r26
     df6:	59 f0       	breq	.+22     	; 0xe0e <Gamestate_Tick+0x7a>
		|| count == 600 
     df8:	88 35       	cpi	r24, 0x58	; 88
     dfa:	b2 e0       	ldi	r27, 0x02	; 2
     dfc:	9b 07       	cpc	r25, r27
     dfe:	39 f0       	breq	.+14     	; 0xe0e <Gamestate_Tick+0x7a>
		|| count == 800 
     e00:	80 32       	cpi	r24, 0x20	; 32
     e02:	e3 e0       	ldi	r30, 0x03	; 3
     e04:	9e 07       	cpc	r25, r30
     e06:	19 f0       	breq	.+6      	; 0xe0e <Gamestate_Tick+0x7a>
		|| count == 0){
     e08:	89 2b       	or	r24, r25
     e0a:	09 f0       	breq	.+2      	; 0xe0e <Gamestate_Tick+0x7a>
     e0c:	4f c1       	rjmp	.+670    	; 0x10ac <Gamestate_Tick+0x318>
			 //switch based on joystick 
			 //up
				if(currentJoystickFramePtr->Y_direction == UP){
     e0e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
     e12:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
     e16:	86 81       	ldd	r24, Z+6	; 0x06
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	e1 f4       	brne	.+56     	; 0xe54 <Gamestate_Tick+0xc0>
					checkRotateAndDo(activeTile,board);
     e1c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e20:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e24:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e28:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e2c:	f0 d9       	rcall	.-3104   	; 0x20e <checkRotateAndDo>
					checkRotateAndDo(activeTile,board);
     e2e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e32:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e36:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e3a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e3e:	e7 d9       	rcall	.-3122   	; 0x20e <checkRotateAndDo>
					checkRotateAndDo(activeTile,board);
     e40:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e44:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e48:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e4c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e50:	de d9       	rcall	.-3140   	; 0x20e <checkRotateAndDo>
     e52:	31 c0       	rjmp	.+98     	; 0xeb6 <Gamestate_Tick+0x122>
				}
			//down
				else if(currentJoystickFramePtr->Y_direction == DOWN){
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	51 f4       	brne	.+20     	; 0xe6c <Gamestate_Tick+0xd8>
					checkDownAndDo(activeTile,board);
     e58:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e5c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e60:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e64:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e68:	38 d9       	rcall	.-3472   	; 0xda <checkDownAndDo>
     e6a:	25 c0       	rjmp	.+74     	; 0xeb6 <Gamestate_Tick+0x122>
				}
	// 		//right
 				else if(currentJoystickFramePtr->X_direction== RIGHT){checkRightAndDo(activeTile,board);}	
     e6c:	85 81       	ldd	r24, Z+5	; 0x05
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	51 f4       	brne	.+20     	; 0xe86 <Gamestate_Tick+0xf2>
     e72:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e76:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e7a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e7e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e82:	f9 da       	rcall	.-2574   	; 0x476 <checkRightAndDo>
     e84:	18 c0       	rjmp	.+48     	; 0xeb6 <Gamestate_Tick+0x122>
	// 		//left
 				else if(currentJoystickFramePtr->X_direction== LEFT){checkLeftAndDo(activeTile,board);} 
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	51 f4       	brne	.+20     	; 0xe9e <Gamestate_Tick+0x10a>
     e8a:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e8e:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e92:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e96:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e9a:	53 da       	rcall	.-2906   	; 0x342 <checkLeftAndDo>
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <Gamestate_Tick+0x122>
				else if(currentJoystickFramePtr->click){checkRotateAndDo(activeTile,board);}
     e9e:	84 81       	ldd	r24, Z+4	; 0x04
     ea0:	88 23       	and	r24, r24
     ea2:	49 f0       	breq	.+18     	; 0xeb6 <Gamestate_Tick+0x122>
     ea4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     ea8:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     eac:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     eb0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
     eb4:	ac d9       	rcall	.-3240   	; 0x20e <checkRotateAndDo>
     eb6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
     eba:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     ebe:	75 db       	rcall	.-2326   	; 0x5aa <checkLoss>
     ec0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <lostYet>
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     ec4:	c0 91 69 01 	lds	r28, 0x0169	; 0x800169 <activeTile>
     ec8:	d0 91 6a 01 	lds	r29, 0x016A	; 0x80016a <activeTile+0x1>
     ecc:	a9 85       	ldd	r26, Y+9	; 0x09
     ece:	ca 2e       	mov	r12, r26
     ed0:	aa 0f       	add	r26, r26
     ed2:	dd 08       	sbc	r13, r13
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	a6 01       	movw	r20, r12
     ed8:	48 0f       	add	r20, r24
     eda:	51 1d       	adc	r21, r1
     edc:	87 fd       	sbrc	r24, 7
     ede:	5a 95       	dec	r21
					if(y_coord == 15){
     ee0:	4f 30       	cpi	r20, 0x0F	; 15
     ee2:	51 05       	cpc	r21, r1
     ee4:	51 f1       	breq	.+84     	; 0xf3a <Gamestate_Tick+0x1a6>
						convertPieceToInactive(activeTile, board);
						free(activeTile);
						activeTile = createTetromino(rand()%5); 
						break;
					}
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
     ee6:	88 85       	ldd	r24, Y+8	; 0x08
     ee8:	08 2e       	mov	r0, r24
     eea:	00 0c       	add	r0, r0
     eec:	99 0b       	sbc	r25, r25
					if(board->board[x_coord][y_coord + 1]){
     eee:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     ef2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     ef6:	28 81       	ld	r18, Y
     ef8:	7c 01       	movw	r14, r24
     efa:	e2 0e       	add	r14, r18
     efc:	f1 1c       	adc	r15, r1
     efe:	27 fd       	sbrc	r18, 7
     f00:	fa 94       	dec	r15
     f02:	97 01       	movw	r18, r14
     f04:	22 95       	swap	r18
     f06:	32 95       	swap	r19
     f08:	30 7f       	andi	r19, 0xF0	; 240
     f0a:	32 27       	eor	r19, r18
     f0c:	20 7f       	andi	r18, 0xF0	; 240
     f0e:	32 27       	eor	r19, r18
     f10:	26 0f       	add	r18, r22
     f12:	37 1f       	adc	r19, r23
     f14:	f9 01       	movw	r30, r18
     f16:	e4 0f       	add	r30, r20
     f18:	f5 1f       	adc	r31, r21
     f1a:	21 81       	ldd	r18, Z+1	; 0x01
     f1c:	21 11       	cpse	r18, r1
     f1e:	38 c0       	rjmp	.+112    	; 0xf90 <Gamestate_Tick+0x1fc>
     f20:	fe 01       	movw	r30, r28
     f22:	8e 01       	movw	r16, r28
     f24:	0a 5f       	subi	r16, 0xFA	; 250
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     f28:	23 81       	ldd	r18, Z+3	; 0x03
     f2a:	a6 01       	movw	r20, r12
     f2c:	42 0f       	add	r20, r18
     f2e:	51 1d       	adc	r21, r1
     f30:	27 fd       	sbrc	r18, 7
					if(y_coord == 15){
     f32:	5a 95       	dec	r21
     f34:	4f 30       	cpi	r20, 0x0F	; 15
     f36:	51 05       	cpc	r21, r1
						convertPieceToInactive(activeTile, board);
     f38:	a9 f4       	brne	.+42     	; 0xf64 <Gamestate_Tick+0x1d0>
     f3a:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     f3e:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
						free(activeTile);
     f42:	ce 01       	movw	r24, r28
     f44:	49 db       	rcall	.-2414   	; 0x5d8 <convertPieceToInactive>
     f46:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     f4a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
						activeTile = createTetromino(rand()%5); 
     f4e:	d5 d1       	rcall	.+938    	; 0x12fa <free>
     f50:	a4 d2       	rcall	.+1352   	; 0x149a <rand>
     f52:	65 e0       	ldi	r22, 0x05	; 5
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	fa d0       	rcall	.+500    	; 0x114c <__divmodhi4>
     f58:	21 dc       	rcall	.-1982   	; 0x79c <createTetromino>
     f5a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     f5e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     f62:	2c c0       	rjmp	.+88     	; 0xfbc <Gamestate_Tick+0x228>
     f64:	22 81       	ldd	r18, Z+2	; 0x02
						break;
     f66:	dc 01       	movw	r26, r24
					}
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
					if(board->board[x_coord][y_coord + 1]){
     f68:	a2 0f       	add	r26, r18
     f6a:	b1 1d       	adc	r27, r1
     f6c:	27 fd       	sbrc	r18, 7
     f6e:	ba 95       	dec	r27
     f70:	9d 01       	movw	r18, r26
     f72:	22 95       	swap	r18
     f74:	32 95       	swap	r19
     f76:	30 7f       	andi	r19, 0xF0	; 240
     f78:	32 27       	eor	r19, r18
     f7a:	20 7f       	andi	r18, 0xF0	; 240
     f7c:	32 27       	eor	r19, r18
     f7e:	26 0f       	add	r18, r22
     f80:	37 1f       	adc	r19, r23
     f82:	24 0f       	add	r18, r20
     f84:	35 1f       	adc	r19, r21
     f86:	d9 01       	movw	r26, r18
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	2c 91       	ld	r18, X
						convertPieceToInactive(activeTile, board); 
     f8c:	22 23       	and	r18, r18
     f8e:	89 f0       	breq	.+34     	; 0xfb2 <Gamestate_Tick+0x21e>
     f90:	ce 01       	movw	r24, r28
						free(activeTile);
     f92:	22 db       	rcall	.-2492   	; 0x5d8 <convertPieceToInactive>
     f94:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     f98:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     f9c:	ae d1       	rcall	.+860    	; 0x12fa <free>
						activeTile = createTetromino(rand()%5); 
     f9e:	7d d2       	rcall	.+1274   	; 0x149a <rand>
     fa0:	65 e0       	ldi	r22, 0x05	; 5
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	d3 d0       	rcall	.+422    	; 0x114c <__divmodhi4>
     fa6:	fa db       	rcall	.-2060   	; 0x79c <createTetromino>
     fa8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     fac:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <Gamestate_Tick+0x228>
     fb2:	32 96       	adiw	r30, 0x02	; 2
						break;
     fb4:	0e 17       	cp	r16, r30
     fb6:	1f 07       	cpc	r17, r31
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
     fb8:	09 f0       	breq	.+2      	; 0xfbc <Gamestate_Tick+0x228>
     fba:	b6 cf       	rjmp	.-148    	; 0xf28 <Gamestate_Tick+0x194>
     fbc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
						activeTile = createTetromino(rand()%5); 
						break;
					}
				}
				//check for a row to be deleted	
				deletedAFilledRowAndSlidDown(board);
     fc0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     fc4:	34 db       	rcall	.-2456   	; 0x62e <deletedAFilledRowAndSlidDown>
     fc6:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <board>
				combinePieceAndBoardIntoImage(next_RGB_FramePtr,
     fca:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <board+0x1>
     fce:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <activeTile>
     fd2:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <activeTile+0x1>
     fd6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <next_RGB_FramePtr>
     fda:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     fde:	73 db       	rcall	.-2330   	; 0x6c6 <combinePieceAndBoardIntoImage>
     fe0:	65 c0       	rjmp	.+202    	; 0x10ac <Gamestate_Tick+0x318>
     fe2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <next_RGB_FramePtr>
				activeTile, board);
				
				
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
     fe6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     fea:	27 dc       	rcall	.-1970   	; 0x83a <losingDisplay>
     fec:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
     ff0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
		if(currentJoystickFramePtr->click){
     ff4:	84 81       	ldd	r24, Z+4	; 0x04
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <Gamestate_Tick+0x268>
     ffa:	58 c0       	rjmp	.+176    	; 0x10ac <Gamestate_Tick+0x318>
			lostYet = 0;
     ffc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <lostYet>
			for(int i = 0; i < 8; i++){
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
    1004:	05 e0       	ldi	r16, 0x05	; 5
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <Gamestate_Tick+0x2b4>
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
    100a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <board>
    100e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <board+0x1>
    1012:	ec 0f       	add	r30, r28
    1014:	fd 1f       	adc	r31, r29
    1016:	ec 0d       	add	r30, r12
    1018:	fd 1d       	adc	r31, r13
    101a:	10 82       	st	Z, r1
					activeTile = createTetromino(rand()%5);
    101c:	3e d2       	rcall	.+1148   	; 0x149a <rand>
    101e:	b8 01       	movw	r22, r16
    1020:	95 d0       	rcall	.+298    	; 0x114c <__divmodhi4>
    1022:	bc db       	rcall	.-2184   	; 0x79c <createTetromino>
    1024:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
    1028:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
    102c:	bf ef       	ldi	r27, 0xFF	; 255
    102e:	cb 1a       	sub	r12, r27
    1030:	db 0a       	sbc	r13, r27
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
    1032:	e0 e1       	ldi	r30, 0x10	; 16
    1034:	ce 16       	cp	r12, r30
    1036:	d1 04       	cpc	r13, r1
    1038:	41 f7       	brne	.-48     	; 0x100a <Gamestate_Tick+0x276>
    103a:	ff ef       	ldi	r31, 0xFF	; 255
    103c:	ef 1a       	sub	r14, r31
    103e:	ff 0a       	sbc	r15, r31
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
    1040:	28 e0       	ldi	r18, 0x08	; 8
    1042:	e2 16       	cp	r14, r18
    1044:	f1 04       	cpc	r15, r1
    1046:	31 f1       	breq	.+76     	; 0x1094 <Gamestate_Tick+0x300>
    1048:	c1 2c       	mov	r12, r1
    104a:	d1 2c       	mov	r13, r1
    104c:	e7 01       	movw	r28, r14
	pulseColumn(count++, *current_RGB_FramePtr);
	
}

	
void Gamestate_Tick(){
    104e:	c2 95       	swap	r28
    1050:	d2 95       	swap	r29
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
    1052:	d0 7f       	andi	r29, 0xF0	; 240
    1054:	dc 27       	eor	r29, r28
    1056:	c0 7f       	andi	r28, 0xF0	; 240
    1058:	dc 27       	eor	r29, r28
    105a:	d7 cf       	rjmp	.-82     	; 0x100a <Gamestate_Tick+0x276>
    105c:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <next_RGB_FramePtr>
    1060:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					next_RGB_FramePtr->frame[i][j] = 0;
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	10 82       	st	Z, r1
    106e:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <current_RGB_FramePtr>
    1072:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
					current_RGB_FramePtr->frame[i][j] = 0;
    1076:	e2 0f       	add	r30, r18
    1078:	f3 1f       	adc	r31, r19
    107a:	e8 0f       	add	r30, r24
    107c:	f9 1f       	adc	r31, r25
    107e:	10 82       	st	Z, r1
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	80 31       	cpi	r24, 0x10	; 16
    1084:	91 05       	cpc	r25, r1
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
    1086:	51 f7       	brne	.-44     	; 0x105c <Gamestate_Tick+0x2c8>
    1088:	4f 5f       	subi	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	48 30       	cpi	r20, 0x08	; 8
				for(int j = 0; j < 16; j++){
					board->board[i][j] = 0;
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
    108e:	51 05       	cpc	r21, r1
    1090:	19 f4       	brne	.+6      	; 0x1098 <Gamestate_Tick+0x304>
    1092:	0c c0       	rjmp	.+24     	; 0x10ac <Gamestate_Tick+0x318>
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9a 01       	movw	r18, r20
		 }else{ return;}
	}else{
		losingDisplay(next_RGB_FramePtr);//lost
		if(currentJoystickFramePtr->click){
			lostYet = 0;
			for(int i = 0; i < 8; i++){
    109e:	22 95       	swap	r18
    10a0:	32 95       	swap	r19
					activeTile = createTetromino(rand()%5);
				}
			}
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 16; j++){
					next_RGB_FramePtr->frame[i][j] = 0;
    10a2:	30 7f       	andi	r19, 0xF0	; 240
    10a4:	32 27       	eor	r19, r18
    10a6:	20 7f       	andi	r18, 0xF0	; 240
    10a8:	32 27       	eor	r19, r18
    10aa:	d8 cf       	rjmp	.-80     	; 0x105c <Gamestate_Tick+0x2c8>
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
			
		}
		
	
	}
}
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	08 95       	ret

000010be <main>:
    10be:	11 b8       	out	0x01, r1	; 1
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	82 b9       	out	0x02, r24	; 2
int main(void)
{
	DDRA = 0x00;
	PORTA = 0xFF;
	
	DDRB = 0xFF;
    10c4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
    10c6:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
    10c8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    10ca:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
    10cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
    10ce:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
    10d0:	f1 db       	rcall	.-2078   	; 0x8b4 <ADC_init>
	LCD_init();
    10d2:	e1 db       	rcall	.-2110   	; 0x896 <LCD_init>
    10d4:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	78 d0       	rcall	.+240    	; 0x11ca <malloc>
    10da:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <currentJoystickFramePtr+0x1>
    10de:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <currentJoystickFramePtr>
    10e2:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	71 d0       	rcall	.+226    	; 0x11ca <malloc>
    10e8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
    10ec:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
    10f0:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	6a d0       	rcall	.+212    	; 0x11ca <malloc>
    10f6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <current_RGB_FramePtr+0x1>
    10fa:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <current_RGB_FramePtr>
    10fe:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	63 d0       	rcall	.+198    	; 0x11ca <malloc>
    1104:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <next_RGB_FramePtr+0x1>
    1108:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <next_RGB_FramePtr>
    110c:	80 e8       	ldi	r24, 0x80	; 128
	
	board = (Gameboard*) malloc(sizeof(Gameboard));
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	5c d0       	rcall	.+184    	; 0x11ca <malloc>
    1112:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <board+0x1>
    1116:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <board>
	activeTile = createTetromino(rand()%5);
    111a:	bf d1       	rcall	.+894    	; 0x149a <rand>
    111c:	65 e0       	ldi	r22, 0x05	; 5
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	15 d0       	rcall	.+42     	; 0x114c <__divmodhi4>
    1122:	3c db       	rcall	.-2440   	; 0x79c <createTetromino>
    1124:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
    1128:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
// 			}
// 		}
// 	}
	
	//timing
	TimerSet(1);
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	8c dd       	rcall	.-1256   	; 0xc4e <TimerSet>
	TimerOn();
    1136:	2b dd       	rcall	.-1450   	; 0xb8e <TimerOn>
    1138:	9b dd       	rcall	.-1226   	; 0xc70 <Joystick_Tick>
    while (1){
		Joystick_Tick();
    113a:	2c de       	rcall	.-936    	; 0xd94 <Gamestate_Tick>
    113c:	c5 dd       	rcall	.-1142   	; 0xcc8 <LED_Tick>
		Gamestate_Tick(); //TODO
    113e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TimerFlag>
		//SoundEffect_Tick();
		LED_Tick();
    1142:	88 23       	and	r24, r24
    1144:	e1 f3       	breq	.-8      	; 0x113e <main+0x80>
		while(!TimerFlag);
    1146:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <TimerFlag>
    114a:	f6 cf       	rjmp	.-20     	; 0x1138 <main+0x7a>

0000114c <__divmodhi4>:
    114c:	97 fb       	bst	r25, 7
		TimerFlag = 0;
    114e:	07 2e       	mov	r0, r23
    1150:	16 f4       	brtc	.+4      	; 0x1156 <__divmodhi4+0xa>
    }
    1152:	00 94       	com	r0
    1154:	06 d0       	rcall	.+12     	; 0x1162 <__divmodhi4_neg1>
    1156:	77 fd       	sbrc	r23, 7
    1158:	08 d0       	rcall	.+16     	; 0x116a <__divmodhi4_neg2>
    115a:	23 d0       	rcall	.+70     	; 0x11a2 <__udivmodhi4>
    115c:	07 fc       	sbrc	r0, 7
    115e:	05 d0       	rcall	.+10     	; 0x116a <__divmodhi4_neg2>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__divmodhi4_exit>

00001162 <__divmodhi4_neg1>:
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__divmodhi4_neg2>:
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255

00001170 <__divmodhi4_exit>:
    1170:	08 95       	ret

00001172 <__tablejump2__>:
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	00 24       	eor	r0, r0
    1178:	00 1c       	adc	r0, r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	07 90       	elpm	r0, Z+
    117e:	f6 91       	elpm	r31, Z
    1180:	e0 2d       	mov	r30, r0
    1182:	09 94       	ijmp

00001184 <__umulhisi3>:
    1184:	a2 9f       	mul	r26, r18
    1186:	b0 01       	movw	r22, r0
    1188:	b3 9f       	mul	r27, r19
    118a:	c0 01       	movw	r24, r0
    118c:	a3 9f       	mul	r26, r19
    118e:	70 0d       	add	r23, r0
    1190:	81 1d       	adc	r24, r1
    1192:	11 24       	eor	r1, r1
    1194:	91 1d       	adc	r25, r1
    1196:	b2 9f       	mul	r27, r18
    1198:	70 0d       	add	r23, r0
    119a:	81 1d       	adc	r24, r1
    119c:	11 24       	eor	r1, r1
    119e:	91 1d       	adc	r25, r1
    11a0:	08 95       	ret

000011a2 <__udivmodhi4>:
    11a2:	aa 1b       	sub	r26, r26
    11a4:	bb 1b       	sub	r27, r27
    11a6:	51 e1       	ldi	r21, 0x11	; 17
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <__udivmodhi4_ep>

000011aa <__udivmodhi4_loop>:
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	a6 17       	cp	r26, r22
    11b0:	b7 07       	cpc	r27, r23
    11b2:	10 f0       	brcs	.+4      	; 0x11b8 <__udivmodhi4_ep>
    11b4:	a6 1b       	sub	r26, r22
    11b6:	b7 0b       	sbc	r27, r23

000011b8 <__udivmodhi4_ep>:
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	5a 95       	dec	r21
    11be:	a9 f7       	brne	.-22     	; 0x11aa <__udivmodhi4_loop>
    11c0:	80 95       	com	r24
    11c2:	90 95       	com	r25
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	08 95       	ret

000011ca <malloc>:
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	91 05       	cpc	r25, r1
    11d6:	10 f4       	brcc	.+4      	; 0x11dc <malloc+0x12>
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__flp>
    11e0:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__flp+0x1>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	19 f1       	breq	.+70     	; 0x1236 <malloc+0x6c>
    11f0:	40 81       	ld	r20, Z
    11f2:	51 81       	ldd	r21, Z+1	; 0x01
    11f4:	02 81       	ldd	r16, Z+2	; 0x02
    11f6:	13 81       	ldd	r17, Z+3	; 0x03
    11f8:	48 17       	cp	r20, r24
    11fa:	59 07       	cpc	r21, r25
    11fc:	c8 f0       	brcs	.+50     	; 0x1230 <malloc+0x66>
    11fe:	84 17       	cp	r24, r20
    1200:	95 07       	cpc	r25, r21
    1202:	69 f4       	brne	.+26     	; 0x121e <malloc+0x54>
    1204:	10 97       	sbiw	r26, 0x00	; 0
    1206:	31 f0       	breq	.+12     	; 0x1214 <malloc+0x4a>
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	0c 93       	st	X, r16
    120c:	12 97       	sbiw	r26, 0x02	; 2
    120e:	13 96       	adiw	r26, 0x03	; 3
    1210:	1c 93       	st	X, r17
    1212:	27 c0       	rjmp	.+78     	; 0x1262 <malloc+0x98>
    1214:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <__flp>
    1218:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <__flp+0x1>
    121c:	22 c0       	rjmp	.+68     	; 0x1262 <malloc+0x98>
    121e:	21 15       	cp	r18, r1
    1220:	31 05       	cpc	r19, r1
    1222:	19 f0       	breq	.+6      	; 0x122a <malloc+0x60>
    1224:	42 17       	cp	r20, r18
    1226:	53 07       	cpc	r21, r19
    1228:	18 f4       	brcc	.+6      	; 0x1230 <malloc+0x66>
    122a:	9a 01       	movw	r18, r20
    122c:	bd 01       	movw	r22, r26
    122e:	ef 01       	movw	r28, r30
    1230:	df 01       	movw	r26, r30
    1232:	f8 01       	movw	r30, r16
    1234:	db cf       	rjmp	.-74     	; 0x11ec <malloc+0x22>
    1236:	21 15       	cp	r18, r1
    1238:	31 05       	cpc	r19, r1
    123a:	f9 f0       	breq	.+62     	; 0x127a <malloc+0xb0>
    123c:	28 1b       	sub	r18, r24
    123e:	39 0b       	sbc	r19, r25
    1240:	24 30       	cpi	r18, 0x04	; 4
    1242:	31 05       	cpc	r19, r1
    1244:	80 f4       	brcc	.+32     	; 0x1266 <malloc+0x9c>
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	61 15       	cp	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	21 f0       	breq	.+8      	; 0x1258 <malloc+0x8e>
    1250:	fb 01       	movw	r30, r22
    1252:	93 83       	std	Z+3, r25	; 0x03
    1254:	82 83       	std	Z+2, r24	; 0x02
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <malloc+0x96>
    1258:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__flp+0x1>
    125c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__flp>
    1260:	fe 01       	movw	r30, r28
    1262:	32 96       	adiw	r30, 0x02	; 2
    1264:	44 c0       	rjmp	.+136    	; 0x12ee <malloc+0x124>
    1266:	fe 01       	movw	r30, r28
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	81 93       	st	Z+, r24
    126e:	91 93       	st	Z+, r25
    1270:	22 50       	subi	r18, 0x02	; 2
    1272:	31 09       	sbc	r19, r1
    1274:	39 83       	std	Y+1, r19	; 0x01
    1276:	28 83       	st	Y, r18
    1278:	3a c0       	rjmp	.+116    	; 0x12ee <malloc+0x124>
    127a:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    127e:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    1282:	23 2b       	or	r18, r19
    1284:	41 f4       	brne	.+16     	; 0x1296 <malloc+0xcc>
    1286:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    128a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    128e:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <__brkval+0x1>
    1292:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <__brkval>
    1296:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    129a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	41 f4       	brne	.+16     	; 0x12b4 <malloc+0xea>
    12a4:	2d b7       	in	r18, 0x3d	; 61
    12a6:	3e b7       	in	r19, 0x3e	; 62
    12a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12b0:	24 1b       	sub	r18, r20
    12b2:	35 0b       	sbc	r19, r21
    12b4:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <__brkval>
    12b8:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <__brkval+0x1>
    12bc:	e2 17       	cp	r30, r18
    12be:	f3 07       	cpc	r31, r19
    12c0:	a0 f4       	brcc	.+40     	; 0x12ea <malloc+0x120>
    12c2:	2e 1b       	sub	r18, r30
    12c4:	3f 0b       	sbc	r19, r31
    12c6:	28 17       	cp	r18, r24
    12c8:	39 07       	cpc	r19, r25
    12ca:	78 f0       	brcs	.+30     	; 0x12ea <malloc+0x120>
    12cc:	ac 01       	movw	r20, r24
    12ce:	4e 5f       	subi	r20, 0xFE	; 254
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255
    12d2:	24 17       	cp	r18, r20
    12d4:	35 07       	cpc	r19, r21
    12d6:	48 f0       	brcs	.+18     	; 0x12ea <malloc+0x120>
    12d8:	4e 0f       	add	r20, r30
    12da:	5f 1f       	adc	r21, r31
    12dc:	50 93 70 01 	sts	0x0170, r21	; 0x800170 <__brkval+0x1>
    12e0:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <__brkval>
    12e4:	81 93       	st	Z+, r24
    12e6:	91 93       	st	Z+, r25
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <malloc+0x124>
    12ea:	e0 e0       	ldi	r30, 0x00	; 0
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	cf 01       	movw	r24, r30
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <free>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	09 f4       	brne	.+2      	; 0x1304 <free+0xa>
    1302:	81 c0       	rjmp	.+258    	; 0x1406 <free+0x10c>
    1304:	fc 01       	movw	r30, r24
    1306:	32 97       	sbiw	r30, 0x02	; 2
    1308:	13 82       	std	Z+3, r1	; 0x03
    130a:	12 82       	std	Z+2, r1	; 0x02
    130c:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <__flp>
    1310:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <__flp+0x1>
    1314:	10 97       	sbiw	r26, 0x00	; 0
    1316:	81 f4       	brne	.+32     	; 0x1338 <free+0x3e>
    1318:	20 81       	ld	r18, Z
    131a:	31 81       	ldd	r19, Z+1	; 0x01
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    1324:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	51 f5       	brne	.+84     	; 0x1382 <free+0x88>
    132e:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <__brkval+0x1>
    1332:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <__brkval>
    1336:	67 c0       	rjmp	.+206    	; 0x1406 <free+0x10c>
    1338:	ed 01       	movw	r28, r26
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	ce 17       	cp	r28, r30
    1340:	df 07       	cpc	r29, r31
    1342:	40 f4       	brcc	.+16     	; 0x1354 <free+0x5a>
    1344:	4a 81       	ldd	r20, Y+2	; 0x02
    1346:	5b 81       	ldd	r21, Y+3	; 0x03
    1348:	9e 01       	movw	r18, r28
    134a:	41 15       	cp	r20, r1
    134c:	51 05       	cpc	r21, r1
    134e:	f1 f0       	breq	.+60     	; 0x138c <free+0x92>
    1350:	ea 01       	movw	r28, r20
    1352:	f5 cf       	rjmp	.-22     	; 0x133e <free+0x44>
    1354:	d3 83       	std	Z+3, r29	; 0x03
    1356:	c2 83       	std	Z+2, r28	; 0x02
    1358:	40 81       	ld	r20, Z
    135a:	51 81       	ldd	r21, Z+1	; 0x01
    135c:	84 0f       	add	r24, r20
    135e:	95 1f       	adc	r25, r21
    1360:	c8 17       	cp	r28, r24
    1362:	d9 07       	cpc	r29, r25
    1364:	59 f4       	brne	.+22     	; 0x137c <free+0x82>
    1366:	88 81       	ld	r24, Y
    1368:	99 81       	ldd	r25, Y+1	; 0x01
    136a:	84 0f       	add	r24, r20
    136c:	95 1f       	adc	r25, r21
    136e:	02 96       	adiw	r24, 0x02	; 2
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	93 83       	std	Z+3, r25	; 0x03
    137a:	82 83       	std	Z+2, r24	; 0x02
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	29 f4       	brne	.+10     	; 0x138c <free+0x92>
    1382:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__flp+0x1>
    1386:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__flp>
    138a:	3d c0       	rjmp	.+122    	; 0x1406 <free+0x10c>
    138c:	e9 01       	movw	r28, r18
    138e:	fb 83       	std	Y+3, r31	; 0x03
    1390:	ea 83       	std	Y+2, r30	; 0x02
    1392:	49 91       	ld	r20, Y+
    1394:	59 91       	ld	r21, Y+
    1396:	c4 0f       	add	r28, r20
    1398:	d5 1f       	adc	r29, r21
    139a:	ec 17       	cp	r30, r28
    139c:	fd 07       	cpc	r31, r29
    139e:	61 f4       	brne	.+24     	; 0x13b8 <free+0xbe>
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	84 0f       	add	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	02 96       	adiw	r24, 0x02	; 2
    13aa:	e9 01       	movw	r28, r18
    13ac:	99 83       	std	Y+1, r25	; 0x01
    13ae:	88 83       	st	Y, r24
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	9b 83       	std	Y+3, r25	; 0x03
    13b6:	8a 83       	std	Y+2, r24	; 0x02
    13b8:	e0 e0       	ldi	r30, 0x00	; 0
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	12 96       	adiw	r26, 0x02	; 2
    13be:	8d 91       	ld	r24, X+
    13c0:	9c 91       	ld	r25, X
    13c2:	13 97       	sbiw	r26, 0x03	; 3
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	19 f0       	breq	.+6      	; 0x13ce <free+0xd4>
    13c8:	fd 01       	movw	r30, r26
    13ca:	dc 01       	movw	r26, r24
    13cc:	f7 cf       	rjmp	.-18     	; 0x13bc <free+0xc2>
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	11 97       	sbiw	r26, 0x01	; 1
    13d4:	9d 01       	movw	r18, r26
    13d6:	2e 5f       	subi	r18, 0xFE	; 254
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    13e2:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	69 f4       	brne	.+26     	; 0x1406 <free+0x10c>
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	29 f4       	brne	.+10     	; 0x13fa <free+0x100>
    13f0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__flp+0x1>
    13f4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__flp>
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <free+0x104>
    13fa:	13 82       	std	Z+3, r1	; 0x03
    13fc:	12 82       	std	Z+2, r1	; 0x02
    13fe:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <__brkval+0x1>
    1402:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <__brkval>
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <do_rand>:
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	68 81       	ld	r22, Y
    1424:	79 81       	ldd	r23, Y+1	; 0x01
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	61 15       	cp	r22, r1
    142c:	71 05       	cpc	r23, r1
    142e:	81 05       	cpc	r24, r1
    1430:	91 05       	cpc	r25, r1
    1432:	21 f4       	brne	.+8      	; 0x143c <do_rand+0x30>
    1434:	64 e2       	ldi	r22, 0x24	; 36
    1436:	79 ed       	ldi	r23, 0xD9	; 217
    1438:	8b e5       	ldi	r24, 0x5B	; 91
    143a:	97 e0       	ldi	r25, 0x07	; 7
    143c:	2d e1       	ldi	r18, 0x1D	; 29
    143e:	33 ef       	ldi	r19, 0xF3	; 243
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	38 d0       	rcall	.+112    	; 0x14b6 <__divmodsi4>
    1446:	49 01       	movw	r8, r18
    1448:	5a 01       	movw	r10, r20
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	a7 ea       	ldi	r26, 0xA7	; 167
    1450:	b1 e4       	ldi	r27, 0x41	; 65
    1452:	4d d0       	rcall	.+154    	; 0x14ee <__muluhisi3>
    1454:	6b 01       	movw	r12, r22
    1456:	7c 01       	movw	r14, r24
    1458:	ac ee       	ldi	r26, 0xEC	; 236
    145a:	b4 ef       	ldi	r27, 0xF4	; 244
    145c:	a5 01       	movw	r20, r10
    145e:	94 01       	movw	r18, r8
    1460:	52 d0       	rcall	.+164    	; 0x1506 <__mulohisi3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8c 0d       	add	r24, r12
    1468:	9d 1d       	adc	r25, r13
    146a:	ae 1d       	adc	r26, r14
    146c:	bf 1d       	adc	r27, r15
    146e:	b7 ff       	sbrs	r27, 7
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <do_rand+0x6c>
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	a1 09       	sbc	r26, r1
    1476:	b0 48       	sbci	r27, 0x80	; 128
    1478:	88 83       	st	Y, r24
    147a:	99 83       	std	Y+1, r25	; 0x01
    147c:	aa 83       	std	Y+2, r26	; 0x02
    147e:	bb 83       	std	Y+3, r27	; 0x03
    1480:	9f 77       	andi	r25, 0x7F	; 127
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	08 95       	ret

00001498 <rand_r>:
    1498:	b9 cf       	rjmp	.-142    	; 0x140c <do_rand>

0000149a <rand>:
    149a:	86 e0       	ldi	r24, 0x06	; 6
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	b6 cf       	rjmp	.-148    	; 0x140c <do_rand>

000014a0 <srand>:
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    14a8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    14ac:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    14b0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    14b4:	08 95       	ret

000014b6 <__divmodsi4>:
    14b6:	05 2e       	mov	r0, r21
    14b8:	97 fb       	bst	r25, 7
    14ba:	16 f4       	brtc	.+4      	; 0x14c0 <__divmodsi4+0xa>
    14bc:	00 94       	com	r0
    14be:	0f d0       	rcall	.+30     	; 0x14de <__negsi2>
    14c0:	57 fd       	sbrc	r21, 7
    14c2:	05 d0       	rcall	.+10     	; 0x14ce <__divmodsi4_neg2>
    14c4:	24 d0       	rcall	.+72     	; 0x150e <__udivmodsi4>
    14c6:	07 fc       	sbrc	r0, 7
    14c8:	02 d0       	rcall	.+4      	; 0x14ce <__divmodsi4_neg2>
    14ca:	46 f4       	brtc	.+16     	; 0x14dc <__divmodsi4_exit>
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <__negsi2>

000014ce <__divmodsi4_neg2>:
    14ce:	50 95       	com	r21
    14d0:	40 95       	com	r20
    14d2:	30 95       	com	r19
    14d4:	21 95       	neg	r18
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	4f 4f       	sbci	r20, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255

000014dc <__divmodsi4_exit>:
    14dc:	08 95       	ret

000014de <__negsi2>:
    14de:	90 95       	com	r25
    14e0:	80 95       	com	r24
    14e2:	70 95       	com	r23
    14e4:	61 95       	neg	r22
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	08 95       	ret

000014ee <__muluhisi3>:
    14ee:	4a de       	rcall	.-876    	; 0x1184 <__umulhisi3>
    14f0:	a5 9f       	mul	r26, r21
    14f2:	90 0d       	add	r25, r0
    14f4:	b4 9f       	mul	r27, r20
    14f6:	90 0d       	add	r25, r0
    14f8:	a4 9f       	mul	r26, r20
    14fa:	80 0d       	add	r24, r0
    14fc:	91 1d       	adc	r25, r1
    14fe:	11 24       	eor	r1, r1
    1500:	08 95       	ret

00001502 <__mulshisi3>:
    1502:	b7 ff       	sbrs	r27, 7
    1504:	f4 cf       	rjmp	.-24     	; 0x14ee <__muluhisi3>

00001506 <__mulohisi3>:
    1506:	f3 df       	rcall	.-26     	; 0x14ee <__muluhisi3>
    1508:	82 1b       	sub	r24, r18
    150a:	93 0b       	sbc	r25, r19
    150c:	08 95       	ret

0000150e <__udivmodsi4>:
    150e:	a1 e2       	ldi	r26, 0x21	; 33
    1510:	1a 2e       	mov	r1, r26
    1512:	aa 1b       	sub	r26, r26
    1514:	bb 1b       	sub	r27, r27
    1516:	fd 01       	movw	r30, r26
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <__udivmodsi4_ep>

0000151a <__udivmodsi4_loop>:
    151a:	aa 1f       	adc	r26, r26
    151c:	bb 1f       	adc	r27, r27
    151e:	ee 1f       	adc	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	a2 17       	cp	r26, r18
    1524:	b3 07       	cpc	r27, r19
    1526:	e4 07       	cpc	r30, r20
    1528:	f5 07       	cpc	r31, r21
    152a:	20 f0       	brcs	.+8      	; 0x1534 <__udivmodsi4_ep>
    152c:	a2 1b       	sub	r26, r18
    152e:	b3 0b       	sbc	r27, r19
    1530:	e4 0b       	sbc	r30, r20
    1532:	f5 0b       	sbc	r31, r21

00001534 <__udivmodsi4_ep>:
    1534:	66 1f       	adc	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	1a 94       	dec	r1
    153e:	69 f7       	brne	.-38     	; 0x151a <__udivmodsi4_loop>
    1540:	60 95       	com	r22
    1542:	70 95       	com	r23
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	9b 01       	movw	r18, r22
    154a:	ac 01       	movw	r20, r24
    154c:	bd 01       	movw	r22, r26
    154e:	cf 01       	movw	r24, r30
    1550:	08 95       	ret

00001552 <_exit>:
    1552:	f8 94       	cli

00001554 <__stop_program>:
    1554:	ff cf       	rjmp	.-2      	; 0x1554 <__stop_program>
