
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080010a  0080010a  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001099  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b44  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077e  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000472  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f3 c0       	rjmp	.+486    	; 0x21c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	14 d1       	rcall	.+552    	; 0x2ec <main>
  c4:	59 c2       	rjmp	.+1202   	; 0x578 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <ADC_init>:
   asm("nop");
  }
}

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <ADC_channel>:
}

void ADC_channel(unsigned char channel){
	if(channel < 8 && channel >= 0){
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	48 f4       	brcc	.+18     	; 0x140 <ADC_channel+0x16>
		//CLEAR ADMUX2:0
		ADMUX &= 0xF8;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	90 83       	st	Z, r25
		//Set ADMUX
		ADMUX |= (channel & 0x07);
 138:	90 81       	ld	r25, Z
 13a:	87 70       	andi	r24, 0x07	; 7
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <ADC_Read>:
	}
}

unsigned short ADC_Read(unsigned char channel){
		unsigned short myADC = 0x0000;
		ADC_channel(channel);
 142:	f3 df       	rcall	.-26     	; 0x12a <ADC_channel>
		ADCSRA |= (1 << ADSC);
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
		while(ADCSRA & (1 << ADSC));
 14e:	80 81       	ld	r24, Z
 150:	86 fd       	sbrc	r24, 6
 152:	fd cf       	rjmp	.-6      	; 0x14e <ADC_Read+0xc>
		myADC = ADC;
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		return myADC;
} 
 15c:	08 95       	ret

0000015e <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
 15e:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < 100){frame->X_direction = LEFT;}
 160:	80 81       	ld	r24, Z
 162:	91 81       	ldd	r25, Z+1	; 0x01
 164:	84 36       	cpi	r24, 0x64	; 100
 166:	91 05       	cpc	r25, r1
 168:	18 f4       	brcc	.+6      	; 0x170 <Joystick_Process_Raw+0x12>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 83       	std	Z+5, r24	; 0x05
 16e:	07 c0       	rjmp	.+14     	; 0x17e <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > 1000){frame->X_direction = RIGHT;}
 170:	89 3e       	cpi	r24, 0xE9	; 233
 172:	93 40       	sbci	r25, 0x03	; 3
 174:	18 f0       	brcs	.+6      	; 0x17c <Joystick_Process_Raw+0x1e>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	85 83       	std	Z+5, r24	; 0x05
 17a:	01 c0       	rjmp	.+2      	; 0x17e <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
 17c:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < 100){frame->Y_direction = UP;}
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	93 81       	ldd	r25, Z+3	; 0x03
 182:	84 36       	cpi	r24, 0x64	; 100
 184:	91 05       	cpc	r25, r1
 186:	18 f4       	brcc	.+6      	; 0x18e <Joystick_Process_Raw+0x30>
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	86 83       	std	Z+6, r24	; 0x06
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > 1000){frame->Y_direction = DOWN;}
 18e:	89 3e       	cpi	r24, 0xE9	; 233
 190:	93 40       	sbci	r25, 0x03	; 3
 192:	18 f0       	brcs	.+6      	; 0x19a <Joystick_Process_Raw+0x3c>
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	86 83       	std	Z+6, r24	; 0x06
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
 19a:	16 82       	std	Z+6, r1	; 0x06
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
	
	
}
 19c:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to null the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	08 95       	ret
	else if(frame->raw_y > 1000){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to null the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
 1a2:	85 81       	ldd	r24, Z+5	; 0x05
 1a4:	81 11       	cpse	r24, r1
 1a6:	fb cf       	rjmp	.-10     	; 0x19e <Joystick_Process_Raw+0x40>
 1a8:	08 95       	ret

000001aa <Joystick_Read>:
	} 
	
	
}

void Joystick_Read(Joystick_Frame* frame){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_Read(0);		//read 10 bit ADC value on ADC0	
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	c7 df       	rcall	.-114    	; 0x142 <ADC_Read>
 1b4:	99 83       	std	Y+1, r25	; 0x01
 1b6:	88 83       	st	Y, r24
	frame->raw_y = ADC_Read(1);		//read ADC1 as well
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	c3 df       	rcall	.-122    	; 0x142 <ADC_Read>
 1bc:	9b 83       	std	Y+3, r25	; 0x03
 1be:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
 1c0:	80 b1       	in	r24, 0x00	; 0
 1c2:	83 fb       	bst	r24, 3
 1c4:	99 27       	eor	r25, r25
 1c6:	90 f9       	bld	r25, 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	89 27       	eor	r24, r25
 1cc:	8c 83       	std	Y+4, r24	; 0x04
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1da:	8d e7       	ldi	r24, 0x7D	; 125
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1f8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1fc:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 200:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 204:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 208:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 20c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 210:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 214:	8f b7       	in	r24, 0x3f	; 63
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8f bf       	out	0x3f, r24	; 63
 21a:	08 95       	ret

0000021c <__vector_13>:
}


//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 232:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 236:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 23a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	a1 09       	sbc	r26, r1
 242:	b1 09       	sbc	r27, r1
 244:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 248:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 24c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 250:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	if(_avr_timer_cntcurr == 0){
 254:	89 2b       	or	r24, r25
 256:	8a 2b       	or	r24, r26
 258:	8b 2b       	or	r24, r27
 25a:	99 f4       	brne	.+38     	; 0x282 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 262:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 266:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 26a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 26e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 272:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 276:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 27a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 27e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}
}
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 294:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 298:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 29c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 2a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 2a4:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 2a8:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 2ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 2b0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 2b4:	08 95       	ret

000002b6 <Joystick_Tick>:
}

void Joystick_Tick(){
	//READ + POPULATE always into the next frame before swapping buffer
	Joystick_Read(nextJoystickFramePtr);	
 2b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2ba:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2be:	75 df       	rcall	.-278    	; 0x1aa <Joystick_Read>
	Joystick_Process_Raw(nextJoystickFramePtr);	
 2c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2c4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2c8:	4a df       	rcall	.-364    	; 0x15e <Joystick_Process_Raw>
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
 2ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <currentJoystickFramePtr>
 2ce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
 2d2:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <nextJoystickFramePtr>
 2d6:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 2da:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <currentJoystickFramePtr+0x1>
 2de:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <currentJoystickFramePtr>
	nextJoystickFramePtr = temp;
 2e2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 2e6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 2ea:	08 95       	ret

000002ec <main>:
}

int main(void)
{
	DDRA = 0x00;
 2ec:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	82 b9       	out	0x02, r24	; 2
	
	//DDRB = 0x______
	//PORTB = 0x________
	
	DDRC = 0xFF;
 2f2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 2f4:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 2f6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 2f8:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 2fa:	11 df       	rcall	.-478    	; 0x11e <ADC_init>
	LCD_init();
 2fc:	01 df       	rcall	.-510    	; 0x100 <LCD_init>
 2fe:	87 e0       	ldi	r24, 0x07	; 7
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	19 d0       	rcall	.+50     	; 0x336 <malloc>
 304:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <currentJoystickFramePtr+0x1>
 308:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <currentJoystickFramePtr>
 30c:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	12 d0       	rcall	.+36     	; 0x336 <malloc>
 312:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 316:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 31a:	6a ef       	ldi	r22, 0xFA	; 250
 31c:	70 e0       	ldi	r23, 0x00	; 0
	//timing
	TimerSet(250);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	b8 df       	rcall	.-144    	; 0x294 <TimerSet>
	TimerOn();
 324:	57 df       	rcall	.-338    	; 0x1d4 <TimerOn>
 326:	c7 df       	rcall	.-114    	; 0x2b6 <Joystick_Tick>
    while (1){
		Joystick_Tick();
 328:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		//testDisplayJoystickADC();
		while(!TimerFlag);
 32c:	88 23       	and	r24, r24
 32e:	e1 f3       	breq	.-8      	; 0x328 <main+0x3c>
 330:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
		TimerFlag = 0;
 334:	f8 cf       	rjmp	.-16     	; 0x326 <main+0x3a>

00000336 <malloc>:
 336:	0f 93       	push	r16
    }
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	91 05       	cpc	r25, r1
 342:	10 f4       	brcc	.+4      	; 0x348 <malloc+0x12>
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__flp>
 34c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__flp+0x1>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	a0 e0       	ldi	r26, 0x00	; 0
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	30 97       	sbiw	r30, 0x00	; 0
 35a:	19 f1       	breq	.+70     	; 0x3a2 <malloc+0x6c>
 35c:	40 81       	ld	r20, Z
 35e:	51 81       	ldd	r21, Z+1	; 0x01
 360:	02 81       	ldd	r16, Z+2	; 0x02
 362:	13 81       	ldd	r17, Z+3	; 0x03
 364:	48 17       	cp	r20, r24
 366:	59 07       	cpc	r21, r25
 368:	c8 f0       	brcs	.+50     	; 0x39c <malloc+0x66>
 36a:	84 17       	cp	r24, r20
 36c:	95 07       	cpc	r25, r21
 36e:	69 f4       	brne	.+26     	; 0x38a <malloc+0x54>
 370:	10 97       	sbiw	r26, 0x00	; 0
 372:	31 f0       	breq	.+12     	; 0x380 <malloc+0x4a>
 374:	12 96       	adiw	r26, 0x02	; 2
 376:	0c 93       	st	X, r16
 378:	12 97       	sbiw	r26, 0x02	; 2
 37a:	13 96       	adiw	r26, 0x03	; 3
 37c:	1c 93       	st	X, r17
 37e:	27 c0       	rjmp	.+78     	; 0x3ce <malloc+0x98>
 380:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <__flp>
 384:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <__flp+0x1>
 388:	22 c0       	rjmp	.+68     	; 0x3ce <malloc+0x98>
 38a:	21 15       	cp	r18, r1
 38c:	31 05       	cpc	r19, r1
 38e:	19 f0       	breq	.+6      	; 0x396 <malloc+0x60>
 390:	42 17       	cp	r20, r18
 392:	53 07       	cpc	r21, r19
 394:	18 f4       	brcc	.+6      	; 0x39c <malloc+0x66>
 396:	9a 01       	movw	r18, r20
 398:	bd 01       	movw	r22, r26
 39a:	ef 01       	movw	r28, r30
 39c:	df 01       	movw	r26, r30
 39e:	f8 01       	movw	r30, r16
 3a0:	db cf       	rjmp	.-74     	; 0x358 <malloc+0x22>
 3a2:	21 15       	cp	r18, r1
 3a4:	31 05       	cpc	r19, r1
 3a6:	f9 f0       	breq	.+62     	; 0x3e6 <malloc+0xb0>
 3a8:	28 1b       	sub	r18, r24
 3aa:	39 0b       	sbc	r19, r25
 3ac:	24 30       	cpi	r18, 0x04	; 4
 3ae:	31 05       	cpc	r19, r1
 3b0:	80 f4       	brcc	.+32     	; 0x3d2 <malloc+0x9c>
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	9b 81       	ldd	r25, Y+3	; 0x03
 3b6:	61 15       	cp	r22, r1
 3b8:	71 05       	cpc	r23, r1
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <malloc+0x8e>
 3bc:	fb 01       	movw	r30, r22
 3be:	93 83       	std	Z+3, r25	; 0x03
 3c0:	82 83       	std	Z+2, r24	; 0x02
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <malloc+0x96>
 3c4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__flp+0x1>
 3c8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__flp>
 3cc:	fe 01       	movw	r30, r28
 3ce:	32 96       	adiw	r30, 0x02	; 2
 3d0:	44 c0       	rjmp	.+136    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3d2:	fe 01       	movw	r30, r28
 3d4:	e2 0f       	add	r30, r18
 3d6:	f3 1f       	adc	r31, r19
 3d8:	81 93       	st	Z+, r24
 3da:	91 93       	st	Z+, r25
 3dc:	22 50       	subi	r18, 0x02	; 2
 3de:	31 09       	sbc	r19, r1
 3e0:	39 83       	std	Y+1, r19	; 0x01
 3e2:	28 83       	st	Y, r18
 3e4:	3a c0       	rjmp	.+116    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3e6:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 3ea:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 3ee:	23 2b       	or	r18, r19
 3f0:	41 f4       	brne	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3fa:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__brkval+0x1>
 3fe:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__brkval>
 402:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 406:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40a:	21 15       	cp	r18, r1
 40c:	31 05       	cpc	r19, r1
 40e:	41 f4       	brne	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	2d b7       	in	r18, 0x3d	; 61
 412:	3e b7       	in	r19, 0x3e	; 62
 414:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 418:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 41c:	24 1b       	sub	r18, r20
 41e:	35 0b       	sbc	r19, r21
 420:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__brkval>
 424:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <__brkval+0x1>
 428:	e2 17       	cp	r30, r18
 42a:	f3 07       	cpc	r31, r19
 42c:	a0 f4       	brcc	.+40     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 42e:	2e 1b       	sub	r18, r30
 430:	3f 0b       	sbc	r19, r31
 432:	28 17       	cp	r18, r24
 434:	39 07       	cpc	r19, r25
 436:	78 f0       	brcs	.+30     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 438:	ac 01       	movw	r20, r24
 43a:	4e 5f       	subi	r20, 0xFE	; 254
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	24 17       	cp	r18, r20
 440:	35 07       	cpc	r19, r21
 442:	48 f0       	brcs	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 444:	4e 0f       	add	r20, r30
 446:	5f 1f       	adc	r21, r31
 448:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__brkval+0x1>
 44c:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__brkval>
 450:	81 93       	st	Z+, r24
 452:	91 93       	st	Z+, r25
 454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	e0 e0       	ldi	r30, 0x00	; 0
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	cf 01       	movw	r24, r30
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <free>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	09 f4       	brne	.+2      	; 0x470 <free+0xa>
 46e:	81 c0       	rjmp	.+258    	; 0x572 <free+0x10c>
 470:	fc 01       	movw	r30, r24
 472:	32 97       	sbiw	r30, 0x02	; 2
 474:	13 82       	std	Z+3, r1	; 0x03
 476:	12 82       	std	Z+2, r1	; 0x02
 478:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__flp>
 47c:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__flp+0x1>
 480:	10 97       	sbiw	r26, 0x00	; 0
 482:	81 f4       	brne	.+32     	; 0x4a4 <free+0x3e>
 484:	20 81       	ld	r18, Z
 486:	31 81       	ldd	r19, Z+1	; 0x01
 488:	82 0f       	add	r24, r18
 48a:	93 1f       	adc	r25, r19
 48c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 490:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 494:	28 17       	cp	r18, r24
 496:	39 07       	cpc	r19, r25
 498:	51 f5       	brne	.+84     	; 0x4ee <free+0x88>
 49a:	f0 93 35 01 	sts	0x0135, r31	; 0x800135 <__brkval+0x1>
 49e:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <__brkval>
 4a2:	67 c0       	rjmp	.+206    	; 0x572 <free+0x10c>
 4a4:	ed 01       	movw	r28, r26
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	ce 17       	cp	r28, r30
 4ac:	df 07       	cpc	r29, r31
 4ae:	40 f4       	brcc	.+16     	; 0x4c0 <free+0x5a>
 4b0:	4a 81       	ldd	r20, Y+2	; 0x02
 4b2:	5b 81       	ldd	r21, Y+3	; 0x03
 4b4:	9e 01       	movw	r18, r28
 4b6:	41 15       	cp	r20, r1
 4b8:	51 05       	cpc	r21, r1
 4ba:	f1 f0       	breq	.+60     	; 0x4f8 <free+0x92>
 4bc:	ea 01       	movw	r28, r20
 4be:	f5 cf       	rjmp	.-22     	; 0x4aa <free+0x44>
 4c0:	d3 83       	std	Z+3, r29	; 0x03
 4c2:	c2 83       	std	Z+2, r28	; 0x02
 4c4:	40 81       	ld	r20, Z
 4c6:	51 81       	ldd	r21, Z+1	; 0x01
 4c8:	84 0f       	add	r24, r20
 4ca:	95 1f       	adc	r25, r21
 4cc:	c8 17       	cp	r28, r24
 4ce:	d9 07       	cpc	r29, r25
 4d0:	59 f4       	brne	.+22     	; 0x4e8 <free+0x82>
 4d2:	88 81       	ld	r24, Y
 4d4:	99 81       	ldd	r25, Y+1	; 0x01
 4d6:	84 0f       	add	r24, r20
 4d8:	95 1f       	adc	r25, r21
 4da:	02 96       	adiw	r24, 0x02	; 2
 4dc:	91 83       	std	Z+1, r25	; 0x01
 4de:	80 83       	st	Z, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	9b 81       	ldd	r25, Y+3	; 0x03
 4e4:	93 83       	std	Z+3, r25	; 0x03
 4e6:	82 83       	std	Z+2, r24	; 0x02
 4e8:	21 15       	cp	r18, r1
 4ea:	31 05       	cpc	r19, r1
 4ec:	29 f4       	brne	.+10     	; 0x4f8 <free+0x92>
 4ee:	f0 93 37 01 	sts	0x0137, r31	; 0x800137 <__flp+0x1>
 4f2:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <__flp>
 4f6:	3d c0       	rjmp	.+122    	; 0x572 <free+0x10c>
 4f8:	e9 01       	movw	r28, r18
 4fa:	fb 83       	std	Y+3, r31	; 0x03
 4fc:	ea 83       	std	Y+2, r30	; 0x02
 4fe:	49 91       	ld	r20, Y+
 500:	59 91       	ld	r21, Y+
 502:	c4 0f       	add	r28, r20
 504:	d5 1f       	adc	r29, r21
 506:	ec 17       	cp	r30, r28
 508:	fd 07       	cpc	r31, r29
 50a:	61 f4       	brne	.+24     	; 0x524 <free+0xbe>
 50c:	80 81       	ld	r24, Z
 50e:	91 81       	ldd	r25, Z+1	; 0x01
 510:	84 0f       	add	r24, r20
 512:	95 1f       	adc	r25, r21
 514:	02 96       	adiw	r24, 0x02	; 2
 516:	e9 01       	movw	r28, r18
 518:	99 83       	std	Y+1, r25	; 0x01
 51a:	88 83       	st	Y, r24
 51c:	82 81       	ldd	r24, Z+2	; 0x02
 51e:	93 81       	ldd	r25, Z+3	; 0x03
 520:	9b 83       	std	Y+3, r25	; 0x03
 522:	8a 83       	std	Y+2, r24	; 0x02
 524:	e0 e0       	ldi	r30, 0x00	; 0
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	12 96       	adiw	r26, 0x02	; 2
 52a:	8d 91       	ld	r24, X+
 52c:	9c 91       	ld	r25, X
 52e:	13 97       	sbiw	r26, 0x03	; 3
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	19 f0       	breq	.+6      	; 0x53a <free+0xd4>
 534:	fd 01       	movw	r30, r26
 536:	dc 01       	movw	r26, r24
 538:	f7 cf       	rjmp	.-18     	; 0x528 <free+0xc2>
 53a:	8d 91       	ld	r24, X+
 53c:	9c 91       	ld	r25, X
 53e:	11 97       	sbiw	r26, 0x01	; 1
 540:	9d 01       	movw	r18, r26
 542:	2e 5f       	subi	r18, 0xFE	; 254
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19
 54a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 54e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 552:	28 17       	cp	r18, r24
 554:	39 07       	cpc	r19, r25
 556:	69 f4       	brne	.+26     	; 0x572 <free+0x10c>
 558:	30 97       	sbiw	r30, 0x00	; 0
 55a:	29 f4       	brne	.+10     	; 0x566 <free+0x100>
 55c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__flp+0x1>
 560:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__flp>
 564:	02 c0       	rjmp	.+4      	; 0x56a <free+0x104>
 566:	13 82       	std	Z+3, r1	; 0x03
 568:	12 82       	std	Z+2, r1	; 0x02
 56a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <__brkval+0x1>
 56e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <__brkval>
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
