
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001418  000014ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800136  00800136  000014e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e2d  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e73  00000000  00000000  00003539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001119  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  000054c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c0  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ef  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c5       	rjmp	.+2894   	; 0xb84 <__vector_13>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	15 05       	cpc	r17, r5
      8e:	12 05       	cpc	r17, r2
      90:	0f 05       	cpc	r16, r15
      92:	0c 05       	cpc	r16, r12
      94:	09 05       	cpc	r16, r9
      96:	06 05       	cpc	r16, r6
      98:	03 05       	cpc	r16, r3
      9a:	00 05       	cpc	r16, r0

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e8 e1       	ldi	r30, 0x18	; 24
      b0:	f4 e1       	ldi	r31, 0x14	; 20
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a6 e3       	ldi	r26, 0x36	; 54
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a3 37       	cpi	r26, 0x73	; 115
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	56 d7       	rcall	.+3756   	; 0xf80 <main>
      d4:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <checkDownAndDo>:
	{{0,0},{0,-1},{0,-2},{1,0}}, //L-shape
	{{0,0},{0,-1},{0,1},{1,0}}, //triangle
	{{0,0},{0,-1},{1,0},{1,1}}
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	28 97       	sbiw	r28, 0x08	; 8
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0];
     104:	9c 91       	ld	r25, X
     106:	99 83       	std	Y+1, r25	; 0x01
		tempActive[i][1] = active->coordinates[i][1] + 1;
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	8c 91       	ld	r24, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	8a 83       	std	Y+2, r24	; 0x02
		
		if(tempActive[i][0] + active->x_coordinate > 7
     112:	18 96       	adiw	r26, 0x08	; 8
     114:	cc 90       	ld	r12, X
     116:	18 97       	sbiw	r26, 0x08	; 8
     118:	d1 2c       	mov	r13, r1
     11a:	96 01       	movw	r18, r12
     11c:	29 0f       	add	r18, r25
     11e:	31 1d       	adc	r19, r1
     120:	97 fd       	sbrc	r25, 7
     122:	3a 95       	dec	r19
     124:	28 30       	cpi	r18, 0x08	; 8
     126:	31 05       	cpc	r19, r1
     128:	08 f0       	brcs	.+2      	; 0x12c <checkDownAndDo+0x52>
     12a:	5a c0       	rjmp	.+180    	; 0x1e0 <checkDownAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     12c:	19 96       	adiw	r26, 0x09	; 9
     12e:	ac 90       	ld	r10, X
     130:	19 97       	sbiw	r26, 0x09	; 9
     132:	b1 2c       	mov	r11, r1
     134:	75 01       	movw	r14, r10
     136:	e8 0e       	add	r14, r24
     138:	f1 1c       	adc	r15, r1
     13a:	87 fd       	sbrc	r24, 7
     13c:	fa 94       	dec	r15
     13e:	80 e1       	ldi	r24, 0x10	; 16
     140:	e8 16       	cp	r14, r24
     142:	f1 04       	cpc	r15, r1
     144:	08 f0       	brcs	.+2      	; 0x148 <checkDownAndDo+0x6e>
     146:	4c c0       	rjmp	.+152    	; 0x1e0 <checkDownAndDo+0x106>
     148:	ad 01       	movw	r20, r26
     14a:	fe 01       	movw	r30, r28
     14c:	31 96       	adiw	r30, 0x01	; 1
     14e:	ce 01       	movw	r24, r28
     150:	07 96       	adiw	r24, 0x07	; 7
     152:	8f 01       	movw	r16, r30
     154:	4d 01       	movw	r8, r26
     156:	24 c0       	rjmp	.+72     	; 0x1a0 <checkDownAndDo+0xc6>
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0];
     158:	d4 01       	movw	r26, r8
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2c 91       	ld	r18, X
     15e:	d8 01       	movw	r26, r16
     160:	12 96       	adiw	r26, 0x02	; 2
     162:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1] + 1;
     164:	d4 01       	movw	r26, r8
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	fc 90       	ld	r15, X
     16a:	f3 94       	inc	r15
     16c:	d8 01       	movw	r26, r16
     16e:	13 96       	adiw	r26, 0x03	; 3
     170:	fc 92       	st	X, r15
		
		if(tempActive[i][0] + active->x_coordinate > 7
     172:	d6 01       	movw	r26, r12
     174:	a2 0f       	add	r26, r18
     176:	b1 1d       	adc	r27, r1
     178:	27 fd       	sbrc	r18, 7
     17a:	ba 95       	dec	r27
     17c:	9d 01       	movw	r18, r26
     17e:	18 97       	sbiw	r26, 0x08	; 8
     180:	78 f5       	brcc	.+94     	; 0x1e0 <checkDownAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     182:	d5 01       	movw	r26, r10
     184:	af 0d       	add	r26, r15
     186:	b1 1d       	adc	r27, r1
     188:	f7 fc       	sbrc	r15, 7
     18a:	ba 95       	dec	r27
     18c:	7d 01       	movw	r14, r26
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	8b 0e       	add	r8, r27
     192:	91 1c       	adc	r9, r1
     194:	0e 5f       	subi	r16, 0xFE	; 254
     196:	1f 4f       	sbci	r17, 0xFF	; 255
     198:	a0 e1       	ldi	r26, 0x10	; 16
     19a:	ea 16       	cp	r14, r26
     19c:	f1 04       	cpc	r15, r1
     19e:	00 f5       	brcc	.+64     	; 0x1e0 <checkDownAndDo+0x106>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     1a0:	22 95       	swap	r18
     1a2:	32 95       	swap	r19
     1a4:	30 7f       	andi	r19, 0xF0	; 240
     1a6:	32 27       	eor	r19, r18
     1a8:	20 7f       	andi	r18, 0xF0	; 240
     1aa:	32 27       	eor	r19, r18
     1ac:	26 0f       	add	r18, r22
     1ae:	37 1f       	adc	r19, r23
     1b0:	2e 0d       	add	r18, r14
     1b2:	3f 1d       	adc	r19, r15
     1b4:	d9 01       	movw	r26, r18
     1b6:	2c 91       	ld	r18, X
     1b8:	21 11       	cpse	r18, r1
     1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <checkDownAndDo+0x106>
	{{0,0},{0,-1},{1,0},{1,1}}
};//bent

void checkDownAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     1bc:	08 17       	cp	r16, r24
     1be:	19 07       	cpc	r17, r25
     1c0:	59 f6       	brne	.-106    	; 0x158 <checkDownAndDo+0x7e>
     1c2:	9e 01       	movw	r18, r28
     1c4:	27 5f       	subi	r18, 0xF7	; 247
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
			return;//fail
		}
	}
	//copy
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     1c8:	80 81       	ld	r24, Z
     1ca:	da 01       	movw	r26, r20
     1cc:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
     1d0:	11 96       	adiw	r26, 0x01	; 1
     1d2:	8c 93       	st	X, r24
     1d4:	32 96       	adiw	r30, 0x02	; 2
     1d6:	4e 5f       	subi	r20, 0xFE	; 254
     1d8:	5f 4f       	sbci	r21, 0xFF	; 255
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	//copy
	for(int i = 0; i < 4; i++){
     1da:	e2 17       	cp	r30, r18
     1dc:	f3 07       	cpc	r31, r19
     1de:	a1 f7       	brne	.-24     	; 0x1c8 <checkDownAndDo+0xee>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
}
     1e0:	28 96       	adiw	r28, 0x08	; 8
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	cd bf       	out	0x3d, r28	; 61
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	bf 90       	pop	r11
     1fe:	af 90       	pop	r10
     200:	9f 90       	pop	r9
     202:	8f 90       	pop	r8
     204:	08 95       	ret

00000206 <checkRotateAndDo>:
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
     206:	8f 92       	push	r8
     208:	9f 92       	push	r9
     20a:	af 92       	push	r10
     20c:	bf 92       	push	r11
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	28 97       	sbiw	r28, 0x08	; 8
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	dc 01       	movw	r26, r24
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = -1 * active->coordinates[i][1];
     230:	11 96       	adiw	r26, 0x01	; 1
     232:	8c 91       	ld	r24, X
     234:	11 97       	sbiw	r26, 0x01	; 1
     236:	81 95       	neg	r24
     238:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][0];
     23a:	9c 91       	ld	r25, X
     23c:	9a 83       	std	Y+2, r25	; 0x02
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7 
     23e:	18 96       	adiw	r26, 0x08	; 8
     240:	cc 90       	ld	r12, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	d1 2c       	mov	r13, r1
     246:	96 01       	movw	r18, r12
     248:	28 0f       	add	r18, r24
     24a:	31 1d       	adc	r19, r1
     24c:	87 fd       	sbrc	r24, 7
     24e:	3a 95       	dec	r19
     250:	28 30       	cpi	r18, 0x08	; 8
     252:	31 05       	cpc	r19, r1
     254:	08 f0       	brcs	.+2      	; 0x258 <checkRotateAndDo+0x52>
     256:	5a c0       	rjmp	.+180    	; 0x30c <checkRotateAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     258:	19 96       	adiw	r26, 0x09	; 9
     25a:	ac 90       	ld	r10, X
     25c:	19 97       	sbiw	r26, 0x09	; 9
     25e:	b1 2c       	mov	r11, r1
     260:	75 01       	movw	r14, r10
     262:	e9 0e       	add	r14, r25
     264:	f1 1c       	adc	r15, r1
     266:	97 fd       	sbrc	r25, 7
     268:	fa 94       	dec	r15
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	e8 16       	cp	r14, r24
     26e:	f1 04       	cpc	r15, r1
     270:	08 f0       	brcs	.+2      	; 0x274 <checkRotateAndDo+0x6e>
     272:	4c c0       	rjmp	.+152    	; 0x30c <checkRotateAndDo+0x106>
     274:	ad 01       	movw	r20, r26
     276:	fe 01       	movw	r30, r28
     278:	31 96       	adiw	r30, 0x01	; 1
     27a:	ce 01       	movw	r24, r28
     27c:	07 96       	adiw	r24, 0x07	; 7
     27e:	8f 01       	movw	r16, r30
     280:	4d 01       	movw	r8, r26
     282:	24 c0       	rjmp	.+72     	; 0x2cc <checkRotateAndDo+0xc6>
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = -1 * active->coordinates[i][1];
     284:	d4 01       	movw	r26, r8
     286:	13 96       	adiw	r26, 0x03	; 3
     288:	2c 91       	ld	r18, X
     28a:	21 95       	neg	r18
     28c:	d8 01       	movw	r26, r16
     28e:	12 96       	adiw	r26, 0x02	; 2
     290:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][0];
     292:	d4 01       	movw	r26, r8
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	fc 90       	ld	r15, X
     298:	d8 01       	movw	r26, r16
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	fc 92       	st	X, r15
		//check perimeter
		if(tempActive[i][0] + active->x_coordinate > 7 
     29e:	d6 01       	movw	r26, r12
     2a0:	a2 0f       	add	r26, r18
     2a2:	b1 1d       	adc	r27, r1
     2a4:	27 fd       	sbrc	r18, 7
     2a6:	ba 95       	dec	r27
     2a8:	9d 01       	movw	r18, r26
     2aa:	18 97       	sbiw	r26, 0x08	; 8
     2ac:	78 f5       	brcc	.+94     	; 0x30c <checkRotateAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0 
		|| tempActive[i][1] + active->y_coordinate > 15  
     2ae:	d5 01       	movw	r26, r10
     2b0:	af 0d       	add	r26, r15
     2b2:	b1 1d       	adc	r27, r1
     2b4:	f7 fc       	sbrc	r15, 7
     2b6:	ba 95       	dec	r27
     2b8:	7d 01       	movw	r14, r26
     2ba:	b2 e0       	ldi	r27, 0x02	; 2
     2bc:	8b 0e       	add	r8, r27
     2be:	91 1c       	adc	r9, r1
     2c0:	0e 5f       	subi	r16, 0xFE	; 254
     2c2:	1f 4f       	sbci	r17, 0xFF	; 255
     2c4:	a0 e1       	ldi	r26, 0x10	; 16
     2c6:	ea 16       	cp	r14, r26
     2c8:	f1 04       	cpc	r15, r1
     2ca:	00 f5       	brcc	.+64     	; 0x30c <checkRotateAndDo+0x106>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		} 
		//check gameboard
		else if(inactive->board[tempActive[i][0]+ active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     2cc:	22 95       	swap	r18
     2ce:	32 95       	swap	r19
     2d0:	30 7f       	andi	r19, 0xF0	; 240
     2d2:	32 27       	eor	r19, r18
     2d4:	20 7f       	andi	r18, 0xF0	; 240
     2d6:	32 27       	eor	r19, r18
     2d8:	26 0f       	add	r18, r22
     2da:	37 1f       	adc	r19, r23
     2dc:	2e 0d       	add	r18, r14
     2de:	3f 1d       	adc	r19, r15
     2e0:	d9 01       	movw	r26, r18
     2e2:	2c 91       	ld	r18, X
     2e4:	21 11       	cpse	r18, r1
     2e6:	12 c0       	rjmp	.+36     	; 0x30c <checkRotateAndDo+0x106>
}
//user manipulation
void checkRotateAndDo(Tetromino* active, Gameboard* inactive){
	//do temp rotate that might be illegal
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     2e8:	08 17       	cp	r16, r24
     2ea:	19 07       	cpc	r17, r25
     2ec:	59 f6       	brne	.-106    	; 0x284 <checkRotateAndDo+0x7e>
     2ee:	9e 01       	movw	r18, r28
     2f0:	27 5f       	subi	r18, 0xF7	; 247
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     2f4:	80 81       	ld	r24, Z
     2f6:	da 01       	movw	r26, r20
     2f8:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     2fa:	81 81       	ldd	r24, Z+1	; 0x01
     2fc:	11 96       	adiw	r26, 0x01	; 1
     2fe:	8c 93       	st	X, r24
     300:	32 96       	adiw	r30, 0x02	; 2
     302:	4e 5f       	subi	r20, 0xFE	; 254
     304:	5f 4f       	sbci	r21, 0xFF	; 255
			return;//fail
		}
	}
	//passed checks, go ahead and	
	//assign new rotated coordinates.
	for(int i = 0; i < 4; i++){
     306:	e2 17       	cp	r30, r18
     308:	f3 07       	cpc	r31, r19
     30a:	a1 f7       	brne	.-24     	; 0x2f4 <checkRotateAndDo+0xee>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
     30c:	28 96       	adiw	r28, 0x08	; 8
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
     330:	08 95       	ret

00000332 <checkLeftAndDo>:

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	28 97       	sbiw	r28, 0x08	; 8
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] - 1;
     35c:	8c 91       	ld	r24, X
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][1];
     362:	11 96       	adiw	r26, 0x01	; 1
     364:	9c 91       	ld	r25, X
     366:	11 97       	sbiw	r26, 0x01	; 1
     368:	9a 83       	std	Y+2, r25	; 0x02
		
		if(tempActive[i][0] + active->x_coordinate > 7
     36a:	18 96       	adiw	r26, 0x08	; 8
     36c:	cc 90       	ld	r12, X
     36e:	18 97       	sbiw	r26, 0x08	; 8
     370:	d1 2c       	mov	r13, r1
     372:	96 01       	movw	r18, r12
     374:	28 0f       	add	r18, r24
     376:	31 1d       	adc	r19, r1
     378:	87 fd       	sbrc	r24, 7
     37a:	3a 95       	dec	r19
     37c:	28 30       	cpi	r18, 0x08	; 8
     37e:	31 05       	cpc	r19, r1
     380:	08 f0       	brcs	.+2      	; 0x384 <checkLeftAndDo+0x52>
     382:	5a c0       	rjmp	.+180    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     384:	19 96       	adiw	r26, 0x09	; 9
     386:	ac 90       	ld	r10, X
     388:	19 97       	sbiw	r26, 0x09	; 9
     38a:	b1 2c       	mov	r11, r1
     38c:	75 01       	movw	r14, r10
     38e:	e9 0e       	add	r14, r25
     390:	f1 1c       	adc	r15, r1
     392:	97 fd       	sbrc	r25, 7
     394:	fa 94       	dec	r15
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	e8 16       	cp	r14, r24
     39a:	f1 04       	cpc	r15, r1
     39c:	08 f0       	brcs	.+2      	; 0x3a0 <checkLeftAndDo+0x6e>
     39e:	4c c0       	rjmp	.+152    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     3a0:	ad 01       	movw	r20, r26
     3a2:	fe 01       	movw	r30, r28
     3a4:	31 96       	adiw	r30, 0x01	; 1
     3a6:	ce 01       	movw	r24, r28
     3a8:	07 96       	adiw	r24, 0x07	; 7
     3aa:	8f 01       	movw	r16, r30
     3ac:	4d 01       	movw	r8, r26
     3ae:	24 c0       	rjmp	.+72     	; 0x3f8 <checkLeftAndDo+0xc6>
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] - 1;
     3b0:	d4 01       	movw	r26, r8
     3b2:	12 96       	adiw	r26, 0x02	; 2
     3b4:	2c 91       	ld	r18, X
     3b6:	21 50       	subi	r18, 0x01	; 1
     3b8:	d8 01       	movw	r26, r16
     3ba:	12 96       	adiw	r26, 0x02	; 2
     3bc:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1];
     3be:	d4 01       	movw	r26, r8
     3c0:	13 96       	adiw	r26, 0x03	; 3
     3c2:	fc 90       	ld	r15, X
     3c4:	d8 01       	movw	r26, r16
     3c6:	13 96       	adiw	r26, 0x03	; 3
     3c8:	fc 92       	st	X, r15
		
		if(tempActive[i][0] + active->x_coordinate > 7
     3ca:	d6 01       	movw	r26, r12
     3cc:	a2 0f       	add	r26, r18
     3ce:	b1 1d       	adc	r27, r1
     3d0:	27 fd       	sbrc	r18, 7
     3d2:	ba 95       	dec	r27
     3d4:	9d 01       	movw	r18, r26
     3d6:	18 97       	sbiw	r26, 0x08	; 8
     3d8:	78 f5       	brcc	.+94     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     3da:	d5 01       	movw	r26, r10
     3dc:	af 0d       	add	r26, r15
     3de:	b1 1d       	adc	r27, r1
     3e0:	f7 fc       	sbrc	r15, 7
     3e2:	ba 95       	dec	r27
     3e4:	7d 01       	movw	r14, r26
     3e6:	b2 e0       	ldi	r27, 0x02	; 2
     3e8:	8b 0e       	add	r8, r27
     3ea:	91 1c       	adc	r9, r1
     3ec:	0e 5f       	subi	r16, 0xFE	; 254
     3ee:	1f 4f       	sbci	r17, 0xFF	; 255
     3f0:	a0 e1       	ldi	r26, 0x10	; 16
     3f2:	ea 16       	cp	r14, r26
     3f4:	f1 04       	cpc	r15, r1
     3f6:	00 f5       	brcc	.+64     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     3f8:	22 95       	swap	r18
     3fa:	32 95       	swap	r19
     3fc:	30 7f       	andi	r19, 0xF0	; 240
     3fe:	32 27       	eor	r19, r18
     400:	20 7f       	andi	r18, 0xF0	; 240
     402:	32 27       	eor	r19, r18
     404:	26 0f       	add	r18, r22
     406:	37 1f       	adc	r19, r23
     408:	2e 0d       	add	r18, r14
     40a:	3f 1d       	adc	r19, r15
     40c:	d9 01       	movw	r26, r18
     40e:	2c 91       	ld	r18, X
     410:	21 11       	cpse	r18, r1
     412:	12 c0       	rjmp	.+36     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	
}

void checkLeftAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     414:	08 17       	cp	r16, r24
     416:	19 07       	cpc	r17, r25
     418:	59 f6       	brne	.-106    	; 0x3b0 <checkLeftAndDo+0x7e>
     41a:	9e 01       	movw	r18, r28
     41c:	27 5f       	subi	r18, 0xF7	; 247
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     420:	80 81       	ld	r24, Z
     422:	da 01       	movw	r26, r20
     424:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     426:	81 81       	ldd	r24, Z+1	; 0x01
     428:	11 96       	adiw	r26, 0x01	; 1
     42a:	8c 93       	st	X, r24
     42c:	32 96       	adiw	r30, 0x02	; 2
     42e:	4e 5f       	subi	r20, 0xFE	; 254
     430:	5f 4f       	sbci	r21, 0xFF	; 255
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
     432:	e2 17       	cp	r30, r18
     434:	f3 07       	cpc	r31, r19
     436:	a1 f7       	brne	.-24     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}	
}
     438:	28 96       	adiw	r28, 0x08	; 8
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	af 90       	pop	r10
     458:	9f 90       	pop	r9
     45a:	8f 90       	pop	r8
     45c:	08 95       	ret

0000045e <checkRightAndDo>:
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	28 97       	sbiw	r28, 0x08	; 8
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
     488:	8c 91       	ld	r24, X
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][1];
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	9c 91       	ld	r25, X
     492:	11 97       	sbiw	r26, 0x01	; 1
     494:	9a 83       	std	Y+2, r25	; 0x02
			
		if(tempActive[i][0] + active->x_coordinate > 7
     496:	18 96       	adiw	r26, 0x08	; 8
     498:	cc 90       	ld	r12, X
     49a:	18 97       	sbiw	r26, 0x08	; 8
     49c:	d1 2c       	mov	r13, r1
     49e:	96 01       	movw	r18, r12
     4a0:	28 0f       	add	r18, r24
     4a2:	31 1d       	adc	r19, r1
     4a4:	87 fd       	sbrc	r24, 7
     4a6:	3a 95       	dec	r19
     4a8:	28 30       	cpi	r18, 0x08	; 8
     4aa:	31 05       	cpc	r19, r1
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <checkRightAndDo+0x52>
     4ae:	5a c0       	rjmp	.+180    	; 0x564 <checkRightAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     4b0:	19 96       	adiw	r26, 0x09	; 9
     4b2:	ac 90       	ld	r10, X
     4b4:	19 97       	sbiw	r26, 0x09	; 9
     4b6:	b1 2c       	mov	r11, r1
     4b8:	75 01       	movw	r14, r10
     4ba:	e9 0e       	add	r14, r25
     4bc:	f1 1c       	adc	r15, r1
     4be:	97 fd       	sbrc	r25, 7
     4c0:	fa 94       	dec	r15
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	e8 16       	cp	r14, r24
     4c6:	f1 04       	cpc	r15, r1
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <checkRightAndDo+0x6e>
     4ca:	4c c0       	rjmp	.+152    	; 0x564 <checkRightAndDo+0x106>
     4cc:	ad 01       	movw	r20, r26
     4ce:	fe 01       	movw	r30, r28
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	ce 01       	movw	r24, r28
     4d4:	07 96       	adiw	r24, 0x07	; 7
     4d6:	8f 01       	movw	r16, r30
     4d8:	4d 01       	movw	r8, r26
     4da:	24 c0       	rjmp	.+72     	; 0x524 <checkRightAndDo+0xc6>
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
     4dc:	d4 01       	movw	r26, r8
     4de:	12 96       	adiw	r26, 0x02	; 2
     4e0:	2c 91       	ld	r18, X
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	d8 01       	movw	r26, r16
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1];
     4ea:	d4 01       	movw	r26, r8
     4ec:	13 96       	adiw	r26, 0x03	; 3
     4ee:	fc 90       	ld	r15, X
     4f0:	d8 01       	movw	r26, r16
     4f2:	13 96       	adiw	r26, 0x03	; 3
     4f4:	fc 92       	st	X, r15
			
		if(tempActive[i][0] + active->x_coordinate > 7
     4f6:	d6 01       	movw	r26, r12
     4f8:	a2 0f       	add	r26, r18
     4fa:	b1 1d       	adc	r27, r1
     4fc:	27 fd       	sbrc	r18, 7
     4fe:	ba 95       	dec	r27
     500:	9d 01       	movw	r18, r26
     502:	18 97       	sbiw	r26, 0x08	; 8
     504:	78 f5       	brcc	.+94     	; 0x564 <checkRightAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
     506:	d5 01       	movw	r26, r10
     508:	af 0d       	add	r26, r15
     50a:	b1 1d       	adc	r27, r1
     50c:	f7 fc       	sbrc	r15, 7
     50e:	ba 95       	dec	r27
     510:	7d 01       	movw	r14, r26
     512:	b2 e0       	ldi	r27, 0x02	; 2
     514:	8b 0e       	add	r8, r27
     516:	91 1c       	adc	r9, r1
     518:	0e 5f       	subi	r16, 0xFE	; 254
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	a0 e1       	ldi	r26, 0x10	; 16
     51e:	ea 16       	cp	r14, r26
     520:	f1 04       	cpc	r15, r1
     522:	00 f5       	brcc	.+64     	; 0x564 <checkRightAndDo+0x106>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
     524:	22 95       	swap	r18
     526:	32 95       	swap	r19
     528:	30 7f       	andi	r19, 0xF0	; 240
     52a:	32 27       	eor	r19, r18
     52c:	20 7f       	andi	r18, 0xF0	; 240
     52e:	32 27       	eor	r19, r18
     530:	26 0f       	add	r18, r22
     532:	37 1f       	adc	r19, r23
     534:	2e 0d       	add	r18, r14
     536:	3f 1d       	adc	r19, r15
     538:	d9 01       	movw	r26, r18
     53a:	2c 91       	ld	r18, X
     53c:	21 11       	cpse	r18, r1
     53e:	12 c0       	rjmp	.+36     	; 0x564 <checkRightAndDo+0x106>
	}	
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
     540:	08 17       	cp	r16, r24
     542:	19 07       	cpc	r17, r25
     544:	59 f6       	brne	.-106    	; 0x4dc <checkRightAndDo+0x7e>
     546:	9e 01       	movw	r18, r28
     548:	27 5f       	subi	r18, 0xF7	; 247
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
     54c:	80 81       	ld	r24, Z
     54e:	da 01       	movw	r26, r20
     550:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	11 96       	adiw	r26, 0x01	; 1
     556:	8c 93       	st	X, r24
     558:	32 96       	adiw	r30, 0x02	; 2
     55a:	4e 5f       	subi	r20, 0xFE	; 254
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
     55e:	e2 17       	cp	r30, r18
     560:	f3 07       	cpc	r31, r19
     562:	a1 f7       	brne	.-24     	; 0x54c <checkRightAndDo+0xee>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
     564:	28 96       	adiw	r28, 0x08	; 8
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	bf 90       	pop	r11
     582:	af 90       	pop	r10
     584:	9f 90       	pop	r9
     586:	8f 90       	pop	r8
     588:	08 95       	ret

0000058a <checkLoss>:

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	21 11       	cpse	r18, r1
     590:	0d c0       	rjmp	.+26     	; 0x5ac <checkLoss+0x22>
     592:	9c 01       	movw	r18, r24
     594:	20 59       	subi	r18, 0x90	; 144
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	90 89       	ldd	r25, Z+16	; 0x10
     59a:	91 11       	cpse	r25, r1
     59c:	0a c0       	rjmp	.+20     	; 0x5b2 <checkLoss+0x28>
     59e:	70 96       	adiw	r30, 0x10	; 16
	}
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
     5a0:	e2 17       	cp	r30, r18
     5a2:	f3 07       	cpc	r31, r19
     5a4:	c9 f7       	brne	.-14     	; 0x598 <checkLoss+0xe>
		if(inactive->board[i][0]){return 1;}
	}
	return 0;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	08 95       	ret
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	08 95       	ret
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
	
}
     5b6:	08 95       	ret

000005b8 <convertPieceToInactive>:

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	dc 01       	movw	r26, r24
     5c0:	08 96       	adiw	r24, 0x08	; 8
	for(int i = 0; i < 4; i ++){
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	2c 91       	ld	r18, X
     5c6:	e8 85       	ldd	r30, Y+8	; 0x08
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	e2 0f       	add	r30, r18
     5cc:	f1 1d       	adc	r31, r1
     5ce:	27 fd       	sbrc	r18, 7
     5d0:	fa 95       	dec	r31
     5d2:	11 96       	adiw	r26, 0x01	; 1
     5d4:	3c 91       	ld	r19, X
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	29 85       	ldd	r18, Y+9	; 0x09
     5da:	e2 95       	swap	r30
     5dc:	f2 95       	swap	r31
     5de:	f0 7f       	andi	r31, 0xF0	; 240
     5e0:	fe 27       	eor	r31, r30
     5e2:	e0 7f       	andi	r30, 0xF0	; 240
     5e4:	fe 27       	eor	r31, r30
     5e6:	e6 0f       	add	r30, r22
     5e8:	f7 1f       	adc	r31, r23
     5ea:	e3 0f       	add	r30, r19
     5ec:	f1 1d       	adc	r31, r1
     5ee:	37 fd       	sbrc	r19, 7
     5f0:	fa 95       	dec	r31
     5f2:	e2 0f       	add	r30, r18
     5f4:	f1 1d       	adc	r31, r1
     5f6:	40 83       	st	Z, r20
     5f8:	12 96       	adiw	r26, 0x02	; 2
	
}

//once touched
void convertPieceToInactive(Tetromino* active, Gameboard* inactive){
	for(int i = 0; i < 4; i ++){
     5fa:	a8 17       	cp	r26, r24
     5fc:	b9 07       	cpc	r27, r25
     5fe:	11 f7       	brne	.-60     	; 0x5c4 <convertPieceToInactive+0xc>
		inactive->board[active->coordinates[i][0]+ active->x_coordinate][active->coordinates[i][1]+ active->y_coordinate] = 1;
	}
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <deletedAFilledRowAndSlidDown>:

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	dc 01       	movw	r26, r24
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     60c:	6f e0       	ldi	r22, 0x0F	; 15
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	eb 01       	movw	r28, r22
     616:	fd 01       	movw	r30, r26
     618:	e6 0f       	add	r30, r22
     61a:	f7 1f       	adc	r31, r23
     61c:	9b 01       	movw	r18, r22
     61e:	20 58       	subi	r18, 0x80	; 128
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	2a 0f       	add	r18, r26
     624:	3b 1f       	adc	r19, r27
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     626:	48 2f       	mov	r20, r24
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     628:	90 81       	ld	r25, Z
     62a:	91 11       	cpse	r25, r1
     62c:	01 c0       	rjmp	.+2      	; 0x630 <deletedAFilledRowAndSlidDown+0x2a>
     62e:	45 2f       	mov	r20, r21
     630:	70 96       	adiw	r30, 0x10	; 16

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
     632:	e2 17       	cp	r30, r18
     634:	f3 07       	cpc	r31, r19
     636:	c1 f7       	brne	.-16     	; 0x628 <deletedAFilledRowAndSlidDown+0x22>
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
     638:	44 23       	and	r20, r20
     63a:	21 f1       	breq	.+72     	; 0x684 <deletedAFilledRowAndSlidDown+0x7e>
				for(int k = i; k > 0; k--){
     63c:	16 16       	cp	r1, r22
     63e:	17 06       	cpc	r1, r23
     640:	3c f5       	brge	.+78     	; 0x690 <deletedAFilledRowAndSlidDown+0x8a>
     642:	ae 01       	movw	r20, r28
     644:	41 50       	subi	r20, 0x01	; 1
     646:	51 09       	sbc	r21, r1
     648:	4a 0f       	add	r20, r26
     64a:	5b 1f       	adc	r21, r27
     64c:	bd 01       	movw	r22, r26
     64e:	61 50       	subi	r22, 0x01	; 1
     650:	71 09       	sbc	r23, r1
     652:	0b c0       	rjmp	.+22     	; 0x66a <deletedAFilledRowAndSlidDown+0x64>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
     654:	90 81       	ld	r25, Z
     656:	91 83       	std	Z+1, r25	; 0x01
     658:	70 96       	adiw	r30, 0x10	; 16
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
     65a:	e2 17       	cp	r30, r18
     65c:	f3 07       	cpc	r31, r19
     65e:	d1 f7       	brne	.-12     	; 0x654 <deletedAFilledRowAndSlidDown+0x4e>
     660:	41 50       	subi	r20, 0x01	; 1
     662:	51 09       	sbc	r21, r1
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
			}
			if(rowDeleteFlag){
				for(int k = i; k > 0; k--){
     664:	46 17       	cp	r20, r22
     666:	57 07       	cpc	r21, r23
     668:	99 f0       	breq	.+38     	; 0x690 <deletedAFilledRowAndSlidDown+0x8a>
     66a:	9a 01       	movw	r18, r20
     66c:	20 58       	subi	r18, 0x80	; 128
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
			rowDeleteFlag = 1;
			for(int j = 0; j < 8; j++){
				if(!(inactive->board[j][i])){rowDeleteFlag = 0;}
     670:	fa 01       	movw	r30, r20
     672:	f0 cf       	rjmp	.-32     	; 0x654 <deletedAFilledRowAndSlidDown+0x4e>
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
					inactive->board[k][0] = 0;	
     674:	10 82       	st	Z, r1
     676:	70 96       	adiw	r30, 0x10	; 16
				for(int k = i; k > 0; k--){
					for(int m = 0; m < 8; m++){
						inactive->board[m][k]=inactive->board[m][k-1];
					}
				}
				for(int k = 0; k < 8; k++){
     678:	ae 17       	cp	r26, r30
     67a:	bf 07       	cpc	r27, r31
     67c:	d9 f7       	brne	.-10     	; 0x674 <deletedAFilledRowAndSlidDown+0x6e>
					inactive->board[k][0] = 0;	
				}
				return 1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0a c0       	rjmp	.+20     	; 0x698 <deletedAFilledRowAndSlidDown+0x92>
	}
}

int deletedAFilledRowAndSlidDown(Gameboard* inactive){
	unsigned char rowDeleteFlag;
	for (int i = 15; i>= 0; i--){
     684:	61 50       	subi	r22, 0x01	; 1
     686:	71 09       	sbc	r23, r1
     688:	28 f6       	brcc	.-118    	; 0x614 <deletedAFilledRowAndSlidDown+0xe>
					inactive->board[k][0] = 0;	
				}
				return 1;
			}
	}
	return 0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	04 c0       	rjmp	.+8      	; 0x698 <deletedAFilledRowAndSlidDown+0x92>
     690:	fd 01       	movw	r30, r26
     692:	a0 58       	subi	r26, 0x80	; 128
     694:	bf 4f       	sbci	r27, 0xFF	; 255
     696:	ee cf       	rjmp	.-36     	; 0x674 <deletedAFilledRowAndSlidDown+0x6e>
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <combinePieceAndBoardIntoImage>:

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	fc 01       	movw	r30, r24
     6b0:	ec 01       	movw	r28, r24
     6b2:	c0 58       	subi	r28, 0x80	; 128
     6b4:	df 4f       	sbci	r29, 0xFF	; 255
     6b6:	dc 01       	movw	r26, r24
     6b8:	08 c0       	rjmp	.+16     	; 0x6ca <combinePieceAndBoardIntoImage+0x2c>
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
     6ba:	1d 92       	st	X+, r1
//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     6bc:	a2 17       	cp	r26, r18
     6be:	b3 07       	cpc	r27, r19
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <combinePieceAndBoardIntoImage+0x1c>
     6c2:	d9 01       	movw	r26, r18

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
	//clear frame
	for(int i = 0; i < 8; i++){
     6c4:	c2 17       	cp	r28, r18
     6c6:	d3 07       	cpc	r29, r19
     6c8:	21 f0       	breq	.+8      	; 0x6d2 <combinePieceAndBoardIntoImage+0x34>
     6ca:	9d 01       	movw	r18, r26
     6cc:	20 5f       	subi	r18, 0xF0	; 240
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	f4 cf       	rjmp	.-24     	; 0x6ba <combinePieceAndBoardIntoImage+0x1c>
     6d2:	8b 01       	movw	r16, r22
     6d4:	7b 01       	movw	r14, r22
     6d6:	28 e0       	ldi	r18, 0x08	; 8
     6d8:	e2 0e       	add	r14, r18
     6da:	f1 1c       	adc	r15, r1
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
     6dc:	d8 01       	movw	r26, r16
     6de:	dc 90       	ld	r13, X
     6e0:	db 01       	movw	r26, r22
     6e2:	18 96       	adiw	r26, 0x08	; 8
     6e4:	2c 91       	ld	r18, X
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	2d 0d       	add	r18, r13
     6ea:	31 1d       	adc	r19, r1
     6ec:	d7 fc       	sbrc	r13, 7
     6ee:	3a 95       	dec	r19
     6f0:	d8 01       	movw	r26, r16
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	dc 90       	ld	r13, X
     6f6:	db 01       	movw	r26, r22
     6f8:	19 96       	adiw	r26, 0x09	; 9
     6fa:	cc 90       	ld	r12, X
     6fc:	ac 2d       	mov	r26, r12
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	ad 0d       	add	r26, r13
     702:	b1 1d       	adc	r27, r1
     704:	d7 fc       	sbrc	r13, 7
     706:	ba 95       	dec	r27
     708:	22 95       	swap	r18
     70a:	32 95       	swap	r19
     70c:	30 7f       	andi	r19, 0xF0	; 240
     70e:	32 27       	eor	r19, r18
     710:	20 7f       	andi	r18, 0xF0	; 240
     712:	32 27       	eor	r19, r18
     714:	28 0f       	add	r18, r24
     716:	39 1f       	adc	r19, r25
     718:	a2 0f       	add	r26, r18
     71a:	b3 1f       	adc	r27, r19
     71c:	2c 91       	ld	r18, X
     71e:	24 60       	ori	r18, 0x04	; 4
     720:	2c 93       	st	X, r18
     722:	0e 5f       	subi	r16, 0xFE	; 254
     724:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int j = 0; j < 16; j++){
			next_frame_ptr->frame[i][j] = 0;
		}	
	}
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
     726:	0e 15       	cp	r16, r14
     728:	1f 05       	cpc	r17, r15
     72a:	c1 f6       	brne	.-80     	; 0x6dc <combinePieceAndBoardIntoImage+0x3e>
     72c:	64 2f       	mov	r22, r20
     72e:	75 2f       	mov	r23, r21
     730:	10 c0       	rjmp	.+32     	; 0x752 <combinePieceAndBoardIntoImage+0xb4>
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
     732:	8d 91       	ld	r24, X+
     734:	88 23       	and	r24, r24
     736:	19 f0       	breq	.+6      	; 0x73e <combinePieceAndBoardIntoImage+0xa0>
     738:	80 81       	ld	r24, Z
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	80 83       	st	Z, r24
     73e:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
     740:	e2 17       	cp	r30, r18
     742:	f3 07       	cpc	r31, r19
     744:	b1 f7       	brne	.-20     	; 0x732 <combinePieceAndBoardIntoImage+0x94>
     746:	60 5f       	subi	r22, 0xF0	; 240
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	f9 01       	movw	r30, r18
	//put 4 active tetromino squares in using GREEN
	for (int i = 0; i <4; i++){
		next_frame_ptr->frame[piece->coordinates[i][0] + piece->x_coordinate][piece->coordinates[i][1] + piece->y_coordinate] |= (1 << RGB_GREEN_BIT);		
	}
	//put all 8*16 inactive values in using BLUE
	for (int i = 0; i < 8; i++){
     74c:	2c 17       	cp	r18, r28
     74e:	3d 07       	cpc	r19, r29
     750:	29 f0       	breq	.+10     	; 0x75c <combinePieceAndBoardIntoImage+0xbe>
     752:	9f 01       	movw	r18, r30
     754:	20 5f       	subi	r18, 0xF0	; 240
     756:	3f 4f       	sbci	r19, 0xFF	; 255
	return 0;
}

//for display
void combinePieceAndBoardIntoImage(	RGB_8x16_Frame* next_frame_ptr,
									Tetromino* piece, Gameboard* board){
     758:	db 01       	movw	r26, r22
     75a:	eb cf       	rjmp	.-42     	; 0x732 <combinePieceAndBoardIntoImage+0x94>
	for (int i = 0; i < 8; i++){
		for(int j = 0; j < 16; j++){
			if(board->board[i][j]){next_frame_ptr->frame[i][j] |= (1 << RGB_BLUE_BIT);}
		}
	}
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <createTetromino>:


Tetromino* createTetromino(unsigned char type){
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	18 2f       	mov	r17, r24
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
     776:	8a e0       	ldi	r24, 0x0A	; 10
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	88 d4       	rcall	.+2320   	; 0x108c <malloc>
     77c:	ec 01       	movw	r28, r24
     77e:	a1 2f       	mov	r26, r17
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	aa 0f       	add	r26, r26
     784:	bb 1f       	adc	r27, r27
     786:	aa 0f       	add	r26, r26
     788:	bb 1f       	adc	r27, r27
     78a:	aa 0f       	add	r26, r26
     78c:	bb 1f       	adc	r27, r27
     78e:	a2 5f       	subi	r26, 0xF2	; 242
     790:	be 4f       	sbci	r27, 0xFE	; 254
     792:	fc 01       	movw	r30, r24
     794:	9c 01       	movw	r18, r24
     796:	28 5f       	subi	r18, 0xF8	; 248
     798:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i =0; i< 4;i++ ){
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
     79a:	9c 91       	ld	r25, X
     79c:	90 83       	st	Z, r25
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	9c 91       	ld	r25, X
     7a2:	11 97       	sbiw	r26, 0x01	; 1
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	32 96       	adiw	r30, 0x02	; 2
}


Tetromino* createTetromino(unsigned char type){
	Tetromino* tet = (Tetromino*)malloc(sizeof(Tetromino));
	for(int i =0; i< 4;i++ ){
     7aa:	e2 17       	cp	r30, r18
     7ac:	f3 07       	cpc	r31, r19
     7ae:	a9 f7       	brne	.-22     	; 0x79a <createTetromino+0x2c>
		for(int j =0; j< 2;j++ ){
			tet->coordinates[i][j] = pieceShapes[type][i][j];
		}
	}
	switch(type){
     7b0:	12 30       	cpi	r17, 0x02	; 2
     7b2:	a1 f0       	breq	.+40     	; 0x7dc <createTetromino+0x6e>
     7b4:	28 f4       	brcc	.+10     	; 0x7c0 <createTetromino+0x52>
     7b6:	11 23       	and	r17, r17
     7b8:	41 f0       	breq	.+16     	; 0x7ca <createTetromino+0x5c>
     7ba:	11 30       	cpi	r17, 0x01	; 1
     7bc:	51 f0       	breq	.+20     	; 0x7d2 <createTetromino+0x64>
     7be:	1d c0       	rjmp	.+58     	; 0x7fa <createTetromino+0x8c>
     7c0:	13 30       	cpi	r17, 0x03	; 3
     7c2:	89 f0       	breq	.+34     	; 0x7e6 <createTetromino+0x78>
     7c4:	14 30       	cpi	r17, 0x04	; 4
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <createTetromino+0x82>
     7c8:	18 c0       	rjmp	.+48     	; 0x7fa <createTetromino+0x8c>
		case 0:
			tet->x_coordinate = 3;
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 0;
     7ce:	19 86       	std	Y+9, r1	; 0x09
			break;
     7d0:	18 c0       	rjmp	.+48     	; 0x802 <createTetromino+0x94>
		
		case 1:
			tet->x_coordinate = 3;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	88 87       	std	Y+8, r24	; 0x08
			tet->y_coordinate = 2;
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	89 87       	std	Y+9, r24	; 0x09
		break;
     7da:	13 c0       	rjmp	.+38     	; 0x802 <createTetromino+0x94>
		
		case 2:
		tet->x_coordinate = 3;
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 2;
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	89 87       	std	Y+9, r24	; 0x09
		break;
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <createTetromino+0x94>
		
		case 3:
		tet->x_coordinate = 3;
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	89 87       	std	Y+9, r24	; 0x09
		break;
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <createTetromino+0x94>
		
		case 4:
		tet->x_coordinate = 3;
     7f0:	83 e0       	ldi	r24, 0x03	; 3
     7f2:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	89 87       	std	Y+9, r24	; 0x09
		break;
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <createTetromino+0x94>
		
		default:
		tet->x_coordinate = 2;
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	88 87       	std	Y+8, r24	; 0x08
		tet->y_coordinate = 3;
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	89 87       	std	Y+9, r24	; 0x09
		break;
		
		
	}
	return tet;
}
     802:	ce 01       	movw	r24, r28
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	08 95       	ret

0000080c <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
     80c:	18 16       	cp	r1, r24
     80e:	19 06       	cpc	r1, r25
     810:	5c f0       	brlt	.+22     	; 0x828 <delay_ms+0x1c>
     812:	08 95       	ret
     814:	00 00       	nop
     816:	21 50       	subi	r18, 0x01	; 1
     818:	31 09       	sbc	r19, r1
     81a:	e1 f7       	brne	.-8      	; 0x814 <delay_ms+0x8>
     81c:	4f 5f       	subi	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	84 17       	cp	r24, r20
     822:	95 07       	cpc	r25, r21
     824:	19 f4       	brne	.+6      	; 0x82c <delay_ms+0x20>
     826:	08 95       	ret
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	27 e0       	ldi	r18, 0x07	; 7
     82e:	33 e0       	ldi	r19, 0x03	; 3
     830:	f1 cf       	rjmp	.-30     	; 0x814 <delay_ms+0x8>

00000832 <LCD_WriteCommand>:
     832:	5e 98       	cbi	0x0b, 6	; 11
     834:	88 b9       	out	0x08, r24	; 8
     836:	5f 9a       	sbi	0x0b, 7	; 11
     838:	00 00       	nop
     83a:	5f 98       	cbi	0x0b, 7	; 11
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	e5 cf       	rjmp	.-54     	; 0x80c <delay_ms>
     842:	08 95       	ret

00000844 <LCD_init>:
     844:	84 e6       	ldi	r24, 0x64	; 100
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	e1 df       	rcall	.-62     	; 0x80c <delay_ms>
     84a:	88 e3       	ldi	r24, 0x38	; 56
     84c:	f2 df       	rcall	.-28     	; 0x832 <LCD_WriteCommand>
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	f0 df       	rcall	.-32     	; 0x832 <LCD_WriteCommand>
     852:	8f e0       	ldi	r24, 0x0F	; 15
     854:	ee df       	rcall	.-36     	; 0x832 <LCD_WriteCommand>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	ec df       	rcall	.-40     	; 0x832 <LCD_WriteCommand>
     85a:	8a e0       	ldi	r24, 0x0A	; 10
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	d6 cf       	rjmp	.-84     	; 0x80c <delay_ms>
     860:	08 95       	ret

00000862 <ADC_init>:
     862:	ea e7       	ldi	r30, 0x7A	; 122
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	80 6c       	ori	r24, 0xC0	; 192
     86a:	80 83       	st	Z, r24
     86c:	08 95       	ret

0000086e <ADC_channel>:
     86e:	88 30       	cpi	r24, 0x08	; 8
     870:	48 f4       	brcc	.+18     	; 0x884 <ADC_channel+0x16>
     872:	ec e7       	ldi	r30, 0x7C	; 124
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	90 81       	ld	r25, Z
     878:	98 7f       	andi	r25, 0xF8	; 248
     87a:	90 83       	st	Z, r25
     87c:	90 81       	ld	r25, Z
     87e:	87 70       	andi	r24, 0x07	; 7
     880:	89 2b       	or	r24, r25
     882:	80 83       	st	Z, r24
     884:	08 95       	ret

00000886 <ADC_read>:
     886:	f3 df       	rcall	.-26     	; 0x86e <ADC_channel>
     888:	ea e7       	ldi	r30, 0x7A	; 122
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 64       	ori	r24, 0x40	; 64
     890:	80 83       	st	Z, r24
     892:	80 81       	ld	r24, Z
     894:	86 fd       	sbrc	r24, 6
     896:	fd cf       	rjmp	.-6      	; 0x892 <ADC_read+0xc>
     898:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     89c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8a0:	08 95       	ret

000008a2 <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
     8a2:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     8a4:	af e0       	ldi	r26, 0x0F	; 15
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
     8a8:	fc 01       	movw	r30, r24
     8aa:	0a 2e       	mov	r0, r26
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <writetoAll16BitShiftRegisters+0x10>
     8ae:	f6 95       	lsr	r31
     8b0:	e7 95       	ror	r30
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <writetoAll16BitShiftRegisters+0xc>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
     8b6:	fe 2f       	mov	r31, r30
     8b8:	f1 70       	andi	r31, 0x01	; 1
     8ba:	e0 ff       	sbrs	r30, 0
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <writetoAll16BitShiftRegisters+0x24>
     8be:	e5 b1       	in	r30, 0x05	; 5
     8c0:	ef 2b       	or	r30, r31
     8c2:	e5 b9       	out	0x05, r30	; 5
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <writetoAll16BitShiftRegisters+0x26>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
     8c6:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
     8c8:	fb 01       	movw	r30, r22
     8ca:	0a 2e       	mov	r0, r26
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <writetoAll16BitShiftRegisters+0x30>
     8ce:	f6 95       	lsr	r31
     8d0:	e7 95       	ror	r30
     8d2:	0a 94       	dec	r0
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <writetoAll16BitShiftRegisters+0x2c>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
     8d6:	fe 2f       	mov	r31, r30
     8d8:	f1 70       	andi	r31, 0x01	; 1
     8da:	e0 ff       	sbrs	r30, 0
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <writetoAll16BitShiftRegisters+0x46>
     8de:	e5 b1       	in	r30, 0x05	; 5
     8e0:	ff 0f       	add	r31, r31
     8e2:	fe 2b       	or	r31, r30
     8e4:	f5 b9       	out	0x05, r31	; 5
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <writetoAll16BitShiftRegisters+0x48>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
     8e8:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
     8ea:	fa 01       	movw	r30, r20
     8ec:	0a 2e       	mov	r0, r26
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <writetoAll16BitShiftRegisters+0x52>
     8f0:	f6 95       	lsr	r31
     8f2:	e7 95       	ror	r30
     8f4:	0a 94       	dec	r0
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <writetoAll16BitShiftRegisters+0x4e>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
     8f8:	fe 2f       	mov	r31, r30
     8fa:	f1 70       	andi	r31, 0x01	; 1
     8fc:	e0 ff       	sbrs	r30, 0
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <writetoAll16BitShiftRegisters+0x6a>
     900:	e5 b1       	in	r30, 0x05	; 5
     902:	ff 0f       	add	r31, r31
     904:	ff 0f       	add	r31, r31
     906:	fe 2b       	or	r31, r30
     908:	f5 b9       	out	0x05, r31	; 5
     90a:	01 c0       	rjmp	.+2      	; 0x90e <writetoAll16BitShiftRegisters+0x6c>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
     90c:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
     90e:	f9 01       	movw	r30, r18
     910:	0a 2e       	mov	r0, r26
     912:	02 c0       	rjmp	.+4      	; 0x918 <writetoAll16BitShiftRegisters+0x76>
     914:	f6 95       	lsr	r31
     916:	e7 95       	ror	r30
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <writetoAll16BitShiftRegisters+0x72>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
     91c:	fe 2f       	mov	r31, r30
     91e:	f1 70       	andi	r31, 0x01	; 1
     920:	e0 ff       	sbrs	r30, 0
     922:	07 c0       	rjmp	.+14     	; 0x932 <writetoAll16BitShiftRegisters+0x90>
     924:	e5 b1       	in	r30, 0x05	; 5
     926:	ff 0f       	add	r31, r31
     928:	ff 0f       	add	r31, r31
     92a:	ff 0f       	add	r31, r31
     92c:	fe 2b       	or	r31, r30
     92e:	f5 b9       	out	0x05, r31	; 5
     930:	01 c0       	rjmp	.+2      	; 0x934 <writetoAll16BitShiftRegisters+0x92>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
     932:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     934:	ea e0       	ldi	r30, 0x0A	; 10
     936:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
     938:	00 00       	nop
     93a:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
     93c:	e9 f7       	brne	.-6      	; 0x938 <writetoAll16BitShiftRegisters+0x96>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
     93e:	2f 9a       	sbi	0x05, 7	; 5
     940:	ea e0       	ldi	r30, 0x0A	; 10
     942:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     944:	00 00       	nop
     946:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     948:	e9 f7       	brne	.-6      	; 0x944 <writetoAll16BitShiftRegisters+0xa2>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
     94a:	2f 98       	cbi	0x05, 7	; 5
     94c:	ea e0       	ldi	r30, 0x0A	; 10
     94e:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
     950:	00 00       	nop
     952:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
     954:	e9 f7       	brne	.-6      	; 0x950 <writetoAll16BitShiftRegisters+0xae>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	08 f0       	brcs	.+2      	; 0x95c <writetoAll16BitShiftRegisters+0xba>
     95a:	a6 cf       	rjmp	.-180    	; 0x8a8 <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
     95c:	2d 9a       	sbi	0x05, 5	; 5
     95e:	08 95       	ret

00000960 <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
     960:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	84 36       	cpi	r24, 0x64	; 100
     968:	91 05       	cpc	r25, r1
     96a:	18 f4       	brcc	.+6      	; 0x972 <Joystick_Process_Raw+0x12>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	85 83       	std	Z+5, r24	; 0x05
     970:	07 c0       	rjmp	.+14     	; 0x980 <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
     972:	89 3e       	cpi	r24, 0xE9	; 233
     974:	93 40       	sbci	r25, 0x03	; 3
     976:	18 f0       	brcs	.+6      	; 0x97e <Joystick_Process_Raw+0x1e>
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	85 83       	std	Z+5, r24	; 0x05
     97c:	01 c0       	rjmp	.+2      	; 0x980 <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
     97e:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
     980:	82 81       	ldd	r24, Z+2	; 0x02
     982:	93 81       	ldd	r25, Z+3	; 0x03
     984:	84 36       	cpi	r24, 0x64	; 100
     986:	91 05       	cpc	r25, r1
     988:	18 f4       	brcc	.+6      	; 0x990 <Joystick_Process_Raw+0x30>
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	86 83       	std	Z+6, r24	; 0x06
     98e:	0a c0       	rjmp	.+20     	; 0x9a4 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
     990:	89 3e       	cpi	r24, 0xE9	; 233
     992:	93 40       	sbci	r25, 0x03	; 3
     994:	18 f0       	brcs	.+6      	; 0x99c <Joystick_Process_Raw+0x3c>
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	86 83       	std	Z+6, r24	; 0x06
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
     99c:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
     99e:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
     9a0:	16 82       	std	Z+6, r1	; 0x06
     9a2:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
     9a4:	85 81       	ldd	r24, Z+5	; 0x05
     9a6:	81 11       	cpse	r24, r1
     9a8:	fb cf       	rjmp	.-10     	; 0x9a0 <Joystick_Process_Raw+0x40>
     9aa:	08 95       	ret

000009ac <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	68 df       	rcall	.-304    	; 0x886 <ADC_read>
     9b6:	99 83       	std	Y+1, r25	; 0x01
     9b8:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	64 df       	rcall	.-312    	; 0x886 <ADC_read>
     9be:	9b 83       	std	Y+3, r25	; 0x03
     9c0:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
     9c2:	80 b1       	in	r24, 0x00	; 0
     9c4:	83 fb       	bst	r24, 3
     9c6:	99 27       	eor	r25, r25
     9c8:	90 f9       	bld	r25, 0
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	89 27       	eor	r24, r25
     9ce:	8c 83       	std	Y+4, r24	; 0x04
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
     9f2:	87 70       	andi	r24, 0x07	; 7
	switch(column){
     9f4:	48 2f       	mov	r20, r24
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	fa 01       	movw	r30, r20
     9fa:	ea 5b       	subi	r30, 0xBA	; 186
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	1a c3       	rjmp	.+1588   	; 0x1034 <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	50 e8       	ldi	r21, 0x80	; 128
     a04:	14 c0       	rjmp	.+40     	; 0xa2e <pulseColumn+0x58>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
     a06:	4f ef       	ldi	r20, 0xFF	; 255
     a08:	50 e4       	ldi	r21, 0x40	; 64
			break;
     a0a:	11 c0       	rjmp	.+34     	; 0xa2e <pulseColumn+0x58>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
     a0c:	4f ef       	ldi	r20, 0xFF	; 255
     a0e:	50 e2       	ldi	r21, 0x20	; 32
			break;
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <pulseColumn+0x58>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
     a12:	4f ef       	ldi	r20, 0xFF	; 255
     a14:	50 e1       	ldi	r21, 0x10	; 16
			break;
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <pulseColumn+0x58>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
     a18:	4f ef       	ldi	r20, 0xFF	; 255
     a1a:	58 e0       	ldi	r21, 0x08	; 8
			break;
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <pulseColumn+0x58>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
     a1e:	4f ef       	ldi	r20, 0xFF	; 255
     a20:	54 e0       	ldi	r21, 0x04	; 4
			break;
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <pulseColumn+0x58>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
     a24:	4f ef       	ldi	r20, 0xFF	; 255
     a26:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <pulseColumn+0x58>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
     a2a:	4f ef       	ldi	r20, 0xFF	; 255
     a2c:	51 e0       	ldi	r21, 0x01	; 1
     a2e:	0f 2e       	mov	r0, r31
     a30:	ff e0       	ldi	r31, 0x0F	; 15
     a32:	8f 2e       	mov	r8, r31
     a34:	91 2c       	mov	r9, r1
     a36:	f0 2d       	mov	r31, r0
     a38:	8c 0e       	add	r8, r28
     a3a:	9d 1e       	adc	r9, r29
     a3c:	10 e1       	ldi	r17, 0x10	; 16
     a3e:	81 9f       	mul	r24, r17
     a40:	80 0c       	add	r8, r0
     a42:	91 1c       	adc	r9, r1
     a44:	11 24       	eor	r1, r1
     a46:	9a 01       	movw	r18, r20
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
     a4c:	6f ef       	ldi	r22, 0xFF	; 255
     a4e:	7f ef       	ldi	r23, 0xFF	; 255
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	9f ef       	ldi	r25, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     a54:	cc 24       	eor	r12, r12
     a56:	c3 94       	inc	r12
     a58:	d1 2c       	mov	r13, r1
     a5a:	5f 01       	movw	r10, r30
     a5c:	a8 e0       	ldi	r26, 0x08	; 8
     a5e:	aa 0e       	add	r10, r26
     a60:	b1 1c       	adc	r11, r1
     a62:	84 01       	movw	r16, r8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
     a64:	d4 01       	movw	r26, r8
     a66:	18 96       	adiw	r26, 0x08	; 8
     a68:	fc 90       	ld	r15, X
     a6a:	f0 fe       	sbrs	r15, 0
     a6c:	0c c0       	rjmp	.+24     	; 0xa86 <pulseColumn+0xb0>
     a6e:	76 01       	movw	r14, r12
     a70:	0e 2e       	mov	r0, r30
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <pulseColumn+0xa2>
     a74:	ee 0c       	add	r14, r14
     a76:	ff 1c       	adc	r15, r15
     a78:	0a 94       	dec	r0
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <pulseColumn+0x9e>
     a7c:	e0 94       	com	r14
     a7e:	f0 94       	com	r15
     a80:	6e 21       	and	r22, r14
     a82:	7f 21       	and	r23, r15
     a84:	1b c0       	rjmp	.+54     	; 0xabc <pulseColumn+0xe6>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
     a86:	f2 fe       	sbrs	r15, 2
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <pulseColumn+0xcc>
     a8a:	76 01       	movw	r14, r12
     a8c:	0e 2e       	mov	r0, r30
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <pulseColumn+0xbe>
     a90:	ee 0c       	add	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <pulseColumn+0xba>
     a98:	e0 94       	com	r14
     a9a:	f0 94       	com	r15
     a9c:	2e 21       	and	r18, r14
     a9e:	3f 21       	and	r19, r15
     aa0:	0d c0       	rjmp	.+26     	; 0xabc <pulseColumn+0xe6>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
     aa2:	f1 fe       	sbrs	r15, 1
     aa4:	0b c0       	rjmp	.+22     	; 0xabc <pulseColumn+0xe6>
     aa6:	76 01       	movw	r14, r12
     aa8:	0a 2c       	mov	r0, r10
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <pulseColumn+0xda>
     aac:	ee 0c       	add	r14, r14
     aae:	ff 1c       	adc	r15, r15
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <pulseColumn+0xd6>
     ab4:	e0 94       	com	r14
     ab6:	f0 94       	com	r15
     ab8:	6e 21       	and	r22, r14
     aba:	7f 21       	and	r23, r15
		
		//matrix 1			
		if(frame.frame[column][i] & (1 << RGB_RED_BIT)){register1 &= ~(1 << i);}
     abc:	d8 01       	movw	r26, r16
     abe:	1c 91       	ld	r17, X
     ac0:	bf ef       	ldi	r27, 0xFF	; 255
     ac2:	8b 1a       	sub	r8, r27
     ac4:	9b 0a       	sbc	r9, r27
     ac6:	10 ff       	sbrs	r17, 0
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <pulseColumn+0x10c>
     aca:	86 01       	movw	r16, r12
     acc:	0e 2e       	mov	r0, r30
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <pulseColumn+0xfe>
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	0a 94       	dec	r0
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <pulseColumn+0xfa>
     ad8:	00 95       	com	r16
     ada:	10 95       	com	r17
     adc:	80 23       	and	r24, r16
     ade:	91 23       	and	r25, r17
     ae0:	1a c0       	rjmp	.+52     	; 0xb16 <pulseColumn+0x140>
		
		else if(frame.frame[column][i] & (1 << RGB_GREEN_BIT)){register3 &= ~(1 << i); }
     ae2:	12 ff       	sbrs	r17, 2
     ae4:	0c c0       	rjmp	.+24     	; 0xafe <pulseColumn+0x128>
     ae6:	86 01       	movw	r16, r12
     ae8:	0e 2e       	mov	r0, r30
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <pulseColumn+0x11a>
     aec:	00 0f       	add	r16, r16
     aee:	11 1f       	adc	r17, r17
     af0:	0a 94       	dec	r0
     af2:	e2 f7       	brpl	.-8      	; 0xaec <pulseColumn+0x116>
     af4:	00 95       	com	r16
     af6:	10 95       	com	r17
     af8:	40 23       	and	r20, r16
     afa:	51 23       	and	r21, r17
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <pulseColumn+0x140>

		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
     afe:	11 ff       	sbrs	r17, 1
     b00:	0a c0       	rjmp	.+20     	; 0xb16 <pulseColumn+0x140>
     b02:	86 01       	movw	r16, r12
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <pulseColumn+0x134>
     b06:	00 0f       	add	r16, r16
     b08:	11 1f       	adc	r17, r17
     b0a:	aa 94       	dec	r10
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <pulseColumn+0x130>
     b0e:	00 95       	com	r16
     b10:	10 95       	com	r17
     b12:	80 23       	and	r24, r16
     b14:	91 23       	and	r25, r17
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	e8 30       	cpi	r30, 0x08	; 8
     b1a:	f1 05       	cpc	r31, r1
     b1c:	09 f0       	breq	.+2      	; 0xb20 <pulseColumn+0x14a>
		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
     b1e:	9d cf       	rjmp	.-198    	; 0xa5a <pulseColumn+0x84>
     b20:	c0 de       	rcall	.-640    	; 0x8a2 <writetoAll16BitShiftRegisters>
		
	
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	08 95       	ret

00000b3c <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     b3c:	8b e0       	ldi	r24, 0x0B	; 11
     b3e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b42:	8d e7       	ldi	r24, 0x7D	; 125
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b4a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     b54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b5c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     b60:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     b64:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     b68:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     b6c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     b70:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     b74:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     b78:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
     b7c:	8f b7       	in	r24, 0x3f	; 63
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8f bf       	out	0x3f, r24	; 63
     b82:	08 95       	ret

00000b84 <__vector_13>:
}

//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
	_avr_timer_cntcurr--;
     b96:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
     b9a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
     b9e:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
     ba2:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	a1 09       	sbc	r26, r1
     baa:	b1 09       	sbc	r27, r1
     bac:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     bb0:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     bb4:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     bb8:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
     bbc:	89 2b       	or	r24, r25
     bbe:	8a 2b       	or	r24, r26
     bc0:	8b 2b       	or	r24, r27
     bc2:	99 f4       	brne	.+38     	; 0xbea <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
     bca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     bce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     bd2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     bd6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     bda:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
     bde:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
     be2:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
     be6:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
	}
}
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
     bfc:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_M>
     c00:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_M+0x1>
     c04:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_M+0x2>
     c08:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     c0c:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <_avr_timer_cntcurr>
     c10:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <_avr_timer_cntcurr+0x1>
     c14:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_avr_timer_cntcurr+0x2>
     c18:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_avr_timer_cntcurr+0x3>
     c1c:	08 95       	ret

00000c1e <Joystick_Tick>:
}

              
void Joystick_Tick(){
	static int count = 0;
	if (count == 100){
     c1e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <count.1909>
     c22:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <count.1909+0x1>
     c26:	84 36       	cpi	r24, 0x64	; 100
     c28:	91 05       	cpc	r25, r1
     c2a:	f9 f4       	brne	.+62     	; 0xc6a <Joystick_Tick+0x4c>
		Joystick_Read(nextJoystickFramePtr);
     c2c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c30:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     c34:	bb de       	rcall	.-650    	; 0x9ac <Joystick_Read>
		Joystick_Process_Raw(nextJoystickFramePtr);
     c36:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c3a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     c3e:	90 de       	rcall	.-736    	; 0x960 <Joystick_Process_Raw>
		//COPY POINTER BEFORE SWAPPING
		Joystick_Frame* temp = currentJoystickFramePtr;
     c40:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <currentJoystickFramePtr>
     c44:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
		//SWAP BUFFER
		currentJoystickFramePtr = nextJoystickFramePtr;
     c48:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <nextJoystickFramePtr>
     c4c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <nextJoystickFramePtr+0x1>
     c50:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <currentJoystickFramePtr+0x1>
     c54:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <currentJoystickFramePtr>
		nextJoystickFramePtr = temp;
     c58:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
     c5c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
		count = 0;
     c60:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <count.1909+0x1>
     c64:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <count.1909>
     c68:	08 95       	ret
	}
	else{count++; return;}
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <count.1909+0x1>
     c70:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <count.1909>
     c74:	08 95       	ret

00000c76 <LED_Tick>:
	//READ + POPULATE always into the next frame before swapping buffer
}
			                                                                                        
void LED_Tick(){
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	c0 58       	subi	r28, 0x80	; 128
     c80:	d1 09       	sbc	r29, r1
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
	static int count = 0;
	//update frame every 8 ms
	if(count == 20){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
     c8c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1913>
     c90:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1913+0x1>
     c94:	44 97       	sbiw	r24, 0x14	; 20
     c96:	29 f5       	brne	.+74     	; 0xce2 <LED_Tick+0x6c>
     c98:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <current_RGB_FramePtr>
     c9c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     ca0:	80 e8       	ldi	r24, 0x80	; 128
     ca2:	f9 01       	movw	r30, r18
     ca4:	de 01       	movw	r26, r28
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	01 90       	ld	r0, Z+
     caa:	0d 92       	st	X+, r0
     cac:	8a 95       	dec	r24
     cae:	e1 f7       	brne	.-8      	; 0xca8 <LED_Tick+0x32>
		*current_RGB_FramePtr = *next_RGB_FramePtr;
     cb0:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <next_RGB_FramePtr>
     cb4:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     cb8:	80 e8       	ldi	r24, 0x80	; 128
     cba:	d9 01       	movw	r26, r18
     cbc:	01 90       	ld	r0, Z+
     cbe:	0d 92       	st	X+, r0
     cc0:	8a 95       	dec	r24
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <LED_Tick+0x46>
		*next_RGB_FramePtr = tmpFrame;
     cc4:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <next_RGB_FramePtr>
     cc8:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	fe 01       	movw	r30, r28
     cd0:	31 96       	adiw	r30, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	0d 92       	st	X+, r0
     cd6:	8a 95       	dec	r24
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <LED_Tick+0x5c>
		count = 0;
     cda:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <count.1913+0x1>
     cde:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count.1913>
	}
	pulseColumn(count++, *current_RGB_FramePtr);
     ce2:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <current_RGB_FramePtr>
     ce6:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <current_RGB_FramePtr+0x1>
     cea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <count.1913>
     cee:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count.1913+0x1>
     cf2:	9c 01       	movw	r18, r24
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <count.1913+0x1>
     cfc:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <count.1913>
     d00:	2d b7       	in	r18, 0x3d	; 61
     d02:	3e b7       	in	r19, 0x3e	; 62
     d04:	20 58       	subi	r18, 0x80	; 128
     d06:	31 09       	sbc	r19, r1
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	3e bf       	out	0x3e, r19	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	2d bf       	out	0x3d, r18	; 61
     d12:	ad b7       	in	r26, 0x3d	; 61
     d14:	be b7       	in	r27, 0x3e	; 62
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	90 e8       	ldi	r25, 0x80	; 128
     d1a:	01 90       	ld	r0, Z+
     d1c:	0d 92       	st	X+, r0
     d1e:	9a 95       	dec	r25
     d20:	e1 f7       	brne	.-8      	; 0xd1a <LED_Tick+0xa4>
     d22:	59 de       	rcall	.-846    	; 0x9d6 <pulseColumn>
	
}
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	c0 58       	subi	r28, 0x80	; 128
     d30:	df 4f       	sbci	r29, 0xFF	; 255
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <Gamestate_Tick>:

	
void Gamestate_Tick(){
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
	static int count = 0;
	count++;
     d52:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     d56:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
     d60:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	if(count == 1000){
     d64:	88 3e       	cpi	r24, 0xE8	; 232
     d66:	23 e0       	ldi	r18, 0x03	; 3
     d68:	92 07       	cpc	r25, r18
     d6a:	91 f4       	brne	.+36     	; 0xd90 <Gamestate_Tick+0x4e>
		checkDownAndDo(activeTile,board);//move down 1 square every second;
     d6c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     d70:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     d74:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     d78:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     d7c:	ae d9       	rcall	.-3236   	; 0xda <checkDownAndDo>
		count = 0;//reset count
     d7e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
     d82:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	}
	if(!lostYet){
     d86:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <lostYet>
     d8a:	88 23       	and	r24, r24
     d8c:	b9 f0       	breq	.+46     	; 0xdbc <Gamestate_Tick+0x7a>
     d8e:	ef c0       	rjmp	.+478    	; 0xf6e <Gamestate_Tick+0x22c>
     d90:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <lostYet>
     d94:	21 11       	cpse	r18, r1
     d96:	eb c0       	rjmp	.+470    	; 0xf6e <Gamestate_Tick+0x22c>
		if(count == 200 
     d98:	88 3c       	cpi	r24, 0xC8	; 200
     d9a:	91 05       	cpc	r25, r1
     d9c:	79 f0       	breq	.+30     	; 0xdbc <Gamestate_Tick+0x7a>
		|| count == 400 
     d9e:	80 39       	cpi	r24, 0x90	; 144
     da0:	a1 e0       	ldi	r26, 0x01	; 1
     da2:	9a 07       	cpc	r25, r26
     da4:	59 f0       	breq	.+22     	; 0xdbc <Gamestate_Tick+0x7a>
		|| count == 600 
     da6:	88 35       	cpi	r24, 0x58	; 88
     da8:	b2 e0       	ldi	r27, 0x02	; 2
     daa:	9b 07       	cpc	r25, r27
     dac:	39 f0       	breq	.+14     	; 0xdbc <Gamestate_Tick+0x7a>
		|| count == 800 
     dae:	80 32       	cpi	r24, 0x20	; 32
     db0:	e3 e0       	ldi	r30, 0x03	; 3
     db2:	9e 07       	cpc	r25, r30
     db4:	19 f0       	breq	.+6      	; 0xdbc <Gamestate_Tick+0x7a>
		|| count == 0){
     db6:	89 2b       	or	r24, r25
     db8:	09 f0       	breq	.+2      	; 0xdbc <Gamestate_Tick+0x7a>
     dba:	d9 c0       	rjmp	.+434    	; 0xf6e <Gamestate_Tick+0x22c>
			 //switch based on joystick 
			 //up
				if(currentJoystickFramePtr->Y_direction == UP){
     dbc:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <currentJoystickFramePtr>
     dc0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <currentJoystickFramePtr+0x1>
     dc4:	86 81       	ldd	r24, Z+6	; 0x06
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	e1 f4       	brne	.+56     	; 0xe02 <Gamestate_Tick+0xc0>
					checkRotateAndDo(activeTile,board);
     dca:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     dce:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     dd2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     dd6:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     dda:	15 da       	rcall	.-3030   	; 0x206 <checkRotateAndDo>
					checkRotateAndDo(activeTile,board);
     ddc:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     de0:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     de4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     de8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     dec:	0c da       	rcall	.-3048   	; 0x206 <checkRotateAndDo>
					checkRotateAndDo(activeTile,board);
     dee:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     df2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     df6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     dfa:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     dfe:	03 da       	rcall	.-3066   	; 0x206 <checkRotateAndDo>
     e00:	24 c0       	rjmp	.+72     	; 0xe4a <Gamestate_Tick+0x108>
				}
			//down
				else if(currentJoystickFramePtr->Y_direction == DOWN){
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	51 f4       	brne	.+20     	; 0xe1a <Gamestate_Tick+0xd8>
					checkRotateAndDo(activeTile,board);
     e06:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e0a:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e0e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e12:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e16:	f7 d9       	rcall	.-3090   	; 0x206 <checkRotateAndDo>
     e18:	18 c0       	rjmp	.+48     	; 0xe4a <Gamestate_Tick+0x108>
				}
	// 		//right
 				else if(currentJoystickFramePtr->X_direction== RIGHT){checkRightAndDo(activeTile,board);}	
     e1a:	85 81       	ldd	r24, Z+5	; 0x05
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	51 f4       	brne	.+20     	; 0xe34 <Gamestate_Tick+0xf2>
     e20:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e24:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e28:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e2c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     e30:	16 db       	rcall	.-2516   	; 0x45e <checkRightAndDo>
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <Gamestate_Tick+0x108>
	// 		//left
 				else if(currentJoystickFramePtr->X_direction== LEFT){checkLeftAndDo(activeTile,board);} 
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	49 f4       	brne	.+18     	; 0xe4a <Gamestate_Tick+0x108>
     e38:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e3c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e40:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     e44:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
     e48:	74 da       	rcall	.-2840   	; 0x332 <checkLeftAndDo>
     e4a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
     e4e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     e52:	9b db       	rcall	.-2250   	; 0x58a <checkLoss>
     e54:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <lostYet>
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     e58:	c0 91 69 01 	lds	r28, 0x0169	; 0x800169 <activeTile>
     e5c:	d0 91 6a 01 	lds	r29, 0x016A	; 0x80016a <activeTile+0x1>
     e60:	a9 85       	ldd	r26, Y+9	; 0x09
     e62:	ca 2e       	mov	r12, r26
     e64:	d1 2c       	mov	r13, r1
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	a6 01       	movw	r20, r12
     e6a:	48 0f       	add	r20, r24
     e6c:	51 1d       	adc	r21, r1
     e6e:	87 fd       	sbrc	r24, 7
     e70:	5a 95       	dec	r21
					if(y_coord == 15){convertPieceToInactive(activeTile, board);free(activeTile);
     e72:	4f 30       	cpi	r20, 0x0F	; 15
     e74:	51 05       	cpc	r21, r1
     e76:	41 f1       	breq	.+80     	; 0xec8 <Gamestate_Tick+0x186>
						activeTile = createTetromino(rand()%5); break;}
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
     e78:	88 85       	ldd	r24, Y+8	; 0x08
     e7a:	90 e0       	ldi	r25, 0x00	; 0
					if(board->board[x_coord][y_coord + 1]){convertPieceToInactive(activeTile, board); free(activeTile);
     e7c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     e80:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     e84:	28 81       	ld	r18, Y
     e86:	7c 01       	movw	r14, r24
     e88:	e2 0e       	add	r14, r18
     e8a:	f1 1c       	adc	r15, r1
     e8c:	27 fd       	sbrc	r18, 7
     e8e:	fa 94       	dec	r15
     e90:	97 01       	movw	r18, r14
     e92:	22 95       	swap	r18
     e94:	32 95       	swap	r19
     e96:	30 7f       	andi	r19, 0xF0	; 240
     e98:	32 27       	eor	r19, r18
     e9a:	20 7f       	andi	r18, 0xF0	; 240
     e9c:	32 27       	eor	r19, r18
     e9e:	26 0f       	add	r18, r22
     ea0:	37 1f       	adc	r19, r23
     ea2:	f9 01       	movw	r30, r18
     ea4:	e4 0f       	add	r30, r20
     ea6:	f5 1f       	adc	r31, r21
     ea8:	21 81       	ldd	r18, Z+1	; 0x01
     eaa:	21 11       	cpse	r18, r1
     eac:	38 c0       	rjmp	.+112    	; 0xf1e <Gamestate_Tick+0x1dc>
     eae:	fe 01       	movw	r30, r28
     eb0:	8e 01       	movw	r16, r28
     eb2:	0a 5f       	subi	r16, 0xFA	; 250
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
					int y_coord = activeTile->coordinates[i][1] + activeTile->y_coordinate;
     eb6:	23 81       	ldd	r18, Z+3	; 0x03
     eb8:	a6 01       	movw	r20, r12
     eba:	42 0f       	add	r20, r18
     ebc:	51 1d       	adc	r21, r1
     ebe:	27 fd       	sbrc	r18, 7
     ec0:	5a 95       	dec	r21
					if(y_coord == 15){convertPieceToInactive(activeTile, board);free(activeTile);
     ec2:	4f 30       	cpi	r20, 0x0F	; 15
     ec4:	51 05       	cpc	r21, r1
     ec6:	a9 f4       	brne	.+42     	; 0xef2 <Gamestate_Tick+0x1b0>
     ec8:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <board>
     ecc:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <board+0x1>
     ed0:	ce 01       	movw	r24, r28
     ed2:	72 db       	rcall	.-2332   	; 0x5b8 <convertPieceToInactive>
     ed4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
						activeTile = createTetromino(rand()%5); break;}
     ed8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
     edc:	6f d1       	rcall	.+734    	; 0x11bc <free>
     ede:	3e d2       	rcall	.+1148   	; 0x135c <rand>
     ee0:	65 e0       	ldi	r22, 0x05	; 5
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	94 d0       	rcall	.+296    	; 0x100e <__divmodhi4>
     ee6:	43 dc       	rcall	.-1914   	; 0x76e <createTetromino>
     ee8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     eec:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     ef0:	2c c0       	rjmp	.+88     	; 0xf4a <Gamestate_Tick+0x208>
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
					if(board->board[x_coord][y_coord + 1]){convertPieceToInactive(activeTile, board); free(activeTile);
     ef2:	22 81       	ldd	r18, Z+2	; 0x02
     ef4:	dc 01       	movw	r26, r24
     ef6:	a2 0f       	add	r26, r18
     ef8:	b1 1d       	adc	r27, r1
     efa:	27 fd       	sbrc	r18, 7
     efc:	ba 95       	dec	r27
     efe:	9d 01       	movw	r18, r26
     f00:	22 95       	swap	r18
     f02:	32 95       	swap	r19
     f04:	30 7f       	andi	r19, 0xF0	; 240
     f06:	32 27       	eor	r19, r18
     f08:	20 7f       	andi	r18, 0xF0	; 240
     f0a:	32 27       	eor	r19, r18
     f0c:	26 0f       	add	r18, r22
     f0e:	37 1f       	adc	r19, r23
     f10:	24 0f       	add	r18, r20
     f12:	35 1f       	adc	r19, r21
     f14:	d9 01       	movw	r26, r18
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	2c 91       	ld	r18, X
     f1a:	22 23       	and	r18, r18
     f1c:	89 f0       	breq	.+34     	; 0xf40 <Gamestate_Tick+0x1fe>
     f1e:	ce 01       	movw	r24, r28
     f20:	4b db       	rcall	.-2410   	; 0x5b8 <convertPieceToInactive>
     f22:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <activeTile>
     f26:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <activeTile+0x1>
						activeTile = createTetromino(rand()%5); break;}
     f2a:	48 d1       	rcall	.+656    	; 0x11bc <free>
     f2c:	17 d2       	rcall	.+1070   	; 0x135c <rand>
     f2e:	65 e0       	ldi	r22, 0x05	; 5
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	6d d0       	rcall	.+218    	; 0x100e <__divmodhi4>
     f34:	1c dc       	rcall	.-1992   	; 0x76e <createTetromino>
     f36:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     f3a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <Gamestate_Tick+0x208>
     f40:	32 96       	adiw	r30, 0x02	; 2
     f42:	e0 17       	cp	r30, r16
				//moves done
		
				//check that new board isn't an outright loss
				lostYet = checkLoss(board);
				//check to see if the active shape should be made inactive and a new one summoned;
				for(int i = 0; i < 4; i++){
     f44:	f1 07       	cpc	r31, r17
     f46:	09 f0       	breq	.+2      	; 0xf4a <Gamestate_Tick+0x208>
     f48:	b6 cf       	rjmp	.-148    	; 0xeb6 <Gamestate_Tick+0x174>
					int x_coord = activeTile->coordinates[i][0] + activeTile->x_coordinate;
					if(board->board[x_coord][y_coord + 1]){convertPieceToInactive(activeTile, board); free(activeTile);
						activeTile = createTetromino(rand()%5); break;}
				}
				//check for a row to be deleted	
				deletedAFilledRowAndSlidDown(board);
     f4a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board>
     f4e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x1>
     f52:	59 db       	rcall	.-2382   	; 0x606 <deletedAFilledRowAndSlidDown>
     f54:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <board>
				combinePieceAndBoardIntoImage(next_RGB_FramePtr,
     f58:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <board+0x1>
     f5c:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <activeTile>
     f60:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <activeTile+0x1>
     f64:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <next_RGB_FramePtr>
     f68:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <next_RGB_FramePtr+0x1>
     f6c:	98 db       	rcall	.-2256   	; 0x69e <combinePieceAndBoardIntoImage>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
		 }else{ return;}
	}else{//lost
		
	
	}
}
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	08 95       	ret

00000f80 <main>:
     f80:	11 b8       	out	0x01, r1	; 1
     f82:	8f ef       	ldi	r24, 0xFF	; 255


int main(void)
{
	DDRA = 0x00;
	PORTA = 0xFF;
     f84:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
     f86:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     f88:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
     f8a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     f8c:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
     f8e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
     f90:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
     f92:	67 dc       	rcall	.-1842   	; 0x862 <ADC_init>
	LCD_init();
     f94:	57 dc       	rcall	.-1874   	; 0x844 <LCD_init>
     f96:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	78 d0       	rcall	.+240    	; 0x108c <malloc>
     f9c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <currentJoystickFramePtr+0x1>
     fa0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <currentJoystickFramePtr>
     fa4:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	71 d0       	rcall	.+226    	; 0x108c <malloc>
     faa:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <nextJoystickFramePtr+0x1>
     fae:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <nextJoystickFramePtr>
     fb2:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	6a d0       	rcall	.+212    	; 0x108c <malloc>
     fb8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <current_RGB_FramePtr+0x1>
     fbc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <current_RGB_FramePtr>
     fc0:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	63 d0       	rcall	.+198    	; 0x108c <malloc>
     fc6:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <next_RGB_FramePtr+0x1>
     fca:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <next_RGB_FramePtr>
     fce:	80 e8       	ldi	r24, 0x80	; 128
	
	board = (Gameboard*) malloc(sizeof(Gameboard));
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	5c d0       	rcall	.+184    	; 0x108c <malloc>
     fd4:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <board+0x1>
     fd8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <board>
	activeTile = createTetromino(rand()%5);
     fdc:	bf d1       	rcall	.+894    	; 0x135c <rand>
     fde:	65 e0       	ldi	r22, 0x05	; 5
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	15 d0       	rcall	.+42     	; 0x100e <__divmodhi4>
     fe4:	c4 db       	rcall	.-2168   	; 0x76e <createTetromino>
     fe6:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <activeTile+0x1>
     fea:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <activeTile>
// 			}
// 		}
// 	}
	
	//timing
	TimerSet(1);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 de       	rcall	.-1020   	; 0xbfc <TimerSet>
	TimerOn();
     ff8:	a1 dd       	rcall	.-1214   	; 0xb3c <TimerOn>
     ffa:	11 de       	rcall	.-990    	; 0xc1e <Joystick_Tick>
    while (1){
		Joystick_Tick();
     ffc:	a2 de       	rcall	.-700    	; 0xd42 <Gamestate_Tick>
     ffe:	3b de       	rcall	.-906    	; 0xc76 <LED_Tick>
		Gamestate_Tick(); //TODO
    1000:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TimerFlag>
		//SoundEffect_Tick();
		LED_Tick();
    1004:	88 23       	and	r24, r24
    1006:	e1 f3       	breq	.-8      	; 0x1000 <main+0x80>
		while(!TimerFlag);
    1008:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <TimerFlag>
    100c:	f6 cf       	rjmp	.-20     	; 0xffa <main+0x7a>

0000100e <__divmodhi4>:
    100e:	97 fb       	bst	r25, 7
		TimerFlag = 0;
    1010:	07 2e       	mov	r0, r23
    1012:	16 f4       	brtc	.+4      	; 0x1018 <__divmodhi4+0xa>
    }
    1014:	00 94       	com	r0
    1016:	06 d0       	rcall	.+12     	; 0x1024 <__divmodhi4_neg1>
    1018:	77 fd       	sbrc	r23, 7
    101a:	08 d0       	rcall	.+16     	; 0x102c <__divmodhi4_neg2>
    101c:	23 d0       	rcall	.+70     	; 0x1064 <__udivmodhi4>
    101e:	07 fc       	sbrc	r0, 7
    1020:	05 d0       	rcall	.+10     	; 0x102c <__divmodhi4_neg2>
    1022:	3e f4       	brtc	.+14     	; 0x1032 <__divmodhi4_exit>

00001024 <__divmodhi4_neg1>:
    1024:	90 95       	com	r25
    1026:	81 95       	neg	r24
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	08 95       	ret

0000102c <__divmodhi4_neg2>:
    102c:	70 95       	com	r23
    102e:	61 95       	neg	r22
    1030:	7f 4f       	sbci	r23, 0xFF	; 255

00001032 <__divmodhi4_exit>:
    1032:	08 95       	ret

00001034 <__tablejump2__>:
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	00 24       	eor	r0, r0
    103a:	00 1c       	adc	r0, r0
    103c:	0b be       	out	0x3b, r0	; 59
    103e:	07 90       	elpm	r0, Z+
    1040:	f6 91       	elpm	r31, Z
    1042:	e0 2d       	mov	r30, r0
    1044:	09 94       	ijmp

00001046 <__umulhisi3>:
    1046:	a2 9f       	mul	r26, r18
    1048:	b0 01       	movw	r22, r0
    104a:	b3 9f       	mul	r27, r19
    104c:	c0 01       	movw	r24, r0
    104e:	a3 9f       	mul	r26, r19
    1050:	70 0d       	add	r23, r0
    1052:	81 1d       	adc	r24, r1
    1054:	11 24       	eor	r1, r1
    1056:	91 1d       	adc	r25, r1
    1058:	b2 9f       	mul	r27, r18
    105a:	70 0d       	add	r23, r0
    105c:	81 1d       	adc	r24, r1
    105e:	11 24       	eor	r1, r1
    1060:	91 1d       	adc	r25, r1
    1062:	08 95       	ret

00001064 <__udivmodhi4>:
    1064:	aa 1b       	sub	r26, r26
    1066:	bb 1b       	sub	r27, r27
    1068:	51 e1       	ldi	r21, 0x11	; 17
    106a:	07 c0       	rjmp	.+14     	; 0x107a <__udivmodhi4_ep>

0000106c <__udivmodhi4_loop>:
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	a6 17       	cp	r26, r22
    1072:	b7 07       	cpc	r27, r23
    1074:	10 f0       	brcs	.+4      	; 0x107a <__udivmodhi4_ep>
    1076:	a6 1b       	sub	r26, r22
    1078:	b7 0b       	sbc	r27, r23

0000107a <__udivmodhi4_ep>:
    107a:	88 1f       	adc	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	5a 95       	dec	r21
    1080:	a9 f7       	brne	.-22     	; 0x106c <__udivmodhi4_loop>
    1082:	80 95       	com	r24
    1084:	90 95       	com	r25
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	08 95       	ret

0000108c <malloc>:
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	91 05       	cpc	r25, r1
    1098:	10 f4       	brcc	.+4      	; 0x109e <malloc+0x12>
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__flp>
    10a2:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__flp+0x1>
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	19 f1       	breq	.+70     	; 0x10f8 <malloc+0x6c>
    10b2:	40 81       	ld	r20, Z
    10b4:	51 81       	ldd	r21, Z+1	; 0x01
    10b6:	02 81       	ldd	r16, Z+2	; 0x02
    10b8:	13 81       	ldd	r17, Z+3	; 0x03
    10ba:	48 17       	cp	r20, r24
    10bc:	59 07       	cpc	r21, r25
    10be:	c8 f0       	brcs	.+50     	; 0x10f2 <malloc+0x66>
    10c0:	84 17       	cp	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	69 f4       	brne	.+26     	; 0x10e0 <malloc+0x54>
    10c6:	10 97       	sbiw	r26, 0x00	; 0
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <malloc+0x4a>
    10ca:	12 96       	adiw	r26, 0x02	; 2
    10cc:	0c 93       	st	X, r16
    10ce:	12 97       	sbiw	r26, 0x02	; 2
    10d0:	13 96       	adiw	r26, 0x03	; 3
    10d2:	1c 93       	st	X, r17
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <malloc+0x98>
    10d6:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <__flp>
    10da:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <__flp+0x1>
    10de:	22 c0       	rjmp	.+68     	; 0x1124 <malloc+0x98>
    10e0:	21 15       	cp	r18, r1
    10e2:	31 05       	cpc	r19, r1
    10e4:	19 f0       	breq	.+6      	; 0x10ec <malloc+0x60>
    10e6:	42 17       	cp	r20, r18
    10e8:	53 07       	cpc	r21, r19
    10ea:	18 f4       	brcc	.+6      	; 0x10f2 <malloc+0x66>
    10ec:	9a 01       	movw	r18, r20
    10ee:	bd 01       	movw	r22, r26
    10f0:	ef 01       	movw	r28, r30
    10f2:	df 01       	movw	r26, r30
    10f4:	f8 01       	movw	r30, r16
    10f6:	db cf       	rjmp	.-74     	; 0x10ae <malloc+0x22>
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	f9 f0       	breq	.+62     	; 0x113c <malloc+0xb0>
    10fe:	28 1b       	sub	r18, r24
    1100:	39 0b       	sbc	r19, r25
    1102:	24 30       	cpi	r18, 0x04	; 4
    1104:	31 05       	cpc	r19, r1
    1106:	80 f4       	brcc	.+32     	; 0x1128 <malloc+0x9c>
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	61 15       	cp	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	21 f0       	breq	.+8      	; 0x111a <malloc+0x8e>
    1112:	fb 01       	movw	r30, r22
    1114:	93 83       	std	Z+3, r25	; 0x03
    1116:	82 83       	std	Z+2, r24	; 0x02
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <malloc+0x96>
    111a:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__flp+0x1>
    111e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__flp>
    1122:	fe 01       	movw	r30, r28
    1124:	32 96       	adiw	r30, 0x02	; 2
    1126:	44 c0       	rjmp	.+136    	; 0x11b0 <malloc+0x124>
    1128:	fe 01       	movw	r30, r28
    112a:	e2 0f       	add	r30, r18
    112c:	f3 1f       	adc	r31, r19
    112e:	81 93       	st	Z+, r24
    1130:	91 93       	st	Z+, r25
    1132:	22 50       	subi	r18, 0x02	; 2
    1134:	31 09       	sbc	r19, r1
    1136:	39 83       	std	Y+1, r19	; 0x01
    1138:	28 83       	st	Y, r18
    113a:	3a c0       	rjmp	.+116    	; 0x11b0 <malloc+0x124>
    113c:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    1140:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    1144:	23 2b       	or	r18, r19
    1146:	41 f4       	brne	.+16     	; 0x1158 <malloc+0xcc>
    1148:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    114c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1150:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <__brkval+0x1>
    1154:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <__brkval>
    1158:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    115c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	41 f4       	brne	.+16     	; 0x1176 <malloc+0xea>
    1166:	2d b7       	in	r18, 0x3d	; 61
    1168:	3e b7       	in	r19, 0x3e	; 62
    116a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    116e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1172:	24 1b       	sub	r18, r20
    1174:	35 0b       	sbc	r19, r21
    1176:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <__brkval>
    117a:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <__brkval+0x1>
    117e:	e2 17       	cp	r30, r18
    1180:	f3 07       	cpc	r31, r19
    1182:	a0 f4       	brcc	.+40     	; 0x11ac <malloc+0x120>
    1184:	2e 1b       	sub	r18, r30
    1186:	3f 0b       	sbc	r19, r31
    1188:	28 17       	cp	r18, r24
    118a:	39 07       	cpc	r19, r25
    118c:	78 f0       	brcs	.+30     	; 0x11ac <malloc+0x120>
    118e:	ac 01       	movw	r20, r24
    1190:	4e 5f       	subi	r20, 0xFE	; 254
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	24 17       	cp	r18, r20
    1196:	35 07       	cpc	r19, r21
    1198:	48 f0       	brcs	.+18     	; 0x11ac <malloc+0x120>
    119a:	4e 0f       	add	r20, r30
    119c:	5f 1f       	adc	r21, r31
    119e:	50 93 70 01 	sts	0x0170, r21	; 0x800170 <__brkval+0x1>
    11a2:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <__brkval>
    11a6:	81 93       	st	Z+, r24
    11a8:	91 93       	st	Z+, r25
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <malloc+0x124>
    11ac:	e0 e0       	ldi	r30, 0x00	; 0
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	cf 01       	movw	r24, r30
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <free>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <free+0xa>
    11c4:	81 c0       	rjmp	.+258    	; 0x12c8 <free+0x10c>
    11c6:	fc 01       	movw	r30, r24
    11c8:	32 97       	sbiw	r30, 0x02	; 2
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	12 82       	std	Z+2, r1	; 0x02
    11ce:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <__flp>
    11d2:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <__flp+0x1>
    11d6:	10 97       	sbiw	r26, 0x00	; 0
    11d8:	81 f4       	brne	.+32     	; 0x11fa <free+0x3e>
    11da:	20 81       	ld	r18, Z
    11dc:	31 81       	ldd	r19, Z+1	; 0x01
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    11e6:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    11ea:	28 17       	cp	r18, r24
    11ec:	39 07       	cpc	r19, r25
    11ee:	51 f5       	brne	.+84     	; 0x1244 <free+0x88>
    11f0:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <__brkval+0x1>
    11f4:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <__brkval>
    11f8:	67 c0       	rjmp	.+206    	; 0x12c8 <free+0x10c>
    11fa:	ed 01       	movw	r28, r26
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	ce 17       	cp	r28, r30
    1202:	df 07       	cpc	r29, r31
    1204:	40 f4       	brcc	.+16     	; 0x1216 <free+0x5a>
    1206:	4a 81       	ldd	r20, Y+2	; 0x02
    1208:	5b 81       	ldd	r21, Y+3	; 0x03
    120a:	9e 01       	movw	r18, r28
    120c:	41 15       	cp	r20, r1
    120e:	51 05       	cpc	r21, r1
    1210:	f1 f0       	breq	.+60     	; 0x124e <free+0x92>
    1212:	ea 01       	movw	r28, r20
    1214:	f5 cf       	rjmp	.-22     	; 0x1200 <free+0x44>
    1216:	d3 83       	std	Z+3, r29	; 0x03
    1218:	c2 83       	std	Z+2, r28	; 0x02
    121a:	40 81       	ld	r20, Z
    121c:	51 81       	ldd	r21, Z+1	; 0x01
    121e:	84 0f       	add	r24, r20
    1220:	95 1f       	adc	r25, r21
    1222:	c8 17       	cp	r28, r24
    1224:	d9 07       	cpc	r29, r25
    1226:	59 f4       	brne	.+22     	; 0x123e <free+0x82>
    1228:	88 81       	ld	r24, Y
    122a:	99 81       	ldd	r25, Y+1	; 0x01
    122c:	84 0f       	add	r24, r20
    122e:	95 1f       	adc	r25, r21
    1230:	02 96       	adiw	r24, 0x02	; 2
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	93 83       	std	Z+3, r25	; 0x03
    123c:	82 83       	std	Z+2, r24	; 0x02
    123e:	21 15       	cp	r18, r1
    1240:	31 05       	cpc	r19, r1
    1242:	29 f4       	brne	.+10     	; 0x124e <free+0x92>
    1244:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__flp+0x1>
    1248:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__flp>
    124c:	3d c0       	rjmp	.+122    	; 0x12c8 <free+0x10c>
    124e:	e9 01       	movw	r28, r18
    1250:	fb 83       	std	Y+3, r31	; 0x03
    1252:	ea 83       	std	Y+2, r30	; 0x02
    1254:	49 91       	ld	r20, Y+
    1256:	59 91       	ld	r21, Y+
    1258:	c4 0f       	add	r28, r20
    125a:	d5 1f       	adc	r29, r21
    125c:	ec 17       	cp	r30, r28
    125e:	fd 07       	cpc	r31, r29
    1260:	61 f4       	brne	.+24     	; 0x127a <free+0xbe>
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	84 0f       	add	r24, r20
    1268:	95 1f       	adc	r25, r21
    126a:	02 96       	adiw	r24, 0x02	; 2
    126c:	e9 01       	movw	r28, r18
    126e:	99 83       	std	Y+1, r25	; 0x01
    1270:	88 83       	st	Y, r24
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	9b 83       	std	Y+3, r25	; 0x03
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	12 96       	adiw	r26, 0x02	; 2
    1280:	8d 91       	ld	r24, X+
    1282:	9c 91       	ld	r25, X
    1284:	13 97       	sbiw	r26, 0x03	; 3
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	19 f0       	breq	.+6      	; 0x1290 <free+0xd4>
    128a:	fd 01       	movw	r30, r26
    128c:	dc 01       	movw	r26, r24
    128e:	f7 cf       	rjmp	.-18     	; 0x127e <free+0xc2>
    1290:	8d 91       	ld	r24, X+
    1292:	9c 91       	ld	r25, X
    1294:	11 97       	sbiw	r26, 0x01	; 1
    1296:	9d 01       	movw	r18, r26
    1298:	2e 5f       	subi	r18, 0xFE	; 254
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
    12a4:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
    12ac:	69 f4       	brne	.+26     	; 0x12c8 <free+0x10c>
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	29 f4       	brne	.+10     	; 0x12bc <free+0x100>
    12b2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__flp+0x1>
    12b6:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__flp>
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <free+0x104>
    12bc:	13 82       	std	Z+3, r1	; 0x03
    12be:	12 82       	std	Z+2, r1	; 0x02
    12c0:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <__brkval+0x1>
    12c4:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <__brkval>
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <do_rand>:
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    12e4:	68 81       	ld	r22, Y
    12e6:	79 81       	ldd	r23, Y+1	; 0x01
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	61 15       	cp	r22, r1
    12ee:	71 05       	cpc	r23, r1
    12f0:	81 05       	cpc	r24, r1
    12f2:	91 05       	cpc	r25, r1
    12f4:	21 f4       	brne	.+8      	; 0x12fe <do_rand+0x30>
    12f6:	64 e2       	ldi	r22, 0x24	; 36
    12f8:	79 ed       	ldi	r23, 0xD9	; 217
    12fa:	8b e5       	ldi	r24, 0x5B	; 91
    12fc:	97 e0       	ldi	r25, 0x07	; 7
    12fe:	2d e1       	ldi	r18, 0x1D	; 29
    1300:	33 ef       	ldi	r19, 0xF3	; 243
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	38 d0       	rcall	.+112    	; 0x1378 <__divmodsi4>
    1308:	49 01       	movw	r8, r18
    130a:	5a 01       	movw	r10, r20
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	a7 ea       	ldi	r26, 0xA7	; 167
    1312:	b1 e4       	ldi	r27, 0x41	; 65
    1314:	4d d0       	rcall	.+154    	; 0x13b0 <__muluhisi3>
    1316:	6b 01       	movw	r12, r22
    1318:	7c 01       	movw	r14, r24
    131a:	ac ee       	ldi	r26, 0xEC	; 236
    131c:	b4 ef       	ldi	r27, 0xF4	; 244
    131e:	a5 01       	movw	r20, r10
    1320:	94 01       	movw	r18, r8
    1322:	52 d0       	rcall	.+164    	; 0x13c8 <__mulohisi3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8c 0d       	add	r24, r12
    132a:	9d 1d       	adc	r25, r13
    132c:	ae 1d       	adc	r26, r14
    132e:	bf 1d       	adc	r27, r15
    1330:	b7 ff       	sbrs	r27, 7
    1332:	03 c0       	rjmp	.+6      	; 0x133a <do_rand+0x6c>
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	a1 09       	sbc	r26, r1
    1338:	b0 48       	sbci	r27, 0x80	; 128
    133a:	88 83       	st	Y, r24
    133c:	99 83       	std	Y+1, r25	; 0x01
    133e:	aa 83       	std	Y+2, r26	; 0x02
    1340:	bb 83       	std	Y+3, r27	; 0x03
    1342:	9f 77       	andi	r25, 0x7F	; 127
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	08 95       	ret

0000135a <rand_r>:
    135a:	b9 cf       	rjmp	.-142    	; 0x12ce <do_rand>

0000135c <rand>:
    135c:	86 e0       	ldi	r24, 0x06	; 6
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	b6 cf       	rjmp	.-148    	; 0x12ce <do_rand>

00001362 <srand>:
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    136a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    136e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1372:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1376:	08 95       	ret

00001378 <__divmodsi4>:
    1378:	05 2e       	mov	r0, r21
    137a:	97 fb       	bst	r25, 7
    137c:	16 f4       	brtc	.+4      	; 0x1382 <__divmodsi4+0xa>
    137e:	00 94       	com	r0
    1380:	0f d0       	rcall	.+30     	; 0x13a0 <__negsi2>
    1382:	57 fd       	sbrc	r21, 7
    1384:	05 d0       	rcall	.+10     	; 0x1390 <__divmodsi4_neg2>
    1386:	24 d0       	rcall	.+72     	; 0x13d0 <__udivmodsi4>
    1388:	07 fc       	sbrc	r0, 7
    138a:	02 d0       	rcall	.+4      	; 0x1390 <__divmodsi4_neg2>
    138c:	46 f4       	brtc	.+16     	; 0x139e <__divmodsi4_exit>
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <__negsi2>

00001390 <__divmodsi4_neg2>:
    1390:	50 95       	com	r21
    1392:	40 95       	com	r20
    1394:	30 95       	com	r19
    1396:	21 95       	neg	r18
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	4f 4f       	sbci	r20, 0xFF	; 255
    139c:	5f 4f       	sbci	r21, 0xFF	; 255

0000139e <__divmodsi4_exit>:
    139e:	08 95       	ret

000013a0 <__negsi2>:
    13a0:	90 95       	com	r25
    13a2:	80 95       	com	r24
    13a4:	70 95       	com	r23
    13a6:	61 95       	neg	r22
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <__muluhisi3>:
    13b0:	4a de       	rcall	.-876    	; 0x1046 <__umulhisi3>
    13b2:	a5 9f       	mul	r26, r21
    13b4:	90 0d       	add	r25, r0
    13b6:	b4 9f       	mul	r27, r20
    13b8:	90 0d       	add	r25, r0
    13ba:	a4 9f       	mul	r26, r20
    13bc:	80 0d       	add	r24, r0
    13be:	91 1d       	adc	r25, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	08 95       	ret

000013c4 <__mulshisi3>:
    13c4:	b7 ff       	sbrs	r27, 7
    13c6:	f4 cf       	rjmp	.-24     	; 0x13b0 <__muluhisi3>

000013c8 <__mulohisi3>:
    13c8:	f3 df       	rcall	.-26     	; 0x13b0 <__muluhisi3>
    13ca:	82 1b       	sub	r24, r18
    13cc:	93 0b       	sbc	r25, r19
    13ce:	08 95       	ret

000013d0 <__udivmodsi4>:
    13d0:	a1 e2       	ldi	r26, 0x21	; 33
    13d2:	1a 2e       	mov	r1, r26
    13d4:	aa 1b       	sub	r26, r26
    13d6:	bb 1b       	sub	r27, r27
    13d8:	fd 01       	movw	r30, r26
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <__udivmodsi4_ep>

000013dc <__udivmodsi4_loop>:
    13dc:	aa 1f       	adc	r26, r26
    13de:	bb 1f       	adc	r27, r27
    13e0:	ee 1f       	adc	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	a2 17       	cp	r26, r18
    13e6:	b3 07       	cpc	r27, r19
    13e8:	e4 07       	cpc	r30, r20
    13ea:	f5 07       	cpc	r31, r21
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__udivmodsi4_ep>
    13ee:	a2 1b       	sub	r26, r18
    13f0:	b3 0b       	sbc	r27, r19
    13f2:	e4 0b       	sbc	r30, r20
    13f4:	f5 0b       	sbc	r31, r21

000013f6 <__udivmodsi4_ep>:
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	1a 94       	dec	r1
    1400:	69 f7       	brne	.-38     	; 0x13dc <__udivmodsi4_loop>
    1402:	60 95       	com	r22
    1404:	70 95       	com	r23
    1406:	80 95       	com	r24
    1408:	90 95       	com	r25
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	bd 01       	movw	r22, r26
    1410:	cf 01       	movw	r24, r30
    1412:	08 95       	ret

00001414 <_exit>:
    1414:	f8 94       	cli

00001416 <__stop_program>:
    1416:	ff cf       	rjmp	.-2      	; 0x1416 <__stop_program>
