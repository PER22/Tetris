
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080010a  0080010a  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a5  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071a  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d4  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c1       	rjmp	.+720    	; 0x306 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d1       	rcall	.+786    	; 0x3d6 <main>
  c4:	cf c2       	rjmp	.+1438   	; 0x664 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

 //for 8 Mhz crystal
void delay_ms(int miliSec)
{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
 //for 8 Mhz crystal
void delay_ms(int miliSec)
{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

 //for 8 Mhz crystal
void delay_ms(int miliSec)
{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

 //for 8 Mhz crystal
void delay_ms(int miliSec)
{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 13a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
      LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <ADC_init>:
 178:	ea e7       	ldi	r30, 0x7A	; 122
   asm("nop");
  }
}

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 6c       	ori	r24, 0xC0	; 192
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <ADC_channel>:
}

void ADC_channel(unsigned char channel){
	if(channel < 8 && channel >= 0){
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	48 f4       	brcc	.+18     	; 0x19a <ADC_channel+0x16>
		//CLEAR ADMUX2:0
		ADMUX &= 0xF8;
 188:	ec e7       	ldi	r30, 0x7C	; 124
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	98 7f       	andi	r25, 0xF8	; 248
 190:	90 83       	st	Z, r25
		//Set ADMUX
		ADMUX |= (channel & 0x07);
 192:	90 81       	ld	r25, Z
 194:	87 70       	andi	r24, 0x07	; 7
 196:	89 2b       	or	r24, r25
 198:	80 83       	st	Z, r24
 19a:	08 95       	ret

0000019c <ADC_Read>:
	}
}

unsigned short ADC_Read(unsigned char channel){
		unsigned short myADC = 0x0000;
		ADC_channel(channel);
 19c:	f3 df       	rcall	.-26     	; 0x184 <ADC_channel>
		ADCSRA |= (1 << ADSC);
 19e:	ea e7       	ldi	r30, 0x7A	; 122
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24
		while(ADCSRA & (1 << ADSC));
 1a8:	80 81       	ld	r24, Z
 1aa:	86 fd       	sbrc	r24, 6
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <ADC_Read+0xc>
		myADC = ADC;
 1ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		return myADC;
} 
 1b6:	08 95       	ret

000001b8 <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
 1b8:	08 95       	ret

000001ba <Joystick_Read>:
	
	
	
}

void Joystick_Read(Joystick_Frame* frame){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_Read(0);		//read 10 bit ADC value on ADC0	
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	ec df       	rcall	.-40     	; 0x19c <ADC_Read>
 1c4:	99 83       	std	Y+1, r25	; 0x01
 1c6:	88 83       	st	Y, r24
	frame->raw_y = ADC_Read(1);		//read ADC1 as well
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	e8 df       	rcall	.-48     	; 0x19c <ADC_Read>
 1cc:	9b 83       	std	Y+3, r25	; 0x03
 1ce:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
 1d0:	80 b1       	in	r24, 0x00	; 0
 1d2:	83 fb       	bst	r24, 3
 1d4:	99 27       	eor	r25, r25
 1d6:	90 f9       	bld	r25, 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	89 27       	eor	r24, r25
 1dc:	8c 83       	std	Y+4, r24	; 0x04
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <testDisplayJoystickADC>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 1e4:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <currentJoystickFramePtr>
 1e8:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
 1ec:	2c 91       	ld	r18, X
 1ee:	e1 e1       	ldi	r30, 0x11	; 17
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	8d ec       	ldi	r24, 0xCD	; 205
 1f4:	28 9f       	mul	r18, r24
 1f6:	91 2d       	mov	r25, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	96 95       	lsr	r25
 1fc:	96 95       	lsr	r25
 1fe:	96 95       	lsr	r25
 200:	49 2f       	mov	r20, r25
 202:	44 0f       	add	r20, r20
 204:	34 2f       	mov	r19, r20
 206:	33 0f       	add	r19, r19
 208:	33 0f       	add	r19, r19
 20a:	34 0f       	add	r19, r20
 20c:	42 2f       	mov	r20, r18
 20e:	43 1b       	sub	r20, r19
 210:	34 2f       	mov	r19, r20
 212:	30 5d       	subi	r19, 0xD0	; 208
 214:	33 83       	std	Z+3, r19	; 0x03
 216:	98 9f       	mul	r25, r24
 218:	31 2d       	mov	r19, r1
 21a:	11 24       	eor	r1, r1
 21c:	36 95       	lsr	r19
 21e:	36 95       	lsr	r19
 220:	36 95       	lsr	r19
 222:	33 0f       	add	r19, r19
 224:	43 2f       	mov	r20, r19
 226:	44 0f       	add	r20, r20
 228:	44 0f       	add	r20, r20
 22a:	34 0f       	add	r19, r20
 22c:	93 1b       	sub	r25, r19
 22e:	90 5d       	subi	r25, 0xD0	; 208
 230:	92 83       	std	Z+2, r25	; 0x02
 232:	69 e2       	ldi	r22, 0x29	; 41
 234:	26 9f       	mul	r18, r22
 236:	21 2d       	mov	r18, r1
 238:	11 24       	eor	r1, r1
 23a:	22 95       	swap	r18
 23c:	2f 70       	andi	r18, 0x0F	; 15
 23e:	20 5d       	subi	r18, 0xD0	; 208
 240:	21 83       	std	Z+1, r18	; 0x01
 242:	50 e3       	ldi	r21, 0x30	; 48
 244:	50 83       	st	Z, r21
 246:	40 e2       	ldi	r20, 0x20	; 32
 248:	44 83       	std	Z+4, r20	; 0x04
 24a:	12 96       	adiw	r26, 0x02	; 2
 24c:	9c 91       	ld	r25, X
 24e:	12 97       	sbiw	r26, 0x02	; 2
 250:	98 9f       	mul	r25, r24
 252:	21 2d       	mov	r18, r1
 254:	11 24       	eor	r1, r1
 256:	26 95       	lsr	r18
 258:	26 95       	lsr	r18
 25a:	26 95       	lsr	r18
 25c:	72 2f       	mov	r23, r18
 25e:	77 0f       	add	r23, r23
 260:	37 2f       	mov	r19, r23
 262:	33 0f       	add	r19, r19
 264:	33 0f       	add	r19, r19
 266:	37 0f       	add	r19, r23
 268:	79 2f       	mov	r23, r25
 26a:	73 1b       	sub	r23, r19
 26c:	37 2f       	mov	r19, r23
 26e:	30 5d       	subi	r19, 0xD0	; 208
 270:	30 87       	std	Z+8, r19	; 0x08
 272:	28 9f       	mul	r18, r24
 274:	81 2d       	mov	r24, r1
 276:	11 24       	eor	r1, r1
 278:	86 95       	lsr	r24
 27a:	86 95       	lsr	r24
 27c:	86 95       	lsr	r24
 27e:	88 0f       	add	r24, r24
 280:	38 2f       	mov	r19, r24
 282:	33 0f       	add	r19, r19
 284:	33 0f       	add	r19, r19
 286:	83 0f       	add	r24, r19
 288:	28 1b       	sub	r18, r24
 28a:	20 5d       	subi	r18, 0xD0	; 208
 28c:	27 83       	std	Z+7, r18	; 0x07
 28e:	96 9f       	mul	r25, r22
 290:	91 2d       	mov	r25, r1
 292:	11 24       	eor	r1, r1
 294:	92 95       	swap	r25
 296:	9f 70       	andi	r25, 0x0F	; 15
 298:	90 5d       	subi	r25, 0xD0	; 208
 29a:	96 83       	std	Z+6, r25	; 0x06
 29c:	55 83       	std	Z+5, r21	; 0x05
 29e:	41 87       	std	Z+9, r20	; 0x09
 2a0:	14 96       	adiw	r26, 0x04	; 4
 2a2:	8c 91       	ld	r24, X
 2a4:	81 11       	cpse	r24, r1
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <testDisplayJoystickADC+0xc8>
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <testDisplayJoystickADC+0xca>
 2ac:	81 e3       	ldi	r24, 0x31	; 49
 2ae:	e1 e1       	ldi	r30, 0x11	; 17
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	82 87       	std	Z+10, r24	; 0x0a
 2b4:	13 86       	std	Z+11, r1	; 0x0b
 2b6:	bf 01       	movw	r22, r30
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	45 cf       	rjmp	.-374    	; 0x146 <LCD_DisplayString>
 2bc:	08 95       	ret

000002be <TimerOn>:
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2c4:	8d e7       	ldi	r24, 0x7D	; 125
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 2e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 2e6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 2ea:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 2ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 2f2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2f6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 2fa:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 2fe:	8f b7       	in	r24, 0x3f	; 63
 300:	80 68       	ori	r24, 0x80	; 128
 302:	8f bf       	out	0x3f, r24	; 63
 304:	08 95       	ret

00000306 <__vector_13>:
}


//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 318:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 31c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 320:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 324:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	a1 09       	sbc	r26, r1
 32c:	b1 09       	sbc	r27, r1
 32e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 332:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 336:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 33a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	if(_avr_timer_cntcurr == 0){
 33e:	89 2b       	or	r24, r25
 340:	8a 2b       	or	r24, r26
 342:	8b 2b       	or	r24, r27
 344:	99 f4       	brne	.+38     	; 0x36c <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 34c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 350:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 354:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 358:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 35c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 360:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 364:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 368:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}
}
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 37e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 382:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 386:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 38a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 38e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 392:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 396:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 39a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 39e:	08 95       	ret

000003a0 <Joystick_Tick>:
}

void Joystick_Tick(){
	//READ + POPULATE always into the next frame before swapping buffer
	Joystick_Read(nextJoystickFramePtr);	
 3a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 3a4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 3a8:	08 df       	rcall	.-496    	; 0x1ba <Joystick_Read>
	Joystick_Process_Raw(nextJoystickFramePtr);	
 3aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <nextJoystickFramePtr>
 3ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 3b2:	02 df       	rcall	.-508    	; 0x1b8 <Joystick_Process_Raw>
	//COPY POINTER BEFORE SWAPPING
	Joystick_Frame* temp = currentJoystickFramePtr;
 3b4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <currentJoystickFramePtr>
 3b8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <currentJoystickFramePtr+0x1>
	//SWAP BUFFER	
	currentJoystickFramePtr = nextJoystickFramePtr;
 3bc:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <nextJoystickFramePtr>
 3c0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <nextJoystickFramePtr+0x1>
 3c4:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <currentJoystickFramePtr+0x1>
 3c8:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <currentJoystickFramePtr>
	nextJoystickFramePtr = temp;
 3cc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 3d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 3d4:	08 95       	ret

000003d6 <main>:
}

int main(void)
{
	DDRA = 0x00;
 3d6:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	82 b9       	out	0x02, r24	; 2
	
	//DDRB = 0x______
	//PORTB = 0x________
	
	DDRC = 0xFF;
 3dc:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 3de:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 3e0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 3e2:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 3e4:	c9 de       	rcall	.-622    	; 0x178 <ADC_init>
	LCD_init();
 3e6:	97 de       	rcall	.-722    	; 0x116 <LCD_init>
 3e8:	87 e0       	ldi	r24, 0x07	; 7
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	1a d0       	rcall	.+52     	; 0x422 <malloc>
 3ee:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <currentJoystickFramePtr+0x1>
 3f2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <currentJoystickFramePtr>
 3f6:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	13 d0       	rcall	.+38     	; 0x422 <malloc>
 3fc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <nextJoystickFramePtr+0x1>
 400:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <nextJoystickFramePtr>
 404:	6a ef       	ldi	r22, 0xFA	; 250
 406:	70 e0       	ldi	r23, 0x00	; 0
	
	TimerSet(250);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	b8 df       	rcall	.-144    	; 0x37e <TimerSet>
	TimerOn();
 40e:	57 df       	rcall	.-338    	; 0x2be <TimerOn>
 410:	c7 df       	rcall	.-114    	; 0x3a0 <Joystick_Tick>
    while (1){
		Joystick_Tick();
 412:	e8 de       	rcall	.-560    	; 0x1e4 <testDisplayJoystickADC>
 414:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		testDisplayJoystickADC();
 418:	88 23       	and	r24, r24
		while(!TimerFlag);
 41a:	e1 f3       	breq	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 420:	f7 cf       	rjmp	.-18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

00000422 <malloc>:
		TimerFlag = 0;
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
    }
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	91 05       	cpc	r25, r1
 42e:	10 f4       	brcc	.+4      	; 0x434 <malloc+0x12>
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__flp>
 438:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__flp+0x1>
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	30 97       	sbiw	r30, 0x00	; 0
 446:	19 f1       	breq	.+70     	; 0x48e <malloc+0x6c>
 448:	40 81       	ld	r20, Z
 44a:	51 81       	ldd	r21, Z+1	; 0x01
 44c:	02 81       	ldd	r16, Z+2	; 0x02
 44e:	13 81       	ldd	r17, Z+3	; 0x03
 450:	48 17       	cp	r20, r24
 452:	59 07       	cpc	r21, r25
 454:	c8 f0       	brcs	.+50     	; 0x488 <malloc+0x66>
 456:	84 17       	cp	r24, r20
 458:	95 07       	cpc	r25, r21
 45a:	69 f4       	brne	.+26     	; 0x476 <malloc+0x54>
 45c:	10 97       	sbiw	r26, 0x00	; 0
 45e:	31 f0       	breq	.+12     	; 0x46c <malloc+0x4a>
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	0c 93       	st	X, r16
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	13 96       	adiw	r26, 0x03	; 3
 468:	1c 93       	st	X, r17
 46a:	27 c0       	rjmp	.+78     	; 0x4ba <malloc+0x98>
 46c:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <__flp>
 470:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <__flp+0x1>
 474:	22 c0       	rjmp	.+68     	; 0x4ba <malloc+0x98>
 476:	21 15       	cp	r18, r1
 478:	31 05       	cpc	r19, r1
 47a:	19 f0       	breq	.+6      	; 0x482 <malloc+0x60>
 47c:	42 17       	cp	r20, r18
 47e:	53 07       	cpc	r21, r19
 480:	18 f4       	brcc	.+6      	; 0x488 <malloc+0x66>
 482:	9a 01       	movw	r18, r20
 484:	bd 01       	movw	r22, r26
 486:	ef 01       	movw	r28, r30
 488:	df 01       	movw	r26, r30
 48a:	f8 01       	movw	r30, r16
 48c:	db cf       	rjmp	.-74     	; 0x444 <malloc+0x22>
 48e:	21 15       	cp	r18, r1
 490:	31 05       	cpc	r19, r1
 492:	f9 f0       	breq	.+62     	; 0x4d2 <malloc+0xb0>
 494:	28 1b       	sub	r18, r24
 496:	39 0b       	sbc	r19, r25
 498:	24 30       	cpi	r18, 0x04	; 4
 49a:	31 05       	cpc	r19, r1
 49c:	80 f4       	brcc	.+32     	; 0x4be <malloc+0x9c>
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	9b 81       	ldd	r25, Y+3	; 0x03
 4a2:	61 15       	cp	r22, r1
 4a4:	71 05       	cpc	r23, r1
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <malloc+0x8e>
 4a8:	fb 01       	movw	r30, r22
 4aa:	93 83       	std	Z+3, r25	; 0x03
 4ac:	82 83       	std	Z+2, r24	; 0x02
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <malloc+0x96>
 4b0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__flp+0x1>
 4b4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__flp>
 4b8:	fe 01       	movw	r30, r28
 4ba:	32 96       	adiw	r30, 0x02	; 2
 4bc:	44 c0       	rjmp	.+136    	; 0x546 <malloc+0x124>
 4be:	fe 01       	movw	r30, r28
 4c0:	e2 0f       	add	r30, r18
 4c2:	f3 1f       	adc	r31, r19
 4c4:	81 93       	st	Z+, r24
 4c6:	91 93       	st	Z+, r25
 4c8:	22 50       	subi	r18, 0x02	; 2
 4ca:	31 09       	sbc	r19, r1
 4cc:	39 83       	std	Y+1, r19	; 0x01
 4ce:	28 83       	st	Y, r18
 4d0:	3a c0       	rjmp	.+116    	; 0x546 <malloc+0x124>
 4d2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 4d6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 4da:	23 2b       	or	r18, r19
 4dc:	41 f4       	brne	.+16     	; 0x4ee <malloc+0xcc>
 4de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4e6:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__brkval+0x1>
 4ea:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__brkval>
 4ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f6:	21 15       	cp	r18, r1
 4f8:	31 05       	cpc	r19, r1
 4fa:	41 f4       	brne	.+16     	; 0x50c <malloc+0xea>
 4fc:	2d b7       	in	r18, 0x3d	; 61
 4fe:	3e b7       	in	r19, 0x3e	; 62
 500:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 504:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 508:	24 1b       	sub	r18, r20
 50a:	35 0b       	sbc	r19, r21
 50c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__brkval>
 510:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <__brkval+0x1>
 514:	e2 17       	cp	r30, r18
 516:	f3 07       	cpc	r31, r19
 518:	a0 f4       	brcc	.+40     	; 0x542 <malloc+0x120>
 51a:	2e 1b       	sub	r18, r30
 51c:	3f 0b       	sbc	r19, r31
 51e:	28 17       	cp	r18, r24
 520:	39 07       	cpc	r19, r25
 522:	78 f0       	brcs	.+30     	; 0x542 <malloc+0x120>
 524:	ac 01       	movw	r20, r24
 526:	4e 5f       	subi	r20, 0xFE	; 254
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	24 17       	cp	r18, r20
 52c:	35 07       	cpc	r19, r21
 52e:	48 f0       	brcs	.+18     	; 0x542 <malloc+0x120>
 530:	4e 0f       	add	r20, r30
 532:	5f 1f       	adc	r21, r31
 534:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__brkval+0x1>
 538:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__brkval>
 53c:	81 93       	st	Z+, r24
 53e:	91 93       	st	Z+, r25
 540:	02 c0       	rjmp	.+4      	; 0x546 <malloc+0x124>
 542:	e0 e0       	ldi	r30, 0x00	; 0
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	cf 01       	movw	r24, r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <free>:
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	00 97       	sbiw	r24, 0x00	; 0
 558:	09 f4       	brne	.+2      	; 0x55c <free+0xa>
 55a:	81 c0       	rjmp	.+258    	; 0x65e <free+0x10c>
 55c:	fc 01       	movw	r30, r24
 55e:	32 97       	sbiw	r30, 0x02	; 2
 560:	13 82       	std	Z+3, r1	; 0x03
 562:	12 82       	std	Z+2, r1	; 0x02
 564:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__flp>
 568:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__flp+0x1>
 56c:	10 97       	sbiw	r26, 0x00	; 0
 56e:	81 f4       	brne	.+32     	; 0x590 <free+0x3e>
 570:	20 81       	ld	r18, Z
 572:	31 81       	ldd	r19, Z+1	; 0x01
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 57c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 580:	28 17       	cp	r18, r24
 582:	39 07       	cpc	r19, r25
 584:	51 f5       	brne	.+84     	; 0x5da <free+0x88>
 586:	f0 93 35 01 	sts	0x0135, r31	; 0x800135 <__brkval+0x1>
 58a:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <__brkval>
 58e:	67 c0       	rjmp	.+206    	; 0x65e <free+0x10c>
 590:	ed 01       	movw	r28, r26
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	ce 17       	cp	r28, r30
 598:	df 07       	cpc	r29, r31
 59a:	40 f4       	brcc	.+16     	; 0x5ac <free+0x5a>
 59c:	4a 81       	ldd	r20, Y+2	; 0x02
 59e:	5b 81       	ldd	r21, Y+3	; 0x03
 5a0:	9e 01       	movw	r18, r28
 5a2:	41 15       	cp	r20, r1
 5a4:	51 05       	cpc	r21, r1
 5a6:	f1 f0       	breq	.+60     	; 0x5e4 <free+0x92>
 5a8:	ea 01       	movw	r28, r20
 5aa:	f5 cf       	rjmp	.-22     	; 0x596 <free+0x44>
 5ac:	d3 83       	std	Z+3, r29	; 0x03
 5ae:	c2 83       	std	Z+2, r28	; 0x02
 5b0:	40 81       	ld	r20, Z
 5b2:	51 81       	ldd	r21, Z+1	; 0x01
 5b4:	84 0f       	add	r24, r20
 5b6:	95 1f       	adc	r25, r21
 5b8:	c8 17       	cp	r28, r24
 5ba:	d9 07       	cpc	r29, r25
 5bc:	59 f4       	brne	.+22     	; 0x5d4 <free+0x82>
 5be:	88 81       	ld	r24, Y
 5c0:	99 81       	ldd	r25, Y+1	; 0x01
 5c2:	84 0f       	add	r24, r20
 5c4:	95 1f       	adc	r25, r21
 5c6:	02 96       	adiw	r24, 0x02	; 2
 5c8:	91 83       	std	Z+1, r25	; 0x01
 5ca:	80 83       	st	Z, r24
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	9b 81       	ldd	r25, Y+3	; 0x03
 5d0:	93 83       	std	Z+3, r25	; 0x03
 5d2:	82 83       	std	Z+2, r24	; 0x02
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	29 f4       	brne	.+10     	; 0x5e4 <free+0x92>
 5da:	f0 93 37 01 	sts	0x0137, r31	; 0x800137 <__flp+0x1>
 5de:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <__flp>
 5e2:	3d c0       	rjmp	.+122    	; 0x65e <free+0x10c>
 5e4:	e9 01       	movw	r28, r18
 5e6:	fb 83       	std	Y+3, r31	; 0x03
 5e8:	ea 83       	std	Y+2, r30	; 0x02
 5ea:	49 91       	ld	r20, Y+
 5ec:	59 91       	ld	r21, Y+
 5ee:	c4 0f       	add	r28, r20
 5f0:	d5 1f       	adc	r29, r21
 5f2:	ec 17       	cp	r30, r28
 5f4:	fd 07       	cpc	r31, r29
 5f6:	61 f4       	brne	.+24     	; 0x610 <free+0xbe>
 5f8:	80 81       	ld	r24, Z
 5fa:	91 81       	ldd	r25, Z+1	; 0x01
 5fc:	84 0f       	add	r24, r20
 5fe:	95 1f       	adc	r25, r21
 600:	02 96       	adiw	r24, 0x02	; 2
 602:	e9 01       	movw	r28, r18
 604:	99 83       	std	Y+1, r25	; 0x01
 606:	88 83       	st	Y, r24
 608:	82 81       	ldd	r24, Z+2	; 0x02
 60a:	93 81       	ldd	r25, Z+3	; 0x03
 60c:	9b 83       	std	Y+3, r25	; 0x03
 60e:	8a 83       	std	Y+2, r24	; 0x02
 610:	e0 e0       	ldi	r30, 0x00	; 0
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	8d 91       	ld	r24, X+
 618:	9c 91       	ld	r25, X
 61a:	13 97       	sbiw	r26, 0x03	; 3
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	19 f0       	breq	.+6      	; 0x626 <free+0xd4>
 620:	fd 01       	movw	r30, r26
 622:	dc 01       	movw	r26, r24
 624:	f7 cf       	rjmp	.-18     	; 0x614 <free+0xc2>
 626:	8d 91       	ld	r24, X+
 628:	9c 91       	ld	r25, X
 62a:	11 97       	sbiw	r26, 0x01	; 1
 62c:	9d 01       	movw	r18, r26
 62e:	2e 5f       	subi	r18, 0xFE	; 254
 630:	3f 4f       	sbci	r19, 0xFF	; 255
 632:	82 0f       	add	r24, r18
 634:	93 1f       	adc	r25, r19
 636:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__brkval>
 63a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__brkval+0x1>
 63e:	28 17       	cp	r18, r24
 640:	39 07       	cpc	r19, r25
 642:	69 f4       	brne	.+26     	; 0x65e <free+0x10c>
 644:	30 97       	sbiw	r30, 0x00	; 0
 646:	29 f4       	brne	.+10     	; 0x652 <free+0x100>
 648:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__flp+0x1>
 64c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__flp>
 650:	02 c0       	rjmp	.+4      	; 0x656 <free+0x104>
 652:	13 82       	std	Z+3, r1	; 0x03
 654:	12 82       	std	Z+2, r1	; 0x02
 656:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <__brkval+0x1>
 65a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <__brkval>
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
