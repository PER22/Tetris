
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000c32  00000cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080010a  0080010a  00000cd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b87  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4e  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f80  00000000  00000000  000038c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00004848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087b  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a4  00000000  00000000  00005587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000672b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c3       	rjmp	.+1696   	; 0x6d6 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	be 02       	muls	r27, r30
  8e:	bb 02       	muls	r27, r27
  90:	b8 02       	muls	r27, r24
  92:	b5 02       	muls	r27, r21
  94:	b2 02       	muls	r27, r18
  96:	af 02       	muls	r26, r31
  98:	ac 02       	muls	r26, r28
  9a:	a9 02       	muls	r26, r25

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e2 e3       	ldi	r30, 0x32	; 50
  b0:	fc e0       	ldi	r31, 0x0C	; 12
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a7 34       	cpi	r26, 0x47	; 71
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	4c d4       	rcall	.+2200   	; 0x96c <main>
  d4:	ac c5       	rjmp	.+2904   	; 0xc2e <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <checkRotateAndDo>:
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}	
}
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	dc 01       	movw	r26, r24
 102:	11 96       	adiw	r26, 0x01	; 1
 104:	8c 91       	ld	r24, X
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	81 95       	neg	r24
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	9c 91       	ld	r25, X
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	18 96       	adiw	r26, 0x08	; 8
 112:	cc 90       	ld	r12, X
 114:	18 97       	sbiw	r26, 0x08	; 8
 116:	d1 2c       	mov	r13, r1
 118:	96 01       	movw	r18, r12
 11a:	28 0f       	add	r18, r24
 11c:	31 1d       	adc	r19, r1
 11e:	87 fd       	sbrc	r24, 7
 120:	3a 95       	dec	r19
 122:	28 30       	cpi	r18, 0x08	; 8
 124:	31 05       	cpc	r19, r1
 126:	08 f0       	brcs	.+2      	; 0x12a <checkRotateAndDo+0x52>
 128:	5a c0       	rjmp	.+180    	; 0x1de <checkRotateAndDo+0x106>
 12a:	19 96       	adiw	r26, 0x09	; 9
 12c:	ac 90       	ld	r10, X
 12e:	19 97       	sbiw	r26, 0x09	; 9
 130:	b1 2c       	mov	r11, r1
 132:	75 01       	movw	r14, r10
 134:	e9 0e       	add	r14, r25
 136:	f1 1c       	adc	r15, r1
 138:	97 fd       	sbrc	r25, 7
 13a:	fa 94       	dec	r15
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	e8 16       	cp	r14, r24
 140:	f1 04       	cpc	r15, r1
 142:	08 f0       	brcs	.+2      	; 0x146 <checkRotateAndDo+0x6e>
 144:	4c c0       	rjmp	.+152    	; 0x1de <checkRotateAndDo+0x106>
 146:	ad 01       	movw	r20, r26
 148:	fe 01       	movw	r30, r28
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	ce 01       	movw	r24, r28
 14e:	07 96       	adiw	r24, 0x07	; 7
 150:	8f 01       	movw	r16, r30
 152:	4d 01       	movw	r8, r26
 154:	24 c0       	rjmp	.+72     	; 0x19e <checkRotateAndDo+0xc6>
 156:	d4 01       	movw	r26, r8
 158:	13 96       	adiw	r26, 0x03	; 3
 15a:	2c 91       	ld	r18, X
 15c:	21 95       	neg	r18
 15e:	d8 01       	movw	r26, r16
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	2c 93       	st	X, r18
 164:	d4 01       	movw	r26, r8
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	fc 90       	ld	r15, X
 16a:	d8 01       	movw	r26, r16
 16c:	13 96       	adiw	r26, 0x03	; 3
 16e:	fc 92       	st	X, r15
 170:	d6 01       	movw	r26, r12
 172:	a2 0f       	add	r26, r18
 174:	b1 1d       	adc	r27, r1
 176:	27 fd       	sbrc	r18, 7
 178:	ba 95       	dec	r27
 17a:	9d 01       	movw	r18, r26
 17c:	18 97       	sbiw	r26, 0x08	; 8
 17e:	78 f5       	brcc	.+94     	; 0x1de <checkRotateAndDo+0x106>
 180:	d5 01       	movw	r26, r10
 182:	af 0d       	add	r26, r15
 184:	b1 1d       	adc	r27, r1
 186:	f7 fc       	sbrc	r15, 7
 188:	ba 95       	dec	r27
 18a:	7d 01       	movw	r14, r26
 18c:	b2 e0       	ldi	r27, 0x02	; 2
 18e:	8b 0e       	add	r8, r27
 190:	91 1c       	adc	r9, r1
 192:	0e 5f       	subi	r16, 0xFE	; 254
 194:	1f 4f       	sbci	r17, 0xFF	; 255
 196:	a0 e1       	ldi	r26, 0x10	; 16
 198:	ea 16       	cp	r14, r26
 19a:	f1 04       	cpc	r15, r1
 19c:	00 f5       	brcc	.+64     	; 0x1de <checkRotateAndDo+0x106>
 19e:	22 95       	swap	r18
 1a0:	32 95       	swap	r19
 1a2:	30 7f       	andi	r19, 0xF0	; 240
 1a4:	32 27       	eor	r19, r18
 1a6:	20 7f       	andi	r18, 0xF0	; 240
 1a8:	32 27       	eor	r19, r18
 1aa:	26 0f       	add	r18, r22
 1ac:	37 1f       	adc	r19, r23
 1ae:	2e 0d       	add	r18, r14
 1b0:	3f 1d       	adc	r19, r15
 1b2:	d9 01       	movw	r26, r18
 1b4:	2c 91       	ld	r18, X
 1b6:	21 11       	cpse	r18, r1
 1b8:	12 c0       	rjmp	.+36     	; 0x1de <checkRotateAndDo+0x106>
 1ba:	08 17       	cp	r16, r24
 1bc:	19 07       	cpc	r17, r25
 1be:	59 f6       	brne	.-106    	; 0x156 <checkRotateAndDo+0x7e>
 1c0:	9e 01       	movw	r18, r28
 1c2:	27 5f       	subi	r18, 0xF7	; 247
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	da 01       	movw	r26, r20
 1ca:	8c 93       	st	X, r24
 1cc:	81 81       	ldd	r24, Z+1	; 0x01
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	8c 93       	st	X, r24
 1d2:	32 96       	adiw	r30, 0x02	; 2
 1d4:	4e 5f       	subi	r20, 0xFE	; 254
 1d6:	5f 4f       	sbci	r21, 0xFF	; 255
 1d8:	e2 17       	cp	r30, r18
 1da:	f3 07       	cpc	r31, r19
 1dc:	a1 f7       	brne	.-24     	; 0x1c6 <checkRotateAndDo+0xee>
 1de:	28 96       	adiw	r28, 0x08	; 8
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	08 95       	ret

00000204 <checkRightAndDo>:
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
 204:	8f 92       	push	r8
 206:	9f 92       	push	r9
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	28 97       	sbiw	r28, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	dc 01       	movw	r26, r24
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
 22e:	8c 91       	ld	r24, X
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	89 83       	std	Y+1, r24	; 0x01
		tempActive[i][1] = active->coordinates[i][1];
 234:	11 96       	adiw	r26, 0x01	; 1
 236:	9c 91       	ld	r25, X
 238:	11 97       	sbiw	r26, 0x01	; 1
 23a:	9a 83       	std	Y+2, r25	; 0x02
			
		if(tempActive[i][0] + active->x_coordinate > 7
 23c:	18 96       	adiw	r26, 0x08	; 8
 23e:	cc 90       	ld	r12, X
 240:	18 97       	sbiw	r26, 0x08	; 8
 242:	d1 2c       	mov	r13, r1
 244:	96 01       	movw	r18, r12
 246:	28 0f       	add	r18, r24
 248:	31 1d       	adc	r19, r1
 24a:	87 fd       	sbrc	r24, 7
 24c:	3a 95       	dec	r19
 24e:	28 30       	cpi	r18, 0x08	; 8
 250:	31 05       	cpc	r19, r1
 252:	08 f0       	brcs	.+2      	; 0x256 <checkRightAndDo+0x52>
 254:	5a c0       	rjmp	.+180    	; 0x30a <checkRightAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
 256:	19 96       	adiw	r26, 0x09	; 9
 258:	ac 90       	ld	r10, X
 25a:	19 97       	sbiw	r26, 0x09	; 9
 25c:	b1 2c       	mov	r11, r1
 25e:	75 01       	movw	r14, r10
 260:	e9 0e       	add	r14, r25
 262:	f1 1c       	adc	r15, r1
 264:	97 fd       	sbrc	r25, 7
 266:	fa 94       	dec	r15
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	e8 16       	cp	r14, r24
 26c:	f1 04       	cpc	r15, r1
 26e:	08 f0       	brcs	.+2      	; 0x272 <checkRightAndDo+0x6e>
 270:	4c c0       	rjmp	.+152    	; 0x30a <checkRightAndDo+0x106>
 272:	ad 01       	movw	r20, r26
 274:	fe 01       	movw	r30, r28
 276:	31 96       	adiw	r30, 0x01	; 1
 278:	ce 01       	movw	r24, r28
 27a:	07 96       	adiw	r24, 0x07	; 7
 27c:	8f 01       	movw	r16, r30
 27e:	4d 01       	movw	r8, r26
 280:	24 c0       	rjmp	.+72     	; 0x2ca <checkRightAndDo+0xc6>
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
		tempActive[i][0] = active->coordinates[i][0] + 1;
 282:	d4 01       	movw	r26, r8
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	2c 91       	ld	r18, X
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	d8 01       	movw	r26, r16
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	2c 93       	st	X, r18
		tempActive[i][1] = active->coordinates[i][1];
 290:	d4 01       	movw	r26, r8
 292:	13 96       	adiw	r26, 0x03	; 3
 294:	fc 90       	ld	r15, X
 296:	d8 01       	movw	r26, r16
 298:	13 96       	adiw	r26, 0x03	; 3
 29a:	fc 92       	st	X, r15
			
		if(tempActive[i][0] + active->x_coordinate > 7
 29c:	d6 01       	movw	r26, r12
 29e:	a2 0f       	add	r26, r18
 2a0:	b1 1d       	adc	r27, r1
 2a2:	27 fd       	sbrc	r18, 7
 2a4:	ba 95       	dec	r27
 2a6:	9d 01       	movw	r18, r26
 2a8:	18 97       	sbiw	r26, 0x08	; 8
 2aa:	78 f5       	brcc	.+94     	; 0x30a <checkRightAndDo+0x106>
		|| tempActive[i][0] + active->x_coordinate < 0
		|| tempActive[i][1] + active->y_coordinate > 15
 2ac:	d5 01       	movw	r26, r10
 2ae:	af 0d       	add	r26, r15
 2b0:	b1 1d       	adc	r27, r1
 2b2:	f7 fc       	sbrc	r15, 7
 2b4:	ba 95       	dec	r27
 2b6:	7d 01       	movw	r14, r26
 2b8:	b2 e0       	ldi	r27, 0x02	; 2
 2ba:	8b 0e       	add	r8, r27
 2bc:	91 1c       	adc	r9, r1
 2be:	0e 5f       	subi	r16, 0xFE	; 254
 2c0:	1f 4f       	sbci	r17, 0xFF	; 255
 2c2:	a0 e1       	ldi	r26, 0x10	; 16
 2c4:	ea 16       	cp	r14, r26
 2c6:	f1 04       	cpc	r15, r1
 2c8:	00 f5       	brcc	.+64     	; 0x30a <checkRightAndDo+0x106>
		|| tempActive[i][1] + active->y_coordinate < 0){
			return; //fail
		}
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
 2ca:	22 95       	swap	r18
 2cc:	32 95       	swap	r19
 2ce:	30 7f       	andi	r19, 0xF0	; 240
 2d0:	32 27       	eor	r19, r18
 2d2:	20 7f       	andi	r18, 0xF0	; 240
 2d4:	32 27       	eor	r19, r18
 2d6:	26 0f       	add	r18, r22
 2d8:	37 1f       	adc	r19, r23
 2da:	2e 0d       	add	r18, r14
 2dc:	3f 1d       	adc	r19, r15
 2de:	d9 01       	movw	r26, r18
 2e0:	2c 91       	ld	r18, X
 2e2:	21 11       	cpse	r18, r1
 2e4:	12 c0       	rjmp	.+36     	; 0x30a <checkRightAndDo+0x106>
	}	
}
	
void checkRightAndDo(Tetromino* active, Gameboard* inactive){
	signed char tempActive[4][2];
	for(int i = 0; i < 4; i++){
 2e6:	08 17       	cp	r16, r24
 2e8:	19 07       	cpc	r17, r25
 2ea:	59 f6       	brne	.-106    	; 0x282 <checkRightAndDo+0x7e>
 2ec:	9e 01       	movw	r18, r28
 2ee:	27 5f       	subi	r18, 0xF7	; 247
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
		active->coordinates[i][0] = tempActive[i][0];
 2f2:	80 81       	ld	r24, Z
 2f4:	da 01       	movw	r26, r20
 2f6:	8c 93       	st	X, r24
		active->coordinates[i][1] = tempActive[i][1];
 2f8:	81 81       	ldd	r24, Z+1	; 0x01
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	8c 93       	st	X, r24
 2fe:	32 96       	adiw	r30, 0x02	; 2
 300:	4e 5f       	subi	r20, 0xFE	; 254
 302:	5f 4f       	sbci	r21, 0xFF	; 255
		//check gameboard
		else if(inactive->board[tempActive[i][0] + active->x_coordinate][tempActive[i][1]+ active->y_coordinate]){
			return;//fail
		}
	}
	for(int i = 0; i < 4; i++){
 304:	e2 17       	cp	r30, r18
 306:	f3 07       	cpc	r31, r19
 308:	a1 f7       	brne	.-24     	; 0x2f2 <checkRightAndDo+0xee>
		active->coordinates[i][0] = tempActive[i][0];
		active->coordinates[i][1] = tempActive[i][1];
	}
	
}
 30a:	28 96       	adiw	r28, 0x08	; 8
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	bf 90       	pop	r11
 328:	af 90       	pop	r10
 32a:	9f 90       	pop	r9
 32c:	8f 90       	pop	r8
 32e:	08 95       	ret

00000330 <checkLoss>:

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
 330:	fc 01       	movw	r30, r24
 332:	20 81       	ld	r18, Z
 334:	21 11       	cpse	r18, r1
 336:	0d c0       	rjmp	.+26     	; 0x352 <checkLoss+0x22>
 338:	9c 01       	movw	r18, r24
 33a:	20 59       	subi	r18, 0x90	; 144
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	90 89       	ldd	r25, Z+16	; 0x10
 340:	91 11       	cpse	r25, r1
 342:	0a c0       	rjmp	.+20     	; 0x358 <checkLoss+0x28>
 344:	70 96       	adiw	r30, 0x10	; 16
	}
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
 346:	e2 17       	cp	r30, r18
 348:	f3 07       	cpc	r31, r19
 34a:	c9 f7       	brne	.-14     	; 0x33e <checkLoss+0xe>
		if(inactive->board[i][0]){return 1;}
	}
	return 0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret
	
}

int checkLoss(Gameboard* inactive){
	for(int i = 0; i < 8; i++){
		if(inactive->board[i][0]){return 1;}
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
	
}
 35c:	08 95       	ret

0000035e <delay_ms>:
	set_PWM(0);
}

void PWM_off(){
	TCCR3A = 0x00;
	TCCR3B = 0x00;
 35e:	18 16       	cp	r1, r24
 360:	19 06       	cpc	r1, r25
 362:	5c f0       	brlt	.+22     	; 0x37a <delay_ms+0x1c>
 364:	08 95       	ret
 366:	00 00       	nop
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	31 09       	sbc	r19, r1
 36c:	e1 f7       	brne	.-8      	; 0x366 <delay_ms+0x8>
 36e:	4f 5f       	subi	r20, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	84 17       	cp	r24, r20
 374:	95 07       	cpc	r25, r21
 376:	19 f4       	brne	.+6      	; 0x37e <delay_ms+0x20>
 378:	08 95       	ret
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	27 e0       	ldi	r18, 0x07	; 7
 380:	33 e0       	ldi	r19, 0x03	; 3
 382:	f1 cf       	rjmp	.-30     	; 0x366 <delay_ms+0x8>

00000384 <LCD_WriteCommand>:
 384:	5e 98       	cbi	0x0b, 6	; 11
 386:	88 b9       	out	0x08, r24	; 8
 388:	5f 9a       	sbi	0x0b, 7	; 11
 38a:	00 00       	nop
 38c:	5f 98       	cbi	0x0b, 7	; 11
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	e5 cf       	rjmp	.-54     	; 0x35e <delay_ms>
 394:	08 95       	ret

00000396 <LCD_init>:
 396:	84 e6       	ldi	r24, 0x64	; 100
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	e1 df       	rcall	.-62     	; 0x35e <delay_ms>
 39c:	88 e3       	ldi	r24, 0x38	; 56
 39e:	f2 df       	rcall	.-28     	; 0x384 <LCD_WriteCommand>
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	f0 df       	rcall	.-32     	; 0x384 <LCD_WriteCommand>
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	ee df       	rcall	.-36     	; 0x384 <LCD_WriteCommand>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	ec df       	rcall	.-40     	; 0x384 <LCD_WriteCommand>
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	d6 cf       	rjmp	.-84     	; 0x35e <delay_ms>
 3b2:	08 95       	ret

000003b4 <ADC_init>:
 3b4:	ea e7       	ldi	r30, 0x7A	; 122
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	80 6c       	ori	r24, 0xC0	; 192
 3bc:	80 83       	st	Z, r24
 3be:	08 95       	ret

000003c0 <ADC_channel>:
 3c0:	88 30       	cpi	r24, 0x08	; 8
 3c2:	48 f4       	brcc	.+18     	; 0x3d6 <ADC_channel+0x16>
 3c4:	ec e7       	ldi	r30, 0x7C	; 124
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	90 81       	ld	r25, Z
 3ca:	98 7f       	andi	r25, 0xF8	; 248
 3cc:	90 83       	st	Z, r25
 3ce:	90 81       	ld	r25, Z
 3d0:	87 70       	andi	r24, 0x07	; 7
 3d2:	89 2b       	or	r24, r25
 3d4:	80 83       	st	Z, r24
 3d6:	08 95       	ret

000003d8 <ADC_read>:
 3d8:	f3 df       	rcall	.-26     	; 0x3c0 <ADC_channel>
 3da:	ea e7       	ldi	r30, 0x7A	; 122
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	80 83       	st	Z, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	86 fd       	sbrc	r24, 6
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <ADC_read+0xc>
 3ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3f2:	08 95       	ret

000003f4 <writetoAll16BitShiftRegisters>:

void writetoAll16BitShiftRegisters(unsigned short data1, unsigned short data2, unsigned short data3, unsigned short data4){

	//while writing data to register, RCLK is held low, when it goes high values are 
	//latched to the storage register and pins Q7:0.
	PORTB &= ~(1 << SHIFTREG_RCLK_PIN);
 3f4:	2d 98       	cbi	0x05, 5	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 3f6:	af e0       	ldi	r26, 0x0F	; 15
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
		
		//1 data bit is written to each shift register and the clock is set high.
		unsigned char bitToWrite =  (unsigned char)((data1 >> i) & 0x0001 );
 3fa:	fc 01       	movw	r30, r24
 3fc:	0a 2e       	mov	r0, r26
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	f6 95       	lsr	r31
 402:	e7 95       	ror	r30
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA1_PIN);}
 408:	fe 2f       	mov	r31, r30
 40a:	f1 70       	andi	r31, 0x01	; 1
 40c:	e0 ff       	sbrs	r30, 0
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	e5 b1       	in	r30, 0x05	; 5
 412:	ef 2b       	or	r30, r31
 414:	e5 b9       	out	0x05, r30	; 5
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		else{PORTB &= ~(1 << SHIFTREG_DATA1_PIN);}
 418:	28 98       	cbi	0x05, 0	; 5
		
		bitToWrite =  (unsigned char)((data2 >> i) & 0x0001 );
 41a:	fb 01       	movw	r30, r22
 41c:	0a 2e       	mov	r0, r26
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	f6 95       	lsr	r31
 422:	e7 95       	ror	r30
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA2_PIN);}
 428:	fe 2f       	mov	r31, r30
 42a:	f1 70       	andi	r31, 0x01	; 1
 42c:	e0 ff       	sbrs	r30, 0
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 430:	e5 b1       	in	r30, 0x05	; 5
 432:	ff 0f       	add	r31, r31
 434:	fe 2b       	or	r31, r30
 436:	f5 b9       	out	0x05, r31	; 5
 438:	01 c0       	rjmp	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		else{PORTB &= ~(1 << SHIFTREG_DATA2_PIN);}
 43a:	29 98       	cbi	0x05, 1	; 5
		
		bitToWrite =  (unsigned char)((data3 >> i) & 0x0001 );
 43c:	fa 01       	movw	r30, r20
 43e:	0a 2e       	mov	r0, r26
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	f6 95       	lsr	r31
 444:	e7 95       	ror	r30
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA3_PIN);}
 44a:	fe 2f       	mov	r31, r30
 44c:	f1 70       	andi	r31, 0x01	; 1
 44e:	e0 ff       	sbrs	r30, 0
 450:	06 c0       	rjmp	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 452:	e5 b1       	in	r30, 0x05	; 5
 454:	ff 0f       	add	r31, r31
 456:	ff 0f       	add	r31, r31
 458:	fe 2b       	or	r31, r30
 45a:	f5 b9       	out	0x05, r31	; 5
 45c:	01 c0       	rjmp	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		else{PORTB &= ~(1 << SHIFTREG_DATA3_PIN);}
 45e:	2a 98       	cbi	0x05, 2	; 5
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
 460:	f9 01       	movw	r30, r18
 462:	0a 2e       	mov	r0, r26
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	f6 95       	lsr	r31
 468:	e7 95       	ror	r30
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
 46e:	fe 2f       	mov	r31, r30
 470:	f1 70       	andi	r31, 0x01	; 1
 472:	e0 ff       	sbrs	r30, 0
 474:	07 c0       	rjmp	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 476:	e5 b1       	in	r30, 0x05	; 5
 478:	ff 0f       	add	r31, r31
 47a:	ff 0f       	add	r31, r31
 47c:	ff 0f       	add	r31, r31
 47e:	fe 2b       	or	r31, r30
 480:	f5 b9       	out	0x05, r31	; 5
 482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
 484:	2b 98       	cbi	0x05, 3	; 5
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 486:	ea e0       	ldi	r30, 0x0A	; 10
 488:	f0 e0       	ldi	r31, 0x00	; 0
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
			asm("nop");
 48a:	00 00       	nop
 48c:	31 97       	sbiw	r30, 0x01	; 1
		
		bitToWrite =  (unsigned char)((data4 >> i) & 0x0001 );
		if(bitToWrite){PORTB |= (bitToWrite << SHIFTREG_DATA4_PIN);}
		else{PORTB &= ~(1 << SHIFTREG_DATA4_PIN);}
			
		for(int k = 0; k < 10; k++){
 48e:	e9 f7       	brne	.-6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
 490:	2f 9a       	sbi	0x05, 7	; 5
 492:	ea e0       	ldi	r30, 0x0A	; 10
 494:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 496:	00 00       	nop
 498:	31 97       	sbiw	r30, 0x01	; 1
			asm("nop");
		}
		
		//Tick Clock, wait, tick other direction
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 49a:	e9 f7       	brne	.-6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
 49c:	2f 98       	cbi	0x05, 7	; 5
 49e:	ea e0       	ldi	r30, 0x0A	; 10
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
		for(int k = 0; k < 10; k++){
			asm("nop");
 4a2:	00 00       	nop
 4a4:	31 97       	sbiw	r30, 0x01	; 1
		PORTB |= (1<< SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
			asm("nop");
		}
		PORTB &= ~(1 << SHIFTREG_SRCLK_PIN);
		for(int k = 0; k < 10; k++){
 4a6:	e9 f7       	brne	.-6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	//Now serial write cycle begins.
	//When SRCLK goes from 0 to 1, the DATA# 
	//line's value shifts into the shift register. 
	//Looped 16x from MSB to LSB.
			
	for (int i = 15; i >=0; i--){
 4a8:	11 97       	sbiw	r26, 0x01	; 1
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ac:	a6 cf       	rjmp	.-180    	; 0x3fa <writetoAll16BitShiftRegisters+0x6>
		
	}
	
	//latch values from shift register to output pins 
	//after each of the 16 bits has been looped through;
	PORTB |= (1<< SHIFTREG_RCLK_PIN);
 4ae:	2d 9a       	sbi	0x05, 5	; 5
 4b0:	08 95       	ret

000004b2 <Joystick_Process_Raw>:
#include <avr/io.h>
#include "Joystick.h"
#include "io.h"


void Joystick_Process_Raw(Joystick_Frame* frame){
 4b2:	fc 01       	movw	r30, r24
	
	//Set X
	if(frame->raw_x < JOYSTICK_LIMIT_LEFT){frame->X_direction = LEFT;}
 4b4:	80 81       	ld	r24, Z
 4b6:	91 81       	ldd	r25, Z+1	; 0x01
 4b8:	84 36       	cpi	r24, 0x64	; 100
 4ba:	91 05       	cpc	r25, r1
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <Joystick_Process_Raw+0x12>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	85 83       	std	Z+5, r24	; 0x05
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <Joystick_Process_Raw+0x20>
	else if(frame->raw_x > JOYSTICK_LIMIT_RIGHT){frame->X_direction = RIGHT;}
 4c4:	89 3e       	cpi	r24, 0xE9	; 233
 4c6:	93 40       	sbci	r25, 0x03	; 3
 4c8:	18 f0       	brcs	.+6      	; 0x4d0 <Joystick_Process_Raw+0x1e>
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	85 83       	std	Z+5, r24	; 0x05
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <Joystick_Process_Raw+0x20>
	else{frame->X_direction = NONE;}
 4d0:	15 82       	std	Z+5, r1	; 0x05
	//Set Y
	if(frame->raw_y < JOYSTICK_LIMIT_UP){frame->Y_direction = UP;}
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	93 81       	ldd	r25, Z+3	; 0x03
 4d6:	84 36       	cpi	r24, 0x64	; 100
 4d8:	91 05       	cpc	r25, r1
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <Joystick_Process_Raw+0x30>
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	86 83       	std	Z+6, r24	; 0x06
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <Joystick_Process_Raw+0x44>
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
 4e2:	89 3e       	cpi	r24, 0xE9	; 233
 4e4:	93 40       	sbci	r25, 0x03	; 3
 4e6:	18 f0       	brcs	.+6      	; 0x4ee <Joystick_Process_Raw+0x3c>
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	86 83       	std	Z+6, r24	; 0x06
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <Joystick_Process_Raw+0x44>
	else{frame->Y_direction = NONE;}
 4ee:	16 82       	std	Z+6, r1	; 0x06
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
	} 
}
 4f0:	08 95       	ret
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
		frame->Y_direction = NONE;
 4f2:	16 82       	std	Z+6, r1	; 0x06
 4f4:	08 95       	ret
	else if(frame->raw_y > JOYSTICK_LIMIT_DOWN){frame->Y_direction = DOWN;}
	else{frame->Y_direction = NONE;}
	//Decide what to do on ambiguous inputs:
	//I have decided to ignore the vertical input as it isn't 
	//time critical to move the block downward
	if(frame->X_direction != NONE && frame->Y_direction != NONE){
 4f6:	85 81       	ldd	r24, Z+5	; 0x05
 4f8:	81 11       	cpse	r24, r1
 4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <Joystick_Process_Raw+0x40>
 4fc:	08 95       	ret

000004fe <Joystick_Read>:
		frame->Y_direction = NONE;
	} 
}

void Joystick_Read(Joystick_Frame* frame){
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24
	
	//We will read the Vx and Vy from the 2-potentiometer Joystick;
	
	frame->raw_x = ADC_read(0);		//read 10 bit ADC value on ADC0	
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	68 df       	rcall	.-304    	; 0x3d8 <ADC_read>
 508:	99 83       	std	Y+1, r25	; 0x01
 50a:	88 83       	st	Y, r24
	frame->raw_y = ADC_read(1);		//read ADC1 as well
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	64 df       	rcall	.-312    	; 0x3d8 <ADC_read>
 510:	9b 83       	std	Y+3, r25	; 0x03
 512:	8a 83       	std	Y+2, r24	; 0x02
	frame->click = (~PINA & 0x08) ? 1 : 0; //read the click
 514:	80 b1       	in	r24, 0x00	; 0
 516:	83 fb       	bst	r24, 3
 518:	99 27       	eor	r25, r25
 51a:	90 f9       	bld	r25, 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	89 27       	eor	r24, r25
 520:	8c 83       	std	Y+4, r24	; 0x04
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <pulseColumn>:
	*ptr = 0;
	
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
	unsigned short register3 = 0x00FF;
	unsigned short register4 = 0x00FF;
	//build each register
	column &= 0x07;
 544:	87 70       	andi	r24, 0x07	; 7
	switch(column){
 546:	48 2f       	mov	r20, r24
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	fa 01       	movw	r30, r20
 54c:	ea 5b       	subi	r30, 0xBA	; 186
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	44 c2       	rjmp	.+1160   	; 0x9da <__tablejump2__>
		case 7:
			//set the single high bit in the upper nibble of both
			//reg3 and reg4 to select which of the 8 columns they 
			//will be igniting.
			register4 |= 0x80FF;
			register3 |= 0x80FF;			
 552:	4f ef       	ldi	r20, 0xFF	; 255
 554:	50 e8       	ldi	r21, 0x80	; 128
 556:	14 c0       	rjmp	.+40     	; 0x580 <pulseColumn+0x58>
			break;
		case 6: 
			register4 |= 0x40FF;
			register3 |= 0x40FF;
 558:	4f ef       	ldi	r20, 0xFF	; 255
 55a:	50 e4       	ldi	r21, 0x40	; 64
			break;
 55c:	11 c0       	rjmp	.+34     	; 0x580 <pulseColumn+0x58>
		case 5:
			register4 |= 0x20FF;
			register3 |= 0x20FF;
 55e:	4f ef       	ldi	r20, 0xFF	; 255
 560:	50 e2       	ldi	r21, 0x20	; 32
			break;
 562:	0e c0       	rjmp	.+28     	; 0x580 <pulseColumn+0x58>
		case 4:
			register4 |= 0x10FF;
			register3 |= 0x10FF;
 564:	4f ef       	ldi	r20, 0xFF	; 255
 566:	50 e1       	ldi	r21, 0x10	; 16
			break;
 568:	0b c0       	rjmp	.+22     	; 0x580 <pulseColumn+0x58>
		case 3:
			register4 |= 0x08FF;
			register3 |= 0x08FF;
 56a:	4f ef       	ldi	r20, 0xFF	; 255
 56c:	58 e0       	ldi	r21, 0x08	; 8
			break;
 56e:	08 c0       	rjmp	.+16     	; 0x580 <pulseColumn+0x58>
		case 2:
			register4 |= 0x04FF;
			register3 |= 0x04FF;
 570:	4f ef       	ldi	r20, 0xFF	; 255
 572:	54 e0       	ldi	r21, 0x04	; 4
			break;
 574:	05 c0       	rjmp	.+10     	; 0x580 <pulseColumn+0x58>
		case 1:
			register4 |= 0x02FF;
			register3 |= 0x02FF;
 576:	4f ef       	ldi	r20, 0xFF	; 255
 578:	52 e0       	ldi	r21, 0x02	; 2
			break;
 57a:	02 c0       	rjmp	.+4      	; 0x580 <pulseColumn+0x58>
		case 0:
			register4 |= 0x01FF;
			register3 |= 0x01FF;
 57c:	4f ef       	ldi	r20, 0xFF	; 255
 57e:	51 e0       	ldi	r21, 0x01	; 1
 580:	0f 2e       	mov	r0, r31
 582:	ff e0       	ldi	r31, 0x0F	; 15
 584:	8f 2e       	mov	r8, r31
 586:	91 2c       	mov	r9, r1
 588:	f0 2d       	mov	r31, r0
 58a:	8c 0e       	add	r8, r28
 58c:	9d 1e       	adc	r9, r29
 58e:	10 e1       	ldi	r17, 0x10	; 16
 590:	81 9f       	mul	r24, r17
 592:	80 0c       	add	r8, r0
 594:	91 1c       	adc	r9, r1
 596:	11 24       	eor	r1, r1
 598:	9a 01       	movw	r18, r20
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 59a:	e0 e0       	ldi	r30, 0x00	; 0
 59c:	f0 e0       	ldi	r31, 0x00	; 0


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
	unsigned short register2 = 0xFFFF;
 59e:	6f ef       	ldi	r22, 0xFF	; 255
 5a0:	7f ef       	ldi	r23, 0xFF	; 255
}


void pulseColumn(unsigned char column, RGB_8x16_Frame frame){
	//static unsigned long pulseCount = 0;
	unsigned short register1 = 0xFFFF;
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	9f ef       	ldi	r25, 0xFF	; 255
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 5a6:	cc 24       	eor	r12, r12
 5a8:	c3 94       	inc	r12
 5aa:	d1 2c       	mov	r13, r1
 5ac:	5f 01       	movw	r10, r30
 5ae:	a8 e0       	ldi	r26, 0x08	; 8
 5b0:	aa 0e       	add	r10, r26
 5b2:	b1 1c       	adc	r11, r1
 5b4:	84 01       	movw	r16, r8
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
		//check red green blue
		if(frame.frame[column][i+8] & (1 << RGB_RED_BIT)){register2 &= ~(1 << i);}
 5b6:	d4 01       	movw	r26, r8
 5b8:	18 96       	adiw	r26, 0x08	; 8
 5ba:	fc 90       	ld	r15, X
 5bc:	f0 fe       	sbrs	r15, 0
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <pulseColumn+0xb0>
 5c0:	76 01       	movw	r14, r12
 5c2:	0e 2e       	mov	r0, r30
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <pulseColumn+0xa2>
 5c6:	ee 0c       	add	r14, r14
 5c8:	ff 1c       	adc	r15, r15
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <pulseColumn+0x9e>
 5ce:	e0 94       	com	r14
 5d0:	f0 94       	com	r15
 5d2:	6e 21       	and	r22, r14
 5d4:	7f 21       	and	r23, r15
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <pulseColumn+0xe6>
	
		else if(frame.frame[column][i+8] & (1 << RGB_GREEN_BIT)){register4 &= ~(1 << i); }
 5d8:	f2 fe       	sbrs	r15, 2
 5da:	0c c0       	rjmp	.+24     	; 0x5f4 <pulseColumn+0xcc>
 5dc:	76 01       	movw	r14, r12
 5de:	0e 2e       	mov	r0, r30
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <pulseColumn+0xbe>
 5e2:	ee 0c       	add	r14, r14
 5e4:	ff 1c       	adc	r15, r15
 5e6:	0a 94       	dec	r0
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <pulseColumn+0xba>
 5ea:	e0 94       	com	r14
 5ec:	f0 94       	com	r15
 5ee:	2e 21       	and	r18, r14
 5f0:	3f 21       	and	r19, r15
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <pulseColumn+0xe6>

		else if(frame.frame[column][i+8] & (1 << RGB_BLUE_BIT)){register2 &= ~(1 << (i+8));}
 5f4:	f1 fe       	sbrs	r15, 1
 5f6:	0b c0       	rjmp	.+22     	; 0x60e <pulseColumn+0xe6>
 5f8:	76 01       	movw	r14, r12
 5fa:	0a 2c       	mov	r0, r10
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <pulseColumn+0xda>
 5fe:	ee 0c       	add	r14, r14
 600:	ff 1c       	adc	r15, r15
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <pulseColumn+0xd6>
 606:	e0 94       	com	r14
 608:	f0 94       	com	r15
 60a:	6e 21       	and	r22, r14
 60c:	7f 21       	and	r23, r15
		
		//matrix 1			
		if(frame.frame[column][i] & (1 << RGB_RED_BIT)){register1 &= ~(1 << i);}
 60e:	d8 01       	movw	r26, r16
 610:	1c 91       	ld	r17, X
 612:	bf ef       	ldi	r27, 0xFF	; 255
 614:	8b 1a       	sub	r8, r27
 616:	9b 0a       	sbc	r9, r27
 618:	10 ff       	sbrs	r17, 0
 61a:	0c c0       	rjmp	.+24     	; 0x634 <pulseColumn+0x10c>
 61c:	86 01       	movw	r16, r12
 61e:	0e 2e       	mov	r0, r30
 620:	02 c0       	rjmp	.+4      	; 0x626 <pulseColumn+0xfe>
 622:	00 0f       	add	r16, r16
 624:	11 1f       	adc	r17, r17
 626:	0a 94       	dec	r0
 628:	e2 f7       	brpl	.-8      	; 0x622 <pulseColumn+0xfa>
 62a:	00 95       	com	r16
 62c:	10 95       	com	r17
 62e:	80 23       	and	r24, r16
 630:	91 23       	and	r25, r17
 632:	1a c0       	rjmp	.+52     	; 0x668 <pulseColumn+0x140>
		
		else if(frame.frame[column][i] & (1 << RGB_GREEN_BIT)){register3 &= ~(1 << i); }
 634:	12 ff       	sbrs	r17, 2
 636:	0c c0       	rjmp	.+24     	; 0x650 <pulseColumn+0x128>
 638:	86 01       	movw	r16, r12
 63a:	0e 2e       	mov	r0, r30
 63c:	02 c0       	rjmp	.+4      	; 0x642 <pulseColumn+0x11a>
 63e:	00 0f       	add	r16, r16
 640:	11 1f       	adc	r17, r17
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <pulseColumn+0x116>
 646:	00 95       	com	r16
 648:	10 95       	com	r17
 64a:	40 23       	and	r20, r16
 64c:	51 23       	and	r21, r17
 64e:	0c c0       	rjmp	.+24     	; 0x668 <pulseColumn+0x140>

		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
 650:	11 ff       	sbrs	r17, 1
 652:	0a c0       	rjmp	.+20     	; 0x668 <pulseColumn+0x140>
 654:	86 01       	movw	r16, r12
 656:	02 c0       	rjmp	.+4      	; 0x65c <pulseColumn+0x134>
 658:	00 0f       	add	r16, r16
 65a:	11 1f       	adc	r17, r17
 65c:	aa 94       	dec	r10
 65e:	e2 f7       	brpl	.-8      	; 0x658 <pulseColumn+0x130>
 660:	00 95       	com	r16
 662:	10 95       	com	r17
 664:	80 23       	and	r24, r16
 666:	91 23       	and	r25, r17
			register4 |= 0x01FF;
			register3 |= 0x01FF;
			break;
	}
	//matrix 2
	for(int i = 0; i < 8; i++){
 668:	31 96       	adiw	r30, 0x01	; 1
 66a:	e8 30       	cpi	r30, 0x08	; 8
 66c:	f1 05       	cpc	r31, r1
 66e:	09 f0       	breq	.+2      	; 0x672 <pulseColumn+0x14a>
		else if(frame.frame[column][i] & (1 << RGB_BLUE_BIT)){register1 &= ~(1 << (i+8));}
	}
	
	

	writetoAll16BitShiftRegisters(register1, register2, register3, register4);
 670:	9d cf       	rjmp	.-198    	; 0x5ac <pulseColumn+0x84>
 672:	c0 de       	rcall	.-640    	; 0x3f4 <writetoAll16BitShiftRegisters>
		
	
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	bf 90       	pop	r11
 686:	af 90       	pop	r10
 688:	9f 90       	pop	r9
 68a:	8f 90       	pop	r8
 68c:	08 95       	ret

0000068e <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 68e:	8b e0       	ldi	r24, 0x0B	; 11
 690:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 694:	8d e7       	ldi	r24, 0x7D	; 125
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 69c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 6a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 6ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 6b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 6b6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 6ba:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 6be:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 6c2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 6c6:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 6ca:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 6ce:	8f b7       	in	r24, 0x3f	; 63
 6d0:	80 68       	ori	r24, 0x80	; 128
 6d2:	8f bf       	out	0x3f, r24	; 63
 6d4:	08 95       	ret

000006d6 <__vector_13>:
}

//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 6e8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 6ec:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 6f0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 6f4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	a1 09       	sbc	r26, r1
 6fc:	b1 09       	sbc	r27, r1
 6fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 702:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 706:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 70a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
 70e:	89 2b       	or	r24, r25
 710:	8a 2b       	or	r24, r26
 712:	8b 2b       	or	r24, r27
 714:	99 f4       	brne	.+38     	; 0x73c <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
//C programmer will not call this ISR, but TimerISR instead;
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 71c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 720:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 724:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 728:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 72c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 730:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 734:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 738:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	}
}
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 74e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 752:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 756:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 75a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 75e:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 762:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 766:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 76a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 76e:	08 95       	ret

00000770 <Joystick_Tick>:
}

              
void Joystick_Tick(){
	static int count = 0;
	if (count == 100){
 770:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count.1905>
 774:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count.1905+0x1>
 778:	84 36       	cpi	r24, 0x64	; 100
 77a:	91 05       	cpc	r25, r1
 77c:	f9 f4       	brne	.+62     	; 0x7bc <Joystick_Tick+0x4c>
		Joystick_Read(nextJoystickFramePtr);
 77e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <nextJoystickFramePtr>
 782:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <nextJoystickFramePtr+0x1>
 786:	bb de       	rcall	.-650    	; 0x4fe <Joystick_Read>
		Joystick_Process_Raw(nextJoystickFramePtr);
 788:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <nextJoystickFramePtr>
 78c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <nextJoystickFramePtr+0x1>
 790:	90 de       	rcall	.-736    	; 0x4b2 <Joystick_Process_Raw>
		//COPY POINTER BEFORE SWAPPING
		Joystick_Frame* temp = currentJoystickFramePtr;
 792:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <currentJoystickFramePtr>
 796:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <currentJoystickFramePtr+0x1>
		//SWAP BUFFER
		currentJoystickFramePtr = nextJoystickFramePtr;
 79a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <nextJoystickFramePtr>
 79e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <nextJoystickFramePtr+0x1>
 7a2:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <currentJoystickFramePtr+0x1>
 7a6:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <currentJoystickFramePtr>
		nextJoystickFramePtr = temp;
 7aa:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <nextJoystickFramePtr+0x1>
 7ae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <nextJoystickFramePtr>
		count = 0;
 7b2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count.1905+0x1>
 7b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count.1905>
 7ba:	08 95       	ret
	}
	else{count++; return;}
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <count.1905+0x1>
 7c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count.1905>
 7c6:	08 95       	ret

000007c8 <LED_Tick>:
	//READ + POPULATE always into the next frame before swapping buffer
}
			                                                                                        
void LED_Tick(){
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	c0 58       	subi	r28, 0x80	; 128
 7d2:	d1 09       	sbc	r29, r1
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
	static int count = 0;
	//update frame every 8 ms
	if(count == 20){ RGB_8x16_Frame tmpFrame = *current_RGB_FramePtr;
 7de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count.1909>
 7e2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count.1909+0x1>
 7e6:	44 97       	sbiw	r24, 0x14	; 20
 7e8:	29 f5       	brne	.+74     	; 0x834 <LED_Tick+0x6c>
 7ea:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <current_RGB_FramePtr>
 7ee:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <current_RGB_FramePtr+0x1>
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	f9 01       	movw	r30, r18
 7f6:	de 01       	movw	r26, r28
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	01 90       	ld	r0, Z+
 7fc:	0d 92       	st	X+, r0
 7fe:	8a 95       	dec	r24
 800:	e1 f7       	brne	.-8      	; 0x7fa <LED_Tick+0x32>
		*current_RGB_FramePtr = *next_RGB_FramePtr;
 802:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <next_RGB_FramePtr>
 806:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <next_RGB_FramePtr+0x1>
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	d9 01       	movw	r26, r18
 80e:	01 90       	ld	r0, Z+
 810:	0d 92       	st	X+, r0
 812:	8a 95       	dec	r24
 814:	e1 f7       	brne	.-8      	; 0x80e <LED_Tick+0x46>
		*next_RGB_FramePtr = tmpFrame;
 816:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <next_RGB_FramePtr>
 81a:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <next_RGB_FramePtr+0x1>
 81e:	80 e8       	ldi	r24, 0x80	; 128
 820:	fe 01       	movw	r30, r28
 822:	31 96       	adiw	r30, 0x01	; 1
 824:	01 90       	ld	r0, Z+
 826:	0d 92       	st	X+, r0
 828:	8a 95       	dec	r24
 82a:	e1 f7       	brne	.-8      	; 0x824 <LED_Tick+0x5c>
		count = 0;
 82c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count.1909+0x1>
 830:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count.1909>
	}
	pulseColumn(count++, *current_RGB_FramePtr);
 834:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <current_RGB_FramePtr>
 838:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <current_RGB_FramePtr+0x1>
 83c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count.1909>
 840:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count.1909+0x1>
 844:	9c 01       	movw	r18, r24
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <count.1909+0x1>
 84e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <count.1909>
 852:	2d b7       	in	r18, 0x3d	; 61
 854:	3e b7       	in	r19, 0x3e	; 62
 856:	20 58       	subi	r18, 0x80	; 128
 858:	31 09       	sbc	r19, r1
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	f8 94       	cli
 85e:	3e bf       	out	0x3e, r19	; 62
 860:	0f be       	out	0x3f, r0	; 63
 862:	2d bf       	out	0x3d, r18	; 61
 864:	ad b7       	in	r26, 0x3d	; 61
 866:	be b7       	in	r27, 0x3e	; 62
 868:	11 96       	adiw	r26, 0x01	; 1
 86a:	90 e8       	ldi	r25, 0x80	; 128
 86c:	01 90       	ld	r0, Z+
 86e:	0d 92       	st	X+, r0
 870:	9a 95       	dec	r25
 872:	e1 f7       	brne	.-8      	; 0x86c <LED_Tick+0xa4>
 874:	59 de       	rcall	.-846    	; 0x528 <pulseColumn>
	
}
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	c0 58       	subi	r28, 0x80	; 128
 882:	df 4f       	sbci	r29, 0xFF	; 255
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <Gamestate_Tick>:
	//call pulseColumn every  1 ms
void Gamestate_Tick(){
	static int count = 0;
	if(count == 200 
 894:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 898:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 89c:	88 3c       	cpi	r24, 0xC8	; 200
 89e:	91 05       	cpc	r25, r1
 8a0:	89 f0       	breq	.+34     	; 0x8c4 <Gamestate_Tick+0x30>
	|| count == 400 
 8a2:	80 39       	cpi	r24, 0x90	; 144
 8a4:	21 e0       	ldi	r18, 0x01	; 1
 8a6:	92 07       	cpc	r25, r18
 8a8:	69 f0       	breq	.+26     	; 0x8c4 <Gamestate_Tick+0x30>
	|| count == 600 
 8aa:	88 35       	cpi	r24, 0x58	; 88
 8ac:	22 e0       	ldi	r18, 0x02	; 2
 8ae:	92 07       	cpc	r25, r18
 8b0:	49 f0       	breq	.+18     	; 0x8c4 <Gamestate_Tick+0x30>
	|| count == 800 
 8b2:	80 32       	cpi	r24, 0x20	; 32
 8b4:	23 e0       	ldi	r18, 0x03	; 3
 8b6:	92 07       	cpc	r25, r18
 8b8:	29 f0       	breq	.+10     	; 0x8c4 <Gamestate_Tick+0x30>
	|| count == 1000){
 8ba:	88 3e       	cpi	r24, 0xE8	; 232
 8bc:	23 e0       	ldi	r18, 0x03	; 3
 8be:	92 07       	cpc	r25, r18
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <Gamestate_Tick+0x30>
 8c2:	4e c0       	rjmp	.+156    	; 0x960 <Gamestate_Tick+0xcc>
		 //switch based on joystick 
		 //up
			if(currentJoystickFramePtr->Y_direction == UP){
 8c4:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <currentJoystickFramePtr>
 8c8:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <currentJoystickFramePtr+0x1>
 8cc:	86 81       	ldd	r24, Z+6	; 0x06
 8ce:	83 30       	cpi	r24, 0x03	; 3
 8d0:	e1 f4       	brne	.+56     	; 0x90a <Gamestate_Tick+0x76>
				checkRotateAndDo(activeTile,board);
 8d2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <board>
 8d6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <board+0x1>
 8da:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <activeTile>
 8de:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <activeTile+0x1>
 8e2:	fa db       	rcall	.-2060   	; 0xd8 <checkRotateAndDo>
				checkRotateAndDo(activeTile,board);
 8e4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <board>
 8e8:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <board+0x1>
 8ec:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <activeTile>
 8f0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <activeTile+0x1>
 8f4:	f1 db       	rcall	.-2078   	; 0xd8 <checkRotateAndDo>
				checkRotateAndDo(activeTile,board);
 8f6:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <board>
 8fa:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <board+0x1>
 8fe:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <activeTile>
 902:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <activeTile+0x1>
 906:	e8 db       	rcall	.-2096   	; 0xd8 <checkRotateAndDo>
 908:	18 c0       	rjmp	.+48     	; 0x93a <Gamestate_Tick+0xa6>
			}
		//down
			else if(currentJoystickFramePtr->Y_direction == DOWN){
 90a:	84 30       	cpi	r24, 0x04	; 4
 90c:	51 f4       	brne	.+20     	; 0x922 <Gamestate_Tick+0x8e>
				checkRotateAndDo(activeTile,board);
 90e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <board>
 912:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <board+0x1>
 916:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <activeTile>
 91a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <activeTile+0x1>
 91e:	dc db       	rcall	.-2120   	; 0xd8 <checkRotateAndDo>
 920:	0c c0       	rjmp	.+24     	; 0x93a <Gamestate_Tick+0xa6>
			}
// 		//right
 			else if(currentJoystickFramePtr->X_direction== RIGHT){checkRightAndDo(activeTile,board);}	
 922:	85 81       	ldd	r24, Z+5	; 0x05
 924:	82 30       	cpi	r24, 0x02	; 2
 926:	49 f4       	brne	.+18     	; 0x93a <Gamestate_Tick+0xa6>
 928:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <board>
 92c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <board+0x1>
 930:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <activeTile>
 934:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <activeTile+0x1>
 938:	65 dc       	rcall	.-1846   	; 0x204 <checkRightAndDo>
// 		//left
 			else if(currentJoystickFramePtr->X_direction== RIGHT){checkLeftAndDo(activeTile,board);} 
			//moves done
		
			//check that new board isnt an outright loss
			lostYet = checkLoss(board);
 93a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <board>
 93e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <board+0x1>
 942:	f6 dc       	rcall	.-1556   	; 0x330 <checkLoss>
 944:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lostYet>
 948:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	
			}
			//check for a row to be deleted	

			//reset count if needed
			if(count == 1000){count = 0;}
 94c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 950:	88 3e       	cpi	r24, 0xE8	; 232
 952:	93 40       	sbci	r25, 0x03	; 3
 954:	51 f4       	brne	.+20     	; 0x96a <Gamestate_Tick+0xd6>
 956:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 95a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 95e:	08 95       	ret
 960:	01 96       	adiw	r24, 0x01	; 1
		
	}
	
	else{count++; return;}
 962:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 966:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 96a:	08 95       	ret

0000096c <main>:
 96c:	11 b8       	out	0x01, r1	; 1


int main(void)
{
	DDRA = 0x00;
	PORTA = 0xFF;
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF;
 972:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 974:	15 b8       	out	0x05, r1	; 5
	
	DDRC = 0xFF;
 976:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 978:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xFF;
 97a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 97c:	1b b8       	out	0x0b, r1	; 11
	
	//Initializations
	ADC_init();
 97e:	1a dd       	rcall	.-1484   	; 0x3b4 <ADC_init>
	LCD_init();
 980:	0a dd       	rcall	.-1516   	; 0x396 <LCD_init>
 982:	87 e0       	ldi	r24, 0x07	; 7
	
	currentJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	32 d0       	rcall	.+100    	; 0x9ec <malloc>
 988:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <currentJoystickFramePtr+0x1>
 98c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <currentJoystickFramePtr>
 990:	87 e0       	ldi	r24, 0x07	; 7
	nextJoystickFramePtr = (Joystick_Frame*) malloc(sizeof(Joystick_Frame));
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	2b d0       	rcall	.+86     	; 0x9ec <malloc>
 996:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <nextJoystickFramePtr+0x1>
 99a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <nextJoystickFramePtr>
 99e:	80 e8       	ldi	r24, 0x80	; 128
	
	current_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	24 d0       	rcall	.+72     	; 0x9ec <malloc>
 9a4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <current_RGB_FramePtr+0x1>
 9a8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_RGB_FramePtr>
 9ac:	80 e8       	ldi	r24, 0x80	; 128
	next_RGB_FramePtr = (RGB_8x16_Frame*) malloc(sizeof(RGB_8x16_Frame));
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	1d d0       	rcall	.+58     	; 0x9ec <malloc>
 9b2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_RGB_FramePtr+0x1>
 9b6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_RGB_FramePtr>
 9ba:	61 e0       	ldi	r22, 0x01	; 1
// 			}
// 		}
// 	}
// 	
	//timing
	TimerSet(1);
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 9c2:	c5 de       	rcall	.-630    	; 0x74e <TimerSet>
 9c4:	64 de       	rcall	.-824    	; 0x68e <TimerOn>
    while (1){
		Joystick_Tick();
 9c6:	d4 de       	rcall	.-600    	; 0x770 <Joystick_Tick>
 9c8:	65 df       	rcall	.-310    	; 0x894 <Gamestate_Tick>
		Gamestate_Tick(); //TODO
 9ca:	fe de       	rcall	.-516    	; 0x7c8 <LED_Tick>
 9cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		//SoundEffect_Tick();
		LED_Tick();
 9d0:	88 23       	and	r24, r24
		while(!TimerFlag);
 9d2:	e1 f3       	breq	.-8      	; 0x9cc <main+0x60>
 9d4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
 9d8:	f6 cf       	rjmp	.-20     	; 0x9c6 <main+0x5a>

000009da <__tablejump2__>:
		TimerFlag = 0;
 9da:	ee 0f       	add	r30, r30
 9dc:	ff 1f       	adc	r31, r31
    }
 9de:	00 24       	eor	r0, r0
 9e0:	00 1c       	adc	r0, r0
 9e2:	0b be       	out	0x3b, r0	; 59
 9e4:	07 90       	elpm	r0, Z+
 9e6:	f6 91       	elpm	r31, Z
 9e8:	e0 2d       	mov	r30, r0
 9ea:	09 94       	ijmp

000009ec <malloc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	82 30       	cpi	r24, 0x02	; 2
 9f6:	91 05       	cpc	r25, r1
 9f8:	10 f4       	brcc	.+4      	; 0x9fe <malloc+0x12>
 9fa:	82 e0       	ldi	r24, 0x02	; 2
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <__flp>
 a02:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <__flp+0x1>
 a06:	20 e0       	ldi	r18, 0x00	; 0
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	a0 e0       	ldi	r26, 0x00	; 0
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	30 97       	sbiw	r30, 0x00	; 0
 a10:	19 f1       	breq	.+70     	; 0xa58 <malloc+0x6c>
 a12:	40 81       	ld	r20, Z
 a14:	51 81       	ldd	r21, Z+1	; 0x01
 a16:	02 81       	ldd	r16, Z+2	; 0x02
 a18:	13 81       	ldd	r17, Z+3	; 0x03
 a1a:	48 17       	cp	r20, r24
 a1c:	59 07       	cpc	r21, r25
 a1e:	c8 f0       	brcs	.+50     	; 0xa52 <malloc+0x66>
 a20:	84 17       	cp	r24, r20
 a22:	95 07       	cpc	r25, r21
 a24:	69 f4       	brne	.+26     	; 0xa40 <malloc+0x54>
 a26:	10 97       	sbiw	r26, 0x00	; 0
 a28:	31 f0       	breq	.+12     	; 0xa36 <malloc+0x4a>
 a2a:	12 96       	adiw	r26, 0x02	; 2
 a2c:	0c 93       	st	X, r16
 a2e:	12 97       	sbiw	r26, 0x02	; 2
 a30:	13 96       	adiw	r26, 0x03	; 3
 a32:	1c 93       	st	X, r17
 a34:	27 c0       	rjmp	.+78     	; 0xa84 <malloc+0x98>
 a36:	00 93 45 01 	sts	0x0145, r16	; 0x800145 <__flp>
 a3a:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <__flp+0x1>
 a3e:	22 c0       	rjmp	.+68     	; 0xa84 <malloc+0x98>
 a40:	21 15       	cp	r18, r1
 a42:	31 05       	cpc	r19, r1
 a44:	19 f0       	breq	.+6      	; 0xa4c <malloc+0x60>
 a46:	42 17       	cp	r20, r18
 a48:	53 07       	cpc	r21, r19
 a4a:	18 f4       	brcc	.+6      	; 0xa52 <malloc+0x66>
 a4c:	9a 01       	movw	r18, r20
 a4e:	bd 01       	movw	r22, r26
 a50:	ef 01       	movw	r28, r30
 a52:	df 01       	movw	r26, r30
 a54:	f8 01       	movw	r30, r16
 a56:	db cf       	rjmp	.-74     	; 0xa0e <malloc+0x22>
 a58:	21 15       	cp	r18, r1
 a5a:	31 05       	cpc	r19, r1
 a5c:	f9 f0       	breq	.+62     	; 0xa9c <malloc+0xb0>
 a5e:	28 1b       	sub	r18, r24
 a60:	39 0b       	sbc	r19, r25
 a62:	24 30       	cpi	r18, 0x04	; 4
 a64:	31 05       	cpc	r19, r1
 a66:	80 f4       	brcc	.+32     	; 0xa88 <malloc+0x9c>
 a68:	8a 81       	ldd	r24, Y+2	; 0x02
 a6a:	9b 81       	ldd	r25, Y+3	; 0x03
 a6c:	61 15       	cp	r22, r1
 a6e:	71 05       	cpc	r23, r1
 a70:	21 f0       	breq	.+8      	; 0xa7a <malloc+0x8e>
 a72:	fb 01       	movw	r30, r22
 a74:	93 83       	std	Z+3, r25	; 0x03
 a76:	82 83       	std	Z+2, r24	; 0x02
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <malloc+0x96>
 a7a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <__flp+0x1>
 a7e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <__flp>
 a82:	fe 01       	movw	r30, r28
 a84:	32 96       	adiw	r30, 0x02	; 2
 a86:	44 c0       	rjmp	.+136    	; 0xb10 <malloc+0x124>
 a88:	fe 01       	movw	r30, r28
 a8a:	e2 0f       	add	r30, r18
 a8c:	f3 1f       	adc	r31, r19
 a8e:	81 93       	st	Z+, r24
 a90:	91 93       	st	Z+, r25
 a92:	22 50       	subi	r18, 0x02	; 2
 a94:	31 09       	sbc	r19, r1
 a96:	39 83       	std	Y+1, r19	; 0x01
 a98:	28 83       	st	Y, r18
 a9a:	3a c0       	rjmp	.+116    	; 0xb10 <malloc+0x124>
 a9c:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <__brkval>
 aa0:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <__brkval+0x1>
 aa4:	23 2b       	or	r18, r19
 aa6:	41 f4       	brne	.+16     	; 0xab8 <malloc+0xcc>
 aa8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 aac:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ab0:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <__brkval+0x1>
 ab4:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__brkval>
 ab8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 abc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ac0:	21 15       	cp	r18, r1
 ac2:	31 05       	cpc	r19, r1
 ac4:	41 f4       	brne	.+16     	; 0xad6 <malloc+0xea>
 ac6:	2d b7       	in	r18, 0x3d	; 61
 ac8:	3e b7       	in	r19, 0x3e	; 62
 aca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ace:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ad2:	24 1b       	sub	r18, r20
 ad4:	35 0b       	sbc	r19, r21
 ad6:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__brkval>
 ada:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__brkval+0x1>
 ade:	e2 17       	cp	r30, r18
 ae0:	f3 07       	cpc	r31, r19
 ae2:	a0 f4       	brcc	.+40     	; 0xb0c <malloc+0x120>
 ae4:	2e 1b       	sub	r18, r30
 ae6:	3f 0b       	sbc	r19, r31
 ae8:	28 17       	cp	r18, r24
 aea:	39 07       	cpc	r19, r25
 aec:	78 f0       	brcs	.+30     	; 0xb0c <malloc+0x120>
 aee:	ac 01       	movw	r20, r24
 af0:	4e 5f       	subi	r20, 0xFE	; 254
 af2:	5f 4f       	sbci	r21, 0xFF	; 255
 af4:	24 17       	cp	r18, r20
 af6:	35 07       	cpc	r19, r21
 af8:	48 f0       	brcs	.+18     	; 0xb0c <malloc+0x120>
 afa:	4e 0f       	add	r20, r30
 afc:	5f 1f       	adc	r21, r31
 afe:	50 93 44 01 	sts	0x0144, r21	; 0x800144 <__brkval+0x1>
 b02:	40 93 43 01 	sts	0x0143, r20	; 0x800143 <__brkval>
 b06:	81 93       	st	Z+, r24
 b08:	91 93       	st	Z+, r25
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <malloc+0x124>
 b0c:	e0 e0       	ldi	r30, 0x00	; 0
 b0e:	f0 e0       	ldi	r31, 0x00	; 0
 b10:	cf 01       	movw	r24, r30
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	1f 91       	pop	r17
 b18:	0f 91       	pop	r16
 b1a:	08 95       	ret

00000b1c <free>:
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	00 97       	sbiw	r24, 0x00	; 0
 b22:	09 f4       	brne	.+2      	; 0xb26 <free+0xa>
 b24:	81 c0       	rjmp	.+258    	; 0xc28 <free+0x10c>
 b26:	fc 01       	movw	r30, r24
 b28:	32 97       	sbiw	r30, 0x02	; 2
 b2a:	13 82       	std	Z+3, r1	; 0x03
 b2c:	12 82       	std	Z+2, r1	; 0x02
 b2e:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <__flp>
 b32:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <__flp+0x1>
 b36:	10 97       	sbiw	r26, 0x00	; 0
 b38:	81 f4       	brne	.+32     	; 0xb5a <free+0x3e>
 b3a:	20 81       	ld	r18, Z
 b3c:	31 81       	ldd	r19, Z+1	; 0x01
 b3e:	82 0f       	add	r24, r18
 b40:	93 1f       	adc	r25, r19
 b42:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <__brkval>
 b46:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <__brkval+0x1>
 b4a:	28 17       	cp	r18, r24
 b4c:	39 07       	cpc	r19, r25
 b4e:	51 f5       	brne	.+84     	; 0xba4 <free+0x88>
 b50:	f0 93 44 01 	sts	0x0144, r31	; 0x800144 <__brkval+0x1>
 b54:	e0 93 43 01 	sts	0x0143, r30	; 0x800143 <__brkval>
 b58:	67 c0       	rjmp	.+206    	; 0xc28 <free+0x10c>
 b5a:	ed 01       	movw	r28, r26
 b5c:	20 e0       	ldi	r18, 0x00	; 0
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	ce 17       	cp	r28, r30
 b62:	df 07       	cpc	r29, r31
 b64:	40 f4       	brcc	.+16     	; 0xb76 <free+0x5a>
 b66:	4a 81       	ldd	r20, Y+2	; 0x02
 b68:	5b 81       	ldd	r21, Y+3	; 0x03
 b6a:	9e 01       	movw	r18, r28
 b6c:	41 15       	cp	r20, r1
 b6e:	51 05       	cpc	r21, r1
 b70:	f1 f0       	breq	.+60     	; 0xbae <free+0x92>
 b72:	ea 01       	movw	r28, r20
 b74:	f5 cf       	rjmp	.-22     	; 0xb60 <free+0x44>
 b76:	d3 83       	std	Z+3, r29	; 0x03
 b78:	c2 83       	std	Z+2, r28	; 0x02
 b7a:	40 81       	ld	r20, Z
 b7c:	51 81       	ldd	r21, Z+1	; 0x01
 b7e:	84 0f       	add	r24, r20
 b80:	95 1f       	adc	r25, r21
 b82:	c8 17       	cp	r28, r24
 b84:	d9 07       	cpc	r29, r25
 b86:	59 f4       	brne	.+22     	; 0xb9e <free+0x82>
 b88:	88 81       	ld	r24, Y
 b8a:	99 81       	ldd	r25, Y+1	; 0x01
 b8c:	84 0f       	add	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	02 96       	adiw	r24, 0x02	; 2
 b92:	91 83       	std	Z+1, r25	; 0x01
 b94:	80 83       	st	Z, r24
 b96:	8a 81       	ldd	r24, Y+2	; 0x02
 b98:	9b 81       	ldd	r25, Y+3	; 0x03
 b9a:	93 83       	std	Z+3, r25	; 0x03
 b9c:	82 83       	std	Z+2, r24	; 0x02
 b9e:	21 15       	cp	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	29 f4       	brne	.+10     	; 0xbae <free+0x92>
 ba4:	f0 93 46 01 	sts	0x0146, r31	; 0x800146 <__flp+0x1>
 ba8:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <__flp>
 bac:	3d c0       	rjmp	.+122    	; 0xc28 <free+0x10c>
 bae:	e9 01       	movw	r28, r18
 bb0:	fb 83       	std	Y+3, r31	; 0x03
 bb2:	ea 83       	std	Y+2, r30	; 0x02
 bb4:	49 91       	ld	r20, Y+
 bb6:	59 91       	ld	r21, Y+
 bb8:	c4 0f       	add	r28, r20
 bba:	d5 1f       	adc	r29, r21
 bbc:	ec 17       	cp	r30, r28
 bbe:	fd 07       	cpc	r31, r29
 bc0:	61 f4       	brne	.+24     	; 0xbda <free+0xbe>
 bc2:	80 81       	ld	r24, Z
 bc4:	91 81       	ldd	r25, Z+1	; 0x01
 bc6:	84 0f       	add	r24, r20
 bc8:	95 1f       	adc	r25, r21
 bca:	02 96       	adiw	r24, 0x02	; 2
 bcc:	e9 01       	movw	r28, r18
 bce:	99 83       	std	Y+1, r25	; 0x01
 bd0:	88 83       	st	Y, r24
 bd2:	82 81       	ldd	r24, Z+2	; 0x02
 bd4:	93 81       	ldd	r25, Z+3	; 0x03
 bd6:	9b 83       	std	Y+3, r25	; 0x03
 bd8:	8a 83       	std	Y+2, r24	; 0x02
 bda:	e0 e0       	ldi	r30, 0x00	; 0
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	12 96       	adiw	r26, 0x02	; 2
 be0:	8d 91       	ld	r24, X+
 be2:	9c 91       	ld	r25, X
 be4:	13 97       	sbiw	r26, 0x03	; 3
 be6:	00 97       	sbiw	r24, 0x00	; 0
 be8:	19 f0       	breq	.+6      	; 0xbf0 <free+0xd4>
 bea:	fd 01       	movw	r30, r26
 bec:	dc 01       	movw	r26, r24
 bee:	f7 cf       	rjmp	.-18     	; 0xbde <free+0xc2>
 bf0:	8d 91       	ld	r24, X+
 bf2:	9c 91       	ld	r25, X
 bf4:	11 97       	sbiw	r26, 0x01	; 1
 bf6:	9d 01       	movw	r18, r26
 bf8:	2e 5f       	subi	r18, 0xFE	; 254
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	82 0f       	add	r24, r18
 bfe:	93 1f       	adc	r25, r19
 c00:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <__brkval>
 c04:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <__brkval+0x1>
 c08:	28 17       	cp	r18, r24
 c0a:	39 07       	cpc	r19, r25
 c0c:	69 f4       	brne	.+26     	; 0xc28 <free+0x10c>
 c0e:	30 97       	sbiw	r30, 0x00	; 0
 c10:	29 f4       	brne	.+10     	; 0xc1c <free+0x100>
 c12:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__flp+0x1>
 c16:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__flp>
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <free+0x104>
 c1c:	13 82       	std	Z+3, r1	; 0x03
 c1e:	12 82       	std	Z+2, r1	; 0x02
 c20:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <__brkval+0x1>
 c24:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <__brkval>
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	08 95       	ret

00000c2e <_exit>:
 c2e:	f8 94       	cli

00000c30 <__stop_program>:
 c30:	ff cf       	rjmp	.-2      	; 0xc30 <__stop_program>
